!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=147)}([function(e,t,n){"use strict";e.exports=n(52)},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){e.exports=n(56)()},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){var r=n(62);e.exports=function(e,t){if(null==e)return{};var n,o,i=r(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.sheetsManager=void 0;var o=r(n(6)),i=r(n(3)),a=r(n(11)),l=r(n(12)),u=r(n(13)),s=r(n(14)),c=r(n(15)),f=r(n(4)),d=r(n(0)),p=r(n(2)),h=(r(n(5)),r(n(64))),y=n(19),v=n(38),m=r(n(86)),b=r(n(87)),g=r(n(100)),x=r(n(101)),k=r(n(102)),w=r(n(119)),_=r(n(120)),S=r(n(121)),T=r(n(122)),C=(0,v.create)((0,b.default)()),E=(0,_.default)(),P=-1e11,O=new Map;t.sheetsManager=O;var M,j={};function N(){return M||(M=(0,k.default)({typography:{suppressWarning:!0}}))}y.ponyfillGlobal.__MUI_DEFAULT_THEME__=N();y.ponyfillGlobal.__MUI_STYLES__||(y.ponyfillGlobal.__MUI_STYLES__={}),y.ponyfillGlobal.__MUI_STYLES__.withStyles||(y.ponyfillGlobal.__MUI_STYLES__.withStyles=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r,y=t.withTheme,v=void 0!==y&&y,b=t.flip,k=void 0===b?null:b,_=t.name,M=(0,f.default)(t,["withTheme","flip","name"]),R=(0,S.default)(e),D=R.themingEnabled||"string"==typeof _||v;P+=1,R.options.index=P;var A=function(e){function t(e,n){var r;(0,a.default)(this,t),(r=(0,u.default)(this,(0,s.default)(t).call(this,e,n))).jss=n[m.default.jss]||C,r.sheetsManager=O,r.unsubscribeId=null;var o=n.muiThemeProviderOptions;return o&&(o.sheetsManager&&(r.sheetsManager=o.sheetsManager),r.sheetsCache=o.sheetsCache,r.disableStylesGeneration=o.disableStylesGeneration),r.stylesCreatorSaved=R,r.sheetOptions=(0,i.default)({generateClassName:E},n[m.default.sheetOptions]),r.theme=D?w.default.initial(n)||N():j,r.attach(r.theme),r.cacheClasses={value:null,lastProp:null,lastJSS:{}},r}return(0,c.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){var e=this;D&&(this.unsubscribeId=w.default.subscribe(this.context,function(t){var n=e.theme;e.theme=t,e.attach(e.theme),e.setState({},function(){e.detach(n)})}))}},{key:"componentDidUpdate",value:function(){this.stylesCreatorSaved}},{key:"componentWillUnmount",value:function(){this.detach(this.theme),null!==this.unsubscribeId&&w.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"getClasses",value:function(){if(this.disableStylesGeneration)return this.props.classes||{};var e=!1,t=x.default.get(this.sheetsManager,this.stylesCreatorSaved,this.theme);return t.sheet.classes!==this.cacheClasses.lastJSS&&(this.cacheClasses.lastJSS=t.sheet.classes,e=!0),this.props.classes!==this.cacheClasses.lastProp&&(this.cacheClasses.lastProp=this.props.classes,e=!0),e&&(this.cacheClasses.value=(0,g.default)({baseClasses:this.cacheClasses.lastJSS,newClasses:this.props.classes,Component:n})),this.cacheClasses.value}},{key:"attach",value:function(e){if(!this.disableStylesGeneration){var t=this.stylesCreatorSaved,n=x.default.get(this.sheetsManager,t,e);if(n||(n={refs:0,sheet:null},x.default.set(this.sheetsManager,t,e,n)),0===n.refs){var r;this.sheetsCache&&(r=x.default.get(this.sheetsCache,t,e)),r||((r=this.createSheet(e)).attach(),this.sheetsCache&&x.default.set(this.sheetsCache,t,e,r)),n.sheet=r;var o=this.context[m.default.sheetsRegistry];o&&o.add(r)}n.refs+=1}}},{key:"createSheet",value:function(e){var t=this.stylesCreatorSaved.create(e,_),r=_;return this.jss.createStyleSheet(t,(0,i.default)({meta:r,classNamePrefix:r,flip:"boolean"==typeof k?k:"rtl"===e.direction,link:!1},this.sheetOptions,this.stylesCreatorSaved.options,{name:_||n.displayName},M))}},{key:"detach",value:function(e){if(!this.disableStylesGeneration){var t=x.default.get(this.sheetsManager,this.stylesCreatorSaved,e);if(t.refs-=1,0===t.refs){x.default.delete(this.sheetsManager,this.stylesCreatorSaved,e),this.jss.removeStyleSheet(t.sheet);var n=this.context[m.default.sheetsRegistry];n&&n.remove(t.sheet)}}}},{key:"render",value:function(){var e=this.props,t=(e.classes,e.innerRef),r=(0,f.default)(e,["classes","innerRef"]),o=(0,T.default)({theme:this.theme,name:_,props:r});return v&&!o.theme&&(o.theme=this.theme),d.default.createElement(n,(0,i.default)({},o,{classes:this.getClasses(),ref:t}))}}]),t}(d.default.Component);return A.propTypes={},A.contextTypes=(0,i.default)((r={muiThemeProviderOptions:p.default.object},(0,o.default)(r,m.default.jss,p.default.object),(0,o.default)(r,m.default.sheetOptions,p.default.object),(0,o.default)(r,m.default.sheetsRegistry,p.default.object),r),D?w.default.contextTypes:{}),(0,h.default)(A,n),A}});var R=y.ponyfillGlobal.__MUI_STYLES__.withStyles;t.default=R},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(8)),l=s(n(28)),u=s(n(20));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="style",this.isProcessed=!1;var o=r.sheet,i=r.Renderer,a=r.selector;this.key=t,this.options=r,this.style=n,a&&(this.selectorText=a),this.renderer=o?o.renderer:new i}return i(e,[{key:"prop",value:function(e,t){if(void 0===t)return this.style[e];if(this.style[e]===t)return this;var n=null==(t=this.options.jss.plugins.onChangeValue(t,e,this))||!1===t,r=e in this.style;if(n&&!r)return this;var o=n&&r;if(o?delete this.style[e]:this.style[e]=t,this.renderable)return o?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,t),this;var i=this.options.sheet;return i&&i.attached&&(0,a.default)(!1,'Rule is not linked. Missing sheet option "link: true".'),this}},{key:"applyTo",value:function(e){var t=this.toJSON();for(var n in t)this.renderer.setProperty(e,n,t[n]);return this}},{key:"toJSON",value:function(){var e={};for(var t in this.style){var n=this.style[t];"object"!==(void 0===n?"undefined":o(n))?e[t]=n:Array.isArray(n)&&(e[t]=(0,u.default)(n))}return e}},{key:"toString",value:function(e){var t=this.options.sheet,n=!!t&&t.options.link?r({},e,{allowEmpty:!0}):e;return(0,l.default)(this.selector,this.style,n)}},{key:"selector",set:function(e){if(e!==this.selectorText&&(this.selectorText=e,this.renderable&&!this.renderer.setSelector(this.renderable,e)&&this.renderable)){var t=this.renderer.replaceRule(this.renderable,this);t&&(this.renderable=t)}},get:function(){return this.selectorText}}]),e}();t.default=c},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(26),o=n(27);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(63);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(21)),a=s(n(41)),l=s(n(10)),u=s(n(72));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.map={},this.raw={},this.index=[],this.update=function(e,t){var r=n.options,o=r.jss.plugins,i=r.sheet;if("string"==typeof e)o.onUpdate(t,n.get(e),i);else for(var a=0;a<n.index.length;a++)o.onUpdate(e,n.index[a],i)},this.options=t,this.classes=t.classes}return o(e,[{key:"add",value:function(e,t,n){var o=this.options,a=o.parent,s=o.sheet,c=o.jss,f=o.Renderer,d=o.generateClassName;!(n=r({classes:this.classes,parent:a,sheet:s,jss:c,Renderer:f,generateClassName:d},n)).selector&&this.classes[e]&&(n.selector="."+(0,u.default)(this.classes[e])),this.raw[e]=t;var p=(0,i.default)(e,t,n),h=void 0;!n.selector&&p instanceof l.default&&(h=d(p,s),p.selector="."+(0,u.default)(h)),this.register(p,h);var y=void 0===n.index?this.index.length:n.index;return this.index.splice(y,0,p),p}},{key:"get",value:function(e){return this.map[e]}},{key:"remove",value:function(e){this.unregister(e),this.index.splice(this.indexOf(e),1)}},{key:"indexOf",value:function(e){return this.index.indexOf(e)}},{key:"process",value:function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)}},{key:"register",value:function(e,t){this.map[e.key]=e,e instanceof l.default&&(this.map[e.selector]=e,t&&(this.classes[e.key]=t))}},{key:"unregister",value:function(e){delete this.map[e.key],e instanceof l.default&&(delete this.map[e.selector],delete this.classes[e.key])}},{key:"link",value:function(e){for(var t=this.options.sheet.renderer.getUnescapedKeysMap(this.index),n=0;n<e.length;n++){var r=e[n],o=this.options.sheet.renderer.getKey(r);t[o]&&(o=t[o]);var i=this.map[o];i&&(0,a.default)(i,r)}}},{key:"toString",value:function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t}}]),e}();t.default=c},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(53)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t);var r=n(35),o=n.n(r);n.d(t,"exactProp",function(){return o.a});var i=n(36),a=n.n(i);n.d(t,"getDisplayName",function(){return a.a});var l=n(37),u=n.n(l);n.d(t,"ponyfillGlobal",function(){return u.a})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var o=0;o<e.length&&"!important"!==e[o];o++)n&&(n+=", "),n+=r(e[o]," ");else n=r(e,", ");t||"!important"!==e[e.length-1]||(n+=" !important");return n};var r=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"unnamed",t=arguments[1],n=arguments[2],a=n.jss,l=(0,i.default)(t),u=a.plugins.onCreateRule(e,l,n);if(u)return u;"@"===e[0]&&(0,r.default)(!1,"[JSS] Unknown at-rule %s",e);return new o.default(e,l,n)};var r=a(n(8)),o=a(n(10)),i=a(n(69));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";n.r(t),n.d(t,"isBrowser",function(){return o});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o="object"===("undefined"==typeof window?"undefined":r(window))&&"object"===("undefined"==typeof document?"undefined":r(document))&&9===document.nodeType;t.default=o},function(e,t,n){"use strict";n.r(t);var r=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===o}(e)}(e)};var o="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function i(e,t){return!1!==t.clone&&t.isMergeableObject(e)?l((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function a(e,t,n){return e.concat(t).map(function(e){return i(e,n)})}function l(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||a,n.isMergeableObject=n.isMergeableObject||r;var o=Array.isArray(t);return o===Array.isArray(e)?o?n.arrayMerge(e,t,n):function(e,t,n){var r={};return n.isMergeableObject(e)&&Object.keys(e).forEach(function(t){r[t]=i(e[t],n)}),Object.keys(t).forEach(function(o){n.isMergeableObject(t[o])&&e[o]?r[o]=l(e[o],t[o],n):r[o]=i(t[o],n)}),r}(e,t,n):i(t,n)}l.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return l(e,n,t)},{})};var u=l;t.default=u},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),u=null,s=0,c=[],f=n(60);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(b(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function h(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertAt.before,n);n.insertBefore(t,o)}}function y(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function v(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return m(t,e.attrs),h(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;n=u||(u=v(t)),r=k.bind(null,n,a,!1),o=k.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){y(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete i[l.id]}}}};var g,x=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function k(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r="";if(!t)return r;var o=n.indent,l=void 0===o?0:o,u=t.fallbacks;if(l++,u)if(Array.isArray(u))for(var s=0;s<u.length;s++){var c=u[s];for(var f in c){var d=c[f];null!=d&&(r+="\n"+a(f+": "+(0,i.default)(d)+";",l))}}else for(var p in u){var h=u[p];null!=h&&(r+="\n"+a(p+": "+(0,i.default)(h)+";",l))}for(var y in t){var v=t[y];null!=v&&"fallbacks"!==y&&(r+="\n"+a(y+": "+(0,i.default)(v)+";",l))}return r||n.allowEmpty?r=a(e+" {"+r+"\n",--l)+a("}",l):r};var r,o=n(20),i=(r=o)&&r.__esModule?r:{default:r};function a(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(39),i=(r=o)&&r.__esModule?r:{default:r};t.default=new i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(22);var i="",a="";if(((r=o)&&r.__esModule?r:{default:r}).default){var l={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},u=document.createElement("p").style;for(var s in l)if(s+"Transform"in u){i=s,a=l[s];break}}t.default={js:i,css:a}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.capitalize=function(e){0;return e.charAt(0).toUpperCase()+e.slice(1)},t.contains=i,t.findIndex=a,t.find=function(e,t){var n=a(e,t);return n>-1?e[n]:void 0},t.createChainedFunction=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce(function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}},function(){})};var o=r(n(26));r(n(5));function i(e,t){return Object.keys(t).every(function(n){return e.hasOwnProperty(n)&&e[n]===t[n]})}function a(e,t){for(var n=(0,o.default)(t),r=0;r<e.length;r+=1){if("function"===n&&!0==!!t(e[r],r,e))return r;if("object"===n&&i(e[r],t))return r;if(-1!==["string","number","boolean"].indexOf(n))return e.indexOf(t)}return-1}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(123))},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(125))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(l[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(l[a[c]]=n[a[c]])}}return l}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.specialProperty=void 0;r(n(6)),r(n(3));var o="exact-prop: ​";t.specialProperty=o;var i=function(e){return e};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFunctionName=o,t.default=void 0;var r=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s\/]*)\s*/;function o(e){var t="".concat(e).match(r);return t&&t[1]||""}var i=function(e){return"string"==typeof e?e:e?e.displayName||e.name||o(e)||"Component":void 0};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.create=t.createGenerateClassName=t.sheets=t.RuleList=t.SheetsManager=t.SheetsRegistry=t.toCssValue=t.getDynamicStyles=void 0;var r=n(67);Object.defineProperty(t,"getDynamicStyles",{enumerable:!0,get:function(){return f(r).default}});var o=n(20);Object.defineProperty(t,"toCssValue",{enumerable:!0,get:function(){return f(o).default}});var i=n(39);Object.defineProperty(t,"SheetsRegistry",{enumerable:!0,get:function(){return f(i).default}});var a=n(68);Object.defineProperty(t,"SheetsManager",{enumerable:!0,get:function(){return f(a).default}});var l=n(16);Object.defineProperty(t,"RuleList",{enumerable:!0,get:function(){return f(l).default}});var u=n(29);Object.defineProperty(t,"sheets",{enumerable:!0,get:function(){return f(u).default}});var s=n(42);Object.defineProperty(t,"createGenerateClassName",{enumerable:!0,get:function(){return f(s).default}});var c=f(n(74));function f(e){return e&&e.__esModule?e:{default:e}}var d=t.create=function(e){return new c.default(e)};t.default=d()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.registry=[]}return r(e,[{key:"add",value:function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)}},{key:"reset",value:function(){this.registry=[]}},{key:"remove",value:function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)}},{key:"toString",value:function(e){return this.registry.filter(function(e){return e.attached}).map(function(t){return t.toString(e)}).join("\n")}},{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(70),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){return e&&e[i.default]&&e===e[i.default]()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){e.renderable=t,e.rules&&t.cssRules&&e.rules.link(t.cssRules)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(8)),o=(i(n(43)),i(n(73)));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(){var e=0;return function(t,n){(e+=1)>1e10&&(0,r.default)(!1,"[JSS] You might have a memory leak. Rule counter is at %s.",e);var i="c",a="";return n&&(i=n.options.classNamePrefix||"c",null!=n.options.jss.id&&(a+=n.options.jss.id)),""+i+o.default+a+e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=l(n(41)),a=l(n(16));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(t,n){var o=this;for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.update=function(e,t){return"string"==typeof e?o.rules.update(e,t):o.rules.update(e),o},this.attached=!1,this.deployed=!1,this.linked=!1,this.classes={},this.options=r({},n,{sheet:this,parent:this,classes:this.classes}),this.renderer=new n.Renderer(this),this.rules=new a.default(this.options),t)this.rules.add(i,t[i]);this.rules.process()}return o(e,[{key:"attach",value:function(){return this.attached?this:(this.deployed||this.deploy(),this.renderer.attach(),!this.linked&&this.options.link&&this.link(),this.attached=!0,this)}},{key:"detach",value:function(){return this.attached?(this.renderer.detach(),this.attached=!1,this):this}},{key:"addRule",value:function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)}},{key:"insertRule",value:function(e){var t=this.renderer.insertRule(e);t&&this.options.link&&(0,i.default)(e,t)}},{key:"addRules",value:function(e,t){var n=[];for(var r in e)n.push(this.addRule(r,e[r],t));return n}},{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"deleteRule",value:function(e){var t=this.rules.get(e);return!!t&&(this.rules.remove(t),!this.attached||!t.renderable||this.renderer.deleteRule(t.renderable))}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"deploy",value:function(){return this.renderer.deploy(),this.deployed=!0,this}},{key:"link",value:function(){var e=this.renderer.getRules();return e&&this.rules.link(e),this.linked=!0,this}},{key:"toString",value:function(e){return this.rules.toString(e)}}]),e}();t.default=u},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.convertHexToRGB=i,t.rgbToHex=function(e){if(0===e.indexOf("#"))return e;var t=a(e).values;return t=t.map(function(e){return 1===(t=e.toString(16)).length?"0".concat(t):t;var t}),"#".concat(t.join(""))},t.decomposeColor=a,t.recomposeColor=l,t.getContrastRatio=function(e,t){var n=u(e),r=u(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.getLuminance=u,t.emphasize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return u(e)>.5?s(e,t):c(e,t)},t.fade=function(e,t){if(!e)return e;e=a(e),t=o(t),("rgb"===e.type||"hsl"===e.type)&&(e.type+="a");return e.values[3]=t,l(e)},t.darken=s,t.lighten=c;r(n(5));function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e<t?t:e>n?n:e}function i(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length/3,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map(function(e){return e+e})),n?"rgb(".concat(n.map(function(e){return parseInt(e,16)}).join(", "),")"):""}function a(e){if("#"===e.charAt(0))return a(i(e));var t=e.indexOf("("),n=e.substring(0,t),r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map(function(e){return parseFloat(e)})}}function l(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")&&(n=n.map(function(e,t){return t<3?parseInt(e,10):e})),-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(e.type,"(").concat(n.join(", "),")")}function u(e){var t=a(e);if(-1!==t.type.indexOf("rgb")){var n=t.values.map(function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)});return Number((.2126*n[0]+.7152*n[1]+.0722*n[2]).toFixed(3))}return t.values[2]/100}function s(e,t){if(!e)return e;if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return l(e)}function c(e,t){if(!e)return e;if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return l(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t){return function(){return null}};t.default=r},function(e,t){function n(e){if(e&&"object"==typeof e){var t=e.which||e.keyCode||e.charCode;t&&(e=t)}if("number"==typeof e)return a[e];var n,i=String(e);return(n=r[i.toLowerCase()])?n:(n=o[i.toLowerCase()])||(1===i.length?i.charCodeAt(0):void 0)}n.isEventKey=function(e,t){if(e&&"object"==typeof e){var n=e.which||e.keyCode||e.charCode;if(null==n)return!1;if("string"==typeof t){var i;if(i=r[t.toLowerCase()])return i===n;if(i=o[t.toLowerCase()])return i===n}else if("number"==typeof t)return t===n;return!1}};var r=(t=e.exports=n).code=t.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},o=t.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(i=97;i<123;i++)r[String.fromCharCode(i)]=i-32;for(var i=48;i<58;i++)r[i-48]=i;for(i=1;i<13;i++)r["f"+i]=i+111;for(i=0;i<10;i++)r["numpad "+i]=i+96;var a=t.names=t.title={};for(i in r)a[r[i]]=i;for(var l in o)r[l]=o[l]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return e&&e.ownerDocument||document};t.default=r},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function i(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,l=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?l="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(l="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==l){var u=e.displayName||e.name,s="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+u+" uses "+s+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==l?"\n  "+l:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=i;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return a}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(61))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(124))},function(e,t,n){"use strict";
/** @license React v16.6.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(34),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.concurrent_mode"):60111,p=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,y=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},x={};function k(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||g}function w(){}function _(e,t,n){this.props=e,this.context=t,this.refs=x,this.updater=n||g}k.prototype.isReactComponent={},k.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},k.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=k.prototype;var S=_.prototype=new w;S.constructor=_,r(S,k.prototype),S.isPureReactComponent=!0;var T={current:null,currentDispatcher:null},C=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r=void 0,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:T.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var M=/\/+/g,j=[];function N(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function D(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+A(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+A(l=t[s],s);u+=e(l,c,r,o)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=m&&t[m]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+A(l,s++),r,o);else"object"===l&&b("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return u}(e,"",t,n)}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function U(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,r,n,function(e){return e}):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(M,"$&/")+"/")+n)),r.push(e))}function I(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(M,"$&/")+"/"),D(e,F,t=N(t,i,r,o)),R(t)}var z={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return I(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;D(e,U,t=N(null,null,t,n)),R(t)},count:function(e){return D(e,function(){return null},null)},toArray:function(e){var t=[];return I(e,t,null,function(e){return e}),t},only:function(e){return O(e)||b("143"),e}},createRef:function(){return{current:null}},Component:k,PureComponent:_,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:y,type:e,compare:void 0===t?null:t}},Fragment:l,StrictMode:u,Suspense:h,createElement:P,cloneElement:function(e,t,n){null==e&&b("267",e);var o=void 0,a=r({},e.props),l=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=T.current),void 0!==t.key&&(l=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)C.call(t,o)&&!E.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:i,type:e.type,key:l,ref:u,props:a,_owner:s}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.6.3",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:T,assign:r}};z.unstable_ConcurrentMode=d,z.unstable_Profiler=s;var L={default:z},V=L&&z||L;e.exports=V.default||V},function(e,t,n){"use strict";
/** @license React v16.6.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(34),i=n(54);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,i,a,l],s=0;(e=Error(t.replace(/%s/g,function(){return u[s++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var l=!1,u=null,s=!1,c=null,f={onError:function(e){l=!0,u=e}};function d(e,t,n,r,o,i,a,s,c){l=!1,u=null,function(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function y(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||a("96",e),!m[n])for(var r in t.extractEvents||a("97",e),m[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,u=r;b.hasOwnProperty(u)&&a("99",u),b[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&v(s[o],l,u);o=!0}else i.registrationName?(v(i.registrationName,l,u),o=!0):o=!1;o||a("98",r,e)}}}function v(e,t,n){g[e]&&a("100",e),g[e]=t,x[e]=t.eventTypes[n].dependencies}var m=[],b={},g={},x={},k=null,w=null,_=null;function S(e,t,n){var r=e.type||"unknown-event";e.currentTarget=_(n),function(e,t,n,r,o,i,f,p,h){if(d.apply(this,arguments),l){if(l){var y=u;l=!1,u=null}else a("198"),y=void 0;s||(s=!0,c=y)}}(r,t,void 0,e),e.currentTarget=null}function T(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function C(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var E=null;function P(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)S(e,t[r],n[r]);else t&&S(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var O={injectEventPluginOrder:function(e){p&&a("101"),p=Array.prototype.slice.call(e),y()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&y()}};function M(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function j(e){if(null!==e&&(E=T(E,e)),e=E,E=null,e&&(C(e,P),E&&a("95"),s))throw e=c,s=!1,c=null,e}var N=Math.random().toString(36).slice(2),R="__reactInternalInstance$"+N,D="__reactEventHandlers$"+N;function A(e){if(e[R])return e[R];for(;!e[R];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[R]).tag||6===e.tag?e:null}function U(e){return!(e=e[R])||5!==e.tag&&6!==e.tag?null:e}function F(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function I(e){return e[D]||null}function z(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function L(e,t,n){(t=M(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function V(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=z(t);for(t=n.length;0<t--;)L(n[t],"captured",e);for(t=0;t<n.length;t++)L(n[t],"bubbled",e)}}function W(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=M(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&W(e._targetInst,null,e)}function $(e){C(e,V)}var H=!("undefined"==typeof window||!window.document||!window.document.createElement);function K(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var G={animationend:K("Animation","AnimationEnd"),animationiteration:K("Animation","AnimationIteration"),animationstart:K("Animation","AnimationStart"),transitionend:K("Transition","TransitionEnd")},q={},Y={};function X(e){if(q[e])return q[e];if(!G[e])return e;var t,n=G[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return q[e]=n[t];return e}H&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete G.animationend.animation,delete G.animationiteration.animation,delete G.animationstart.animation),"TransitionEvent"in window||delete G.transitionend.transition);var Q=X("animationend"),J=X("animationiteration"),Z=X("animationstart"),ee=X("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function le(){return!1}function ue(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:le,this.isPropagationStopped=le,this}function se(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=se,e.release=ce}o(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ue.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(ue);var de=ue.extend({data:null}),pe=ue.extend({data:null}),he=[9,13,27,32],ye=H&&"CompositionEvent"in window,ve=null;H&&"documentMode"in document&&(ve=document.documentMode);var me=H&&"TextEvent"in window&&!ve,be=H&&(!ye||ve&&8<ve&&11>=ve),ge=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},ke=!1;function we(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function _e(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Te={eventTypes:xe,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ye)e:{switch(e){case"compositionstart":o=xe.compositionStart;break e;case"compositionend":o=xe.compositionEnd;break e;case"compositionupdate":o=xe.compositionUpdate;break e}o=void 0}else Se?we(e,n)&&(o=xe.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=xe.compositionStart);return o?(be&&"ko"!==n.locale&&(Se||o!==xe.compositionStart?o===xe.compositionEnd&&Se&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Se=!0)),o=de.getPooled(o,t,n,r),i?o.data=i:null!==(i=_e(n))&&(o.data=i),$(o),i=o):i=null,(e=me?function(e,t){switch(e){case"compositionend":return _e(t);case"keypress":return 32!==t.which?null:(ke=!0,ge);case"textInput":return(e=t.data)===ge&&ke?null:e;default:return null}}(e,n):function(e,t){if(Se)return"compositionend"===e||!ye&&we(e,t)?(e=ie(),oe=re=ne=null,Se=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return be&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(xe.beforeInput,t,n,r)).data=e,$(t)):t=null,null===i?t:null===t?i:[i,t]}},Ce=null,Ee=null,Pe=null;function Oe(e){if(e=w(e)){"function"!=typeof Ce&&a("280");var t=k(e.stateNode);Ce(e.stateNode,e.type,t)}}function Me(e){Ee?Pe?Pe.push(e):Pe=[e]:Ee=e}function je(){if(Ee){var e=Ee,t=Pe;if(Pe=Ee=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Ne(e,t){return e(t)}function Re(e,t,n){return e(t,n)}function De(){}var Ae=!1;function Ue(e,t){if(Ae)return e(t);Ae=!0;try{return Ne(e,t)}finally{Ae=!1,(null!==Ee||null!==Pe)&&(De(),je())}}var Fe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ie(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Fe[e.type]:"textarea"===t}function ze(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Le(e){if(!H)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Ve(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function We(e){e._valueTracker||(e._valueTracker=function(e){var t=Ve(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ve(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var $e=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,He=/^(.*)[\\\/]/,Ke="function"==typeof Symbol&&Symbol.for,Ge=Ke?Symbol.for("react.element"):60103,qe=Ke?Symbol.for("react.portal"):60106,Ye=Ke?Symbol.for("react.fragment"):60107,Xe=Ke?Symbol.for("react.strict_mode"):60108,Qe=Ke?Symbol.for("react.profiler"):60114,Je=Ke?Symbol.for("react.provider"):60109,Ze=Ke?Symbol.for("react.context"):60110,et=Ke?Symbol.for("react.concurrent_mode"):60111,tt=Ke?Symbol.for("react.forward_ref"):60112,nt=Ke?Symbol.for("react.suspense"):60113,rt=Ke?Symbol.for("react.memo"):60115,ot=Ke?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ye:return"Fragment";case qe:return"Portal";case Qe:return"Profiler";case Xe:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return lt(e.type);case ot:if(e=1===e._status?e._result:null)return lt(e)}return null}function ut(e){var t="";do{e:switch(e.tag){case 2:case 16:case 0:case 1:case 5:case 8:case 13:var n=e._debugOwner,r=e._debugSource,o=lt(e.type),i=null;n&&(i=lt(n.type)),n=o,o="",r?o=" (at "+r.fileName.replace(He,"")+":"+r.lineNumber+")":i&&(o=" (created by "+i+")"),i="\n    in "+(n||"Unknown")+o;break e;default:i=""}t+=i,e=e.return}while(e);return t}var st=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var yt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function mt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ct.call(dt,e)||!ct.call(ft,e)&&(st.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function gt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=bt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function kt(e,t){null!=(t=t.checked)&&mt(e,"checked",t,!1)}function wt(e,t){kt(e,t);var n=bt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?St(e,t.type,n):t.hasOwnProperty("defaultValue")&&St(e,t.type,bt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function _t(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function St(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yt,vt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yt,vt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yt,vt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new pt("tabIndex",1,!1,"tabindex",null);var Tt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ct(e,t,n){return(e=ue.getPooled(Tt.change,e,t,n)).type="change",Me(n),$(e),e}var Et=null,Pt=null;function Ot(e){j(e)}function Mt(e){if(Be(F(e)))return e}function jt(e,t){if("change"===e)return t}var Nt=!1;function Rt(){Et&&(Et.detachEvent("onpropertychange",Dt),Pt=Et=null)}function Dt(e){"value"===e.propertyName&&Mt(Pt)&&Ue(Ot,e=Ct(Pt,e,ze(e)))}function At(e,t,n){"focus"===e?(Rt(),Pt=n,(Et=t).attachEvent("onpropertychange",Dt)):"blur"===e&&Rt()}function Ut(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Mt(Pt)}function Ft(e,t){if("click"===e)return Mt(t)}function It(e,t){if("input"===e||"change"===e)return Mt(t)}H&&(Nt=Le("input")&&(!document.documentMode||9<document.documentMode));var zt={eventTypes:Tt,_isInputEventSupported:Nt,extractEvents:function(e,t,n,r){var o=t?F(t):window,i=void 0,a=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?i=jt:Ie(o)?Nt?i=It:(i=Ut,a=At):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Ft),i&&(i=i(e,t)))return Ct(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&St(o,"number",o.value)}},Lt=ue.extend({view:null,detail:null}),Vt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Wt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Vt[e])&&!!t[e]}function Bt(){return Wt}var $t=0,Ht=0,Kt=!1,Gt=!1,qt=Lt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=$t;return $t=e.screenX,Kt?"mousemove"===e.type?e.screenX-t:0:(Kt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ht;return Ht=e.screenY,Gt?"mousemove"===e.type?e.screenY-t:0:(Gt=!0,0)}}),Yt=qt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Qt={eventTypes:Xt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?A(t):null):i=null,i===t)return null;var a=void 0,l=void 0,u=void 0,s=void 0;"mouseout"===e||"mouseover"===e?(a=qt,l=Xt.mouseLeave,u=Xt.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Yt,l=Xt.pointerLeave,u=Xt.pointerEnter,s="pointer");var c=null==i?o:F(i);if(o=null==t?o:F(t),(e=a.getPooled(l,i,n,r)).type=s+"leave",e.target=c,e.relatedTarget=o,(n=a.getPooled(u,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=c,r=t,i&&r)e:{for(o=r,s=0,a=t=i;a;a=z(a))s++;for(a=0,u=o;u;u=z(u))a++;for(;0<s-a;)t=z(t),s--;for(;0<a-s;)o=z(o),a--;for(;s--;){if(t===o||t===o.alternate)break e;t=z(t),o=z(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(s=i.alternate)||s!==o);)t.push(i),i=z(i);for(i=[];r&&r!==o&&(null===(s=r.alternate)||s!==o);)i.push(r),r=z(r);for(r=0;r<t.length;r++)W(t[r],"bubbled",e);for(r=i.length;0<r--;)W(i[r],"captured",n);return[e,n]}},Jt=Object.prototype.hasOwnProperty;function Zt(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function en(e,t){if(Zt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Jt.call(t,n[r])||!Zt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var l=o.child;l;){if(l===n)return nn(o),e;if(l===r)return nn(o),t;l=l.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{l=!1;for(var u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}l||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=Lt.extend({relatedTarget:null});function un(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Lt.extend({key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=un(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?un(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?un(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=qt.extend({dataTransfer:null}),pn=Lt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yn=qt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),vn=[["abort","abort"],[Q,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],mn={},bn={};function gn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},mn[e]=t,bn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){gn(e,!0)}),vn.forEach(function(e){gn(e,!1)});var xn={eventTypes:mn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=bn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=bn[e];if(!o)return null;switch(e){case"keypress":if(0===un(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=qt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case Q:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=Lt;break;case"wheel":e=yn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Yt;break;default:e=ue}return $(t=e.getPooled(o,t,n,r)),t}},kn=xn.isInteractiveTopLevelEventType,wn=[];function _n(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=A(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ze(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,l=0;l<m.length;l++){var u=m[l];u&&(u=u.extractEvents(r,t,i,o))&&(a=T(a,u))}j(a)}}var Sn=!0;function Tn(e,t){if(!t)return null;var n=(kn(e)?En:Pn).bind(null,e);t.addEventListener(e,n,!1)}function Cn(e,t){if(!t)return null;var n=(kn(e)?En:Pn).bind(null,e);t.addEventListener(e,n,!0)}function En(e,t){Re(Pn,e,t)}function Pn(e,t){if(Sn){var n=ze(t);if(null===(n=A(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),wn.length){var r=wn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ue(_n,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>wn.length&&wn.push(e)}}}var On={},Mn=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function Nn(e){return Object.prototype.hasOwnProperty.call(e,jn)||(e[jn]=Mn++,On[e[jn]]={}),On[e[jn]]}function Rn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Dn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function An(e,t){var n,r=Dn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Dn(r)}}function Un(){for(var e=window,t=Rn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Rn(e.document)}return t}function Fn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var In=H&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Ln=null,Vn=null,Wn=null,Bn=!1;function $n(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Bn||null==Ln||Ln!==Rn(n)?null:("selectionStart"in(n=Ln)&&Fn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Wn&&en(Wn,n)?null:(Wn=n,(e=ue.getPooled(zn.select,Vn,e,t)).type="select",e.target=Ln,$(e),e))}var Hn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Nn(i),o=x.onSelect;for(var a=0;a<o.length;a++){var l=o[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?F(t):window,e){case"focus":(Ie(i)||"true"===i.contentEditable)&&(Ln=i,Vn=t,Wn=null);break;case"blur":Wn=Vn=Ln=null;break;case"mousedown":Bn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Bn=!1,$n(n,r);case"selectionchange":if(In)break;case"keydown":case"keyup":return $n(n,r)}return null}};function Kn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Gn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+bt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function qn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:bt(n)}}function Xn(e,t){var n=bt(t.value),r=bt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Qn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=I,w=U,_=F,O.injectEventPluginsByName({SimpleEventPlugin:xn,EnterLeaveEventPlugin:Qt,ChangeEventPlugin:zt,SelectEventPlugin:Hn,BeforeInputEventPlugin:Te});var Jn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Zn(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zn(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var tr,nr=void 0,rr=(tr=function(e,t){if(e.namespaceURI!==Jn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return tr(e,t)})}:tr);function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function ur(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function fr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function dr(e,t){var n=Nn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=x[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Cn("scroll",e);break;case"focus":case"blur":Cn("focus",e),Cn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Le(o)&&Cn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&Tn(o,e)}n[o]=!0}}}function pr(){}var hr=null,yr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function mr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var br="function"==typeof setTimeout?setTimeout:void 0,gr="function"==typeof clearTimeout?clearTimeout:void 0;function xr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function kr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var wr=[],_r=-1;function Sr(e){0>_r||(e.current=wr[_r],wr[_r]=null,_r--)}function Tr(e,t){wr[++_r]=e.current,e.current=t}var Cr={},Er={current:Cr},Pr={current:!1},Or=Cr;function Mr(e,t){var n=e.type.contextTypes;if(!n)return Cr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function jr(e){return null!=(e=e.childContextTypes)}function Nr(e){Sr(Pr),Sr(Er)}function Rr(e){Sr(Pr),Sr(Er)}function Dr(e,t,n){Er.current!==Cr&&a("168"),Tr(Er,t),Tr(Pr,n)}function Ar(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",lt(t)||"Unknown",i);return o({},n,r)}function Ur(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Cr,Or=Er.current,Tr(Er,t),Tr(Pr,Pr.current),!0}function Fr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Ar(e,t,Or),r.__reactInternalMemoizedMergedChildContext=t,Sr(Pr),Sr(Er),Tr(Er,t)):Sr(Pr),Tr(Pr,n)}var Ir=null,zr=null;function Lr(e){return function(t){try{return e(t)}catch(e){}}}function Vr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Wr(e,t,n,r){return new Vr(e,t,n,r)}function Br(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $r(e,t){var n=e.alternate;return null===n?((n=Wr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.firstContextDependency=e.firstContextDependency,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Hr(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Br(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Ye:return Kr(n.children,o,i,t);case et:return Gr(n,3|o,i,t);case Xe:return Gr(n,2|o,i,t);case Qe:return(e=Wr(12,n,t,4|o)).elementType=Qe,e.type=Qe,e.expirationTime=i,e;case nt:return(e=Wr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:l=10;break e;case Ze:l=9;break e;case tt:l=11;break e;case rt:l=14;break e;case ot:l=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=Wr(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Kr(e,t,n,r){return(e=Wr(7,e,r,t)).expirationTime=n,e}function Gr(e,t,n,r){return e=Wr(8,e,r,t),t=0==(1&t)?Xe:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function qr(e,t,n){return(e=Wr(6,e,null,t)).expirationTime=n,e}function Yr(e,t,n){return(t=Wr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Xr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),Zr(t,e)}function Qr(e,t){e.didError=!1;var n=e.latestPingedTime;0!==n&&n>=t&&(e.latestPingedTime=0),n=e.earliestPendingTime;var r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),Zr(t,e)}function Jr(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function Zr(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}var eo=!1;function to(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function no(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function ro(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function oo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function io(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=to(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=to(e.memoizedState),o=n.updateQueue=to(n.memoizedState)):r=e.updateQueue=no(o):null===o&&(o=n.updateQueue=no(r));null===o||r===o?oo(r,t):null===r.lastUpdate||null===o.lastUpdate?(oo(r,t),oo(o,t)):(oo(r,t),o.lastUpdate=t)}function ao(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=to(e.memoizedState):lo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function lo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=no(t)),t}function uo(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:eo=!0}return r}function so(e,t,n,r,o){eo=!1;for(var i=(t=lo(e,t)).baseState,a=null,l=0,u=t.firstUpdate,s=i;null!==u;){var c=u.expirationTime;c<o?(null===a&&(a=u,i=s),l<c&&(l=c)):(s=uo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<o?(null===c&&(c=u,null===a&&(i=s)),l<f&&(l=f)):(s=uo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=s),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=l,e.memoizedState=s}function co(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),fo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,fo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function fo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function po(e,t){return{value:e,source:t,stack:ut(t)}}var ho={current:null},yo=null,vo=null,mo=null;function bo(e,t){var n=e.type._context;Tr(ho,n._currentValue),n._currentValue=t}function go(e){var t=ho.current;Sr(ho),e.type._context._currentValue=t}function xo(e){yo=e,mo=vo=null,e.firstContextDependency=null}function ko(e,t){return mo!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(mo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===vo?(null===yo&&a("293"),yo.firstContextDependency=vo=t):vo=vo.next=t),e._currentValue}var wo={},_o={current:wo},So={current:wo},To={current:wo};function Co(e){return e===wo&&a("174"),e}function Eo(e,t){Tr(To,t),Tr(So,e),Tr(_o,wo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:er(null,"");break;default:t=er(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Sr(_o),Tr(_o,t)}function Po(e){Sr(_o),Sr(So),Sr(To)}function Oo(e){Co(To.current);var t=Co(_o.current),n=er(t,e.type);t!==n&&(Tr(So,e),Tr(_o,n))}function Mo(e){So.current===e&&(Sr(_o),Sr(So))}function jo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var No=$e.ReactCurrentOwner,Ro=(new r.Component).refs;function Do(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Ao={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),o=ro(r=Xi(r,e));o.payload=t,null!=n&&(o.callback=n),Hi(),io(e,o),Zi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Sa(),o=ro(r=Xi(r,e));o.tag=1,o.payload=t,null!=n&&(o.callback=n),Hi(),io(e,o),Zi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Sa(),r=ro(n=Xi(n,e));r.tag=2,null!=t&&(r.callback=t),Hi(),io(e,r),Zi(e,n)}};function Uo(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function Fo(e,t,n){var r=!1,o=Cr,i=t.contextType;return"object"==typeof i&&null!==i?i=No.currentDispatcher.readContext(i):(o=jr(t)?Or:Er.current,i=(r=null!=(r=t.contextTypes))?Mr(e,o):Cr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ao,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Io(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ao.enqueueReplaceState(t,t.state,null)}function zo(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ro;var i=t.contextType;"object"==typeof i&&null!==i?o.context=No.currentDispatcher.readContext(i):(i=jr(t)?Or:Er.current,o.context=Mr(e,i)),null!==(i=e.updateQueue)&&(so(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Do(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ao.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(so(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Lo=Array.isArray;function Vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("289"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Ro&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function Wo(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Bo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=$r(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=qr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Vo(e,t,n),r.return=e,r):((r=Hr(n.type,n.key,n.props,null,e.mode,r)).ref=Vo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Yr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Kr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=qr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ge:return(n=Hr(t.type,t.key,t.props,null,e.mode,n)).ref=Vo(e,null,t),n.return=e,n;case qe:return(t=Yr(t,e.mode,n)).return=e,t}if(Lo(t)||at(t))return(t=Kr(t,e.mode,n,null)).return=e,t;Wo(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ge:return n.key===o?n.type===Ye?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case qe:return n.key===o?c(e,t,n,r):null}if(Lo(n)||at(n))return null!==o?null:f(e,t,n,r,null);Wo(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ge:return e=e.get(null===r.key?n:r.key)||null,r.type===Ye?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case qe:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Lo(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);Wo(t,r)}return null}function y(o,a,l,u){for(var s=null,c=null,f=a,y=a=0,v=null;null!==f&&y<l.length;y++){f.index>y?(v=f,f=null):v=f.sibling;var m=p(o,f,l[y],u);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),a=i(m,a,y),null===c?s=m:c.sibling=m,c=m,f=v}if(y===l.length)return n(o,f),s;if(null===f){for(;y<l.length;y++)(f=d(o,l[y],u))&&(a=i(f,a,y),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);y<l.length;y++)(v=h(f,o,y,l[y],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?y:v.key),a=i(v,a,y),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach(function(e){return t(o,e)}),s}function v(o,l,u,s){var c=at(u);"function"!=typeof c&&a("150"),null==(u=c.call(u))&&a("151");for(var f=c=null,y=l,v=l=0,m=null,b=u.next();null!==y&&!b.done;v++,b=u.next()){y.index>v?(m=y,y=null):m=y.sibling;var g=p(o,y,b.value,s);if(null===g){y||(y=m);break}e&&y&&null===g.alternate&&t(o,y),l=i(g,l,v),null===f?c=g:f.sibling=g,f=g,y=m}if(b.done)return n(o,y),c;if(null===y){for(;!b.done;v++,b=u.next())null!==(b=d(o,b.value,s))&&(l=i(b,l,v),null===f?c=b:f.sibling=b,f=b);return c}for(y=r(o,y);!b.done;v++,b=u.next())null!==(b=h(y,o,v,b.value,s))&&(e&&null!==b.alternate&&y.delete(null===b.key?v:b.key),l=i(b,l,v),null===f?c=b:f.sibling=b,f=b);return e&&y.forEach(function(e){return t(o,e)}),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===Ye&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case Ge:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){if(7===s.tag?i.type===Ye:s.elementType===i.type){n(e,s.sibling),(r=o(s,i.type===Ye?i.props.children:i.props)).ref=Vo(e,s,i),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===Ye?((r=Kr(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Hr(i.type,i.key,i.props,null,e.mode,u)).ref=Vo(e,r,i),u.return=e,e=u)}return l(e);case qe:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Yr(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=qr(i,e.mode,u)).return=e,e=r),l(e);if(Lo(i))return y(e,r,i,u);if(at(i))return v(e,r,i,u);if(c&&Wo(e,i),void 0===i&&!s)switch(e.tag){case 1:case 0:a("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var $o=Bo(!0),Ho=Bo(!1),Ko=null,Go=null,qo=!1;function Yo(e,t){var n=Wr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Xo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Qo(e){if(qo){var t=Go;if(t){var n=t;if(!Xo(e,t)){if(!(t=xr(n))||!Xo(e,t))return e.effectTag|=2,qo=!1,void(Ko=e);Yo(Ko,n)}Ko=e,Go=kr(t)}else e.effectTag|=2,qo=!1,Ko=e}}function Jo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;Ko=e}function Zo(e){if(e!==Ko)return!1;if(!qo)return Jo(e),qo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!mr(t,e.memoizedProps))for(t=Go;t;)Yo(e,t),t=xr(t);return Jo(e),Go=Ko?xr(e.stateNode):null,!0}function ei(){Go=Ko=null,qo=!1}var ti=$e.ReactCurrentOwner;function ni(e,t,n,r){t.child=null===e?Ho(t,null,n,r):$o(t,e.child,n,r)}function ri(e,t,n,r,o){n=n.render;var i=t.ref;return xo(t),r=n(r,i),t.effectTag|=1,ni(e,t,r,o),t.child}function oi(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Br(a)||void 0!==a.defaultProps||null!==n.compare?((e=Hr(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ii(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?di(e,t,i):(t.effectTag|=1,(e=$r(a,r)).ref=t.ref,e.return=t,t.child=e)}function ii(e,t,n,r,o,i){return null!==e&&o<i&&en(e.memoizedProps,r)&&e.ref===t.ref?di(e,t,i):li(e,t,n,r,i)}function ai(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function li(e,t,n,r,o){var i=jr(n)?Or:Er.current;return i=Mr(t,i),xo(t),n=n(r,i),t.effectTag|=1,ni(e,t,n,o),t.child}function ui(e,t,n,r,o){if(jr(n)){var i=!0;Ur(t)}else i=!1;if(xo(t),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Fo(t,n,r),zo(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=No.currentDispatcher.readContext(s):s=Mr(t,s=jr(n)?Or:Er.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&Io(t,a,r,s),eo=!1;var d=t.memoizedState;u=a.state=d;var p=t.updateQueue;null!==p&&(so(t,p,r,a,o),u=t.memoizedState),l!==r||d!==u||Pr.current||eo?("function"==typeof c&&(Do(t,n,c,r),u=t.memoizedState),(l=eo||Uo(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,l=t.memoizedProps,a.props=t.type===t.elementType?l:jo(t.type,l),u=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=No.currentDispatcher.readContext(s):s=Mr(t,s=jr(n)?Or:Er.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&Io(t,a,r,s),eo=!1,u=t.memoizedState,d=a.state=u,null!==(p=t.updateQueue)&&(so(t,p,r,a,o),d=t.memoizedState),l!==r||u!==d||Pr.current||eo?("function"==typeof c&&(Do(t,n,c,r),d=t.memoizedState),(c=eo||Uo(t,n,l,r,u,d,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return si(e,t,n,r,i,o)}function si(e,t,n,r,o,i){ai(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Fr(t,n,!1),di(e,t,i);r=t.stateNode,ti.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=$o(t,e.child,null,i),t.child=$o(t,null,l,i)):ni(e,t,l,i),t.memoizedState=r.state,o&&Fr(t,n,!0),t.child}function ci(e){var t=e.stateNode;t.pendingContext?Dr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Dr(0,t.context,!1),Eo(e,t.containerInfo)}function fi(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;return null===e?a?(a=o.fallback,o=Kr(null,r,0,null),0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),r=Kr(a,r,n,null),o.sibling=r,(n=o).return=r.return=t):n=r=Ho(t,null,o.children,n):null!==e.memoizedState?(e=(r=e.child).sibling,a?(n=o.fallback,o=$r(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=$r(e,n,e.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=$o(t,r.child,o.children,n)):(e=e.child,a?(a=o.fallback,(o=Kr(null,r,0,null)).child=e,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Kr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=$o(t,e,o.children,n)),t.memoizedState=i,t.child=n,r}function di(e,t,n){if(null!==e&&(t.firstContextDependency=e.firstContextDependency),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=$r(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$r(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function pi(e,t,n){var r=t.expirationTime;if(null!==e&&e.memoizedProps===t.pendingProps&&!Pr.current&&r<n){switch(t.tag){case 3:ci(t),ei();break;case 5:Oo(t);break;case 1:jr(t.type)&&Ur(t);break;case 4:Eo(t,t.stateNode.containerInfo);break;case 10:bo(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?fi(e,t,n):null!==(t=di(e,t,n))?t.sibling:null}return di(e,t,n)}switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Mr(t,Er.current);if(xo(t),o=r(e,o),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,jr(r)){var i=!0;Ur(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&Do(t,r,l,e),o.updater=Ao,t.stateNode=o,o._reactInternalFiber=t,zo(t,r,e,n),t=si(null,t,r,!0,i,n)}else t.tag=0,ni(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:throw e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return Br(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=jo(e,i),l=void 0,o){case 0:l=li(null,t,e,i,n);break;case 1:l=ui(null,t,e,i,n);break;case 11:l=ri(null,t,e,i,n);break;case 14:l=oi(null,t,e,jo(e.type,i),r,n);break;default:a("283",e)}return l;case 0:return r=t.type,o=t.pendingProps,li(e,t,r,o=t.elementType===r?o:jo(r,o),n);case 1:return r=t.type,o=t.pendingProps,ui(e,t,r,o=t.elementType===r?o:jo(r,o),n);case 3:return ci(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,so(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(ei(),t=di(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(Go=kr(t.stateNode.containerInfo),Ko=t,o=qo=!0),o?(t.effectTag|=2,t.child=Ho(t,null,r,n)):(ni(e,t,r,n),ei()),t=t.child),t;case 5:return Oo(t),null===e&&Qo(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,mr(r,o)?l=null:null!==i&&mr(r,i)&&(t.effectTag|=16),ai(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=1,t=null):(ni(e,t,l,n),t=t.child),t;case 6:return null===e&&Qo(t),null;case 13:return fi(e,t,n);case 4:return Eo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=$o(t,null,r,n):ni(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ri(e,t,r,o=t.elementType===r?o:jo(r,o),n);case 7:return ni(e,t,t.pendingProps,n),t.child;case 8:case 12:return ni(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,l=t.memoizedProps,bo(t,i=o.value),null!==l){var u=l.value;if(0===(i=u===i&&(0!==u||1/u==1/i)||u!=u&&i!=i?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!Pr.current){t=di(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){if(null!==(u=l.firstContextDependency))do{if(u.context===r&&0!=(u.observedBits&i)){if(1===l.tag){var s=ro(n);s.tag=2,io(l,s)}l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n);for(var c=l.return;null!==c;){if(s=c.alternate,c.childExpirationTime<n)c.childExpirationTime=n,null!==s&&s.childExpirationTime<n&&(s.childExpirationTime=n);else{if(!(null!==s&&s.childExpirationTime<n))break;s.childExpirationTime=n}c=c.return}}s=l.child,u=u.next}while(null!==u);else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}}ni(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,xo(t),r=r(o=ko(o,i.unstable_observedBits)),t.effectTag|=1,ni(e,t,r,n),t.child;case 14:return oi(e,t,o=t.type,i=jo(o.type,t.pendingProps),r,n);case 15:return ii(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:jo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,jr(r)?(e=!0,Ur(t)):e=!1,xo(t),Fo(t,r,o),zo(t,r,o,n),si(null,t,r,!0,e,n);default:a("156")}}function hi(e){e.effectTag|=4}var yi=void 0,vi=void 0,mi=void 0,bi=void 0;function gi(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ut(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function xi(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Yi(e,t)}else t.current=null}function ki(e){switch("function"==typeof zr&&zr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(null!==r){var o=e;try{r()}catch(e){Yi(o,e)}}n=n.next}while(n!==t)}break;case 1:if(xi(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Yi(e,t)}break;case 5:xi(e);break;case 4:Si(e)}}function wi(e){return 5===e.tag||3===e.tag||4===e.tag}function _i(e){e:{for(var t=e.return;null!==t;){if(wi(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||wi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,l=o.stateNode,u=n;8===i.nodeType?i.parentNode.insertBefore(l,u):i.insertBefore(l,u)}else t.insertBefore(o.stateNode,n);else r?(l=t,u=o.stateNode,8===l.nodeType?(i=l.parentNode).insertBefore(u,l):(i=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==i.onclick||(i.onclick=pr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Si(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,l=i;;)if(ki(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===i)break;for(;null===l.sibling;){if(null===l.return||l.return===i)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}o?(i=r,l=t.stateNode,8===i.nodeType?i.parentNode.removeChild(l):i.removeChild(l)):r.removeChild(t.stateNode)}else if(4===t.tag?(r=t.stateNode.containerInfo,o=!0):ki(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Ti(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[D]=r,"input"===e&&"radio"===r.type&&null!=r.name&&kt(n,r),fr(e,o),t=fr(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?ur(n,u):"dangerouslySetInnerHTML"===l?rr(n,u):"children"===l?or(n,u):mt(n,l,u,t)}switch(e){case"input":wt(n,r);break;case"textarea":Xn(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Gn(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Gn(n,!!r.multiple,r.defaultValue,!0):Gn(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(e=t,null===(n=t.memoizedState)?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Sa())),null!==e)e:for(t=n=e;;){if(5===t.tag)e=t.stateNode,r?e.style.display="none":(e=t.stateNode,i=null!=(i=t.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,e.style.display=lr("display",i));else if(6===t.tag)t.stateNode.nodeValue=r?"":t.memoizedProps;else{if(13===t.tag&&null!==t.memoizedState){(e=t.child.sibling).return=t,t=e;continue}if(null!==t.child){t.child.return=t,t=t.child;continue}}if(t===n)break e;for(;null===t.sibling;){if(null===t.return||t.return===n)break e;t=t.return}t.sibling.return=t.return,t=t.sibling}break;case 17:break;default:a("163")}}function Ci(e,t,n){(n=ro(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Da(r),gi(e,t)},n}function Ei(e,t,n){(n=ro(n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Bi?Bi=new Set([this]):Bi.add(this));var n=t.value,o=t.stack;gi(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Pi(e){switch(e.tag){case 1:jr(e.type)&&Nr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return Po(),Rr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Mo(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 4:return Po(),null;case 10:return go(e),null;default:return null}}yi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},vi=function(){},mi=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l=t.stateNode;switch(Co(_o.current),e=null,n){case"input":a=gt(l,a),r=gt(l,r),e=[];break;case"option":a=Kn(l,a),r=Kn(l,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=qn(l,a),r=qn(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=pr)}cr(n,r),l=n=void 0;var u=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var s=a[n];for(l in s)s.hasOwnProperty(l)&&(u||(u={}),u[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(g.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(s=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==s&&(null!=c||null!=s))if("style"===n)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(u||(u={}),u[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(u||(u={}),u[l]=c[l])}else u||(e||(e=[]),e.push(n,u)),u=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(n,""+c)):"children"===n?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(g.hasOwnProperty(n)?(null!=c&&dr(i,n),e||s===c||(e=[])):(e=e||[]).push(n,c))}u&&(e=e||[]).push("style",u),i=e,(t.updateQueue=i)&&hi(t)}},bi=function(e,t,n,r){n!==r&&hi(t)};var Oi={readContext:ko},Mi=$e.ReactCurrentOwner,ji=1073741822,Ni=0,Ri=!1,Di=null,Ai=null,Ui=0,Fi=-1,Ii=!1,zi=null,Li=!1,Vi=null,Wi=null,Bi=null;function $i(){if(null!==Di)for(var e=Di.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Nr();break;case 3:Po(),Rr();break;case 5:Mo(t);break;case 4:Po();break;case 10:go(t)}e=e.return}Ai=null,Ui=0,Fi=-1,Ii=!1,Di=null}function Hi(){null!==Wi&&(i.unstable_cancelCallback(Vi),Wi())}function Ki(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Di=e;e:{var i=t,l=Ui,u=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:jr(t.type)&&Nr();break;case 3:Po(),Rr(),(u=t.stateNode).pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),null!==i&&null!==i.child||(Zo(t),t.effectTag&=-3),vi(t);break;case 5:Mo(t);var s=Co(To.current);if(l=t.type,null!==i&&null!=t.stateNode)mi(i,t,l,u,s),i.ref!==t.ref&&(t.effectTag|=128);else if(u){var c=Co(_o.current);if(Zo(t)){i=(u=t).stateNode;var f=u.type,d=u.memoizedProps,p=s;switch(i[R]=u,i[D]=d,l=void 0,s=f){case"iframe":case"object":Tn("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)Tn(te[f],i);break;case"source":Tn("error",i);break;case"img":case"image":case"link":Tn("error",i),Tn("load",i);break;case"form":Tn("reset",i),Tn("submit",i);break;case"details":Tn("toggle",i);break;case"input":xt(i,d),Tn("invalid",i),dr(p,"onChange");break;case"select":i._wrapperState={wasMultiple:!!d.multiple},Tn("invalid",i),dr(p,"onChange");break;case"textarea":Yn(i,d),Tn("invalid",i),dr(p,"onChange")}for(l in cr(s,d),f=null,d)d.hasOwnProperty(l)&&(c=d[l],"children"===l?"string"==typeof c?i.textContent!==c&&(f=["children",c]):"number"==typeof c&&i.textContent!==""+c&&(f=["children",""+c]):g.hasOwnProperty(l)&&null!=c&&dr(p,l));switch(s){case"input":We(i),_t(i,d,!0);break;case"textarea":We(i),Qn(i);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(i.onclick=pr)}l=f,u.updateQueue=l,(u=null!==l)&&hi(t)}else{d=t,i=l,p=u,f=9===s.nodeType?s:s.ownerDocument,c===Jn.html&&(c=Zn(i)),c===Jn.html?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof p.is?f=f.createElement(i,{is:p.is}):(f=f.createElement(i),"select"===i&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(c,i),(i=f)[R]=d,i[D]=u,yi(i,t,!1,!1),p=i;var h=s,y=fr(f=l,d=u);switch(f){case"iframe":case"object":Tn("load",p),s=d;break;case"video":case"audio":for(s=0;s<te.length;s++)Tn(te[s],p);s=d;break;case"source":Tn("error",p),s=d;break;case"img":case"image":case"link":Tn("error",p),Tn("load",p),s=d;break;case"form":Tn("reset",p),Tn("submit",p),s=d;break;case"details":Tn("toggle",p),s=d;break;case"input":xt(p,d),s=gt(p,d),Tn("invalid",p),dr(h,"onChange");break;case"option":s=Kn(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},s=o({},d,{value:void 0}),Tn("invalid",p),dr(h,"onChange");break;case"textarea":Yn(p,d),s=qn(p,d),Tn("invalid",p),dr(h,"onChange");break;default:s=d}cr(f,s),c=void 0;var v=f,m=p,b=s;for(c in b)if(b.hasOwnProperty(c)){var x=b[c];"style"===c?ur(m,x):"dangerouslySetInnerHTML"===c?null!=(x=x?x.__html:void 0)&&rr(m,x):"children"===c?"string"==typeof x?("textarea"!==v||""!==x)&&or(m,x):"number"==typeof x&&or(m,""+x):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(g.hasOwnProperty(c)?null!=x&&dr(h,c):null!=x&&mt(m,c,x,y))}switch(f){case"input":We(p),_t(p,d,!1);break;case"textarea":We(p),Qn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+bt(d.value));break;case"select":(s=p).multiple=!!d.multiple,null!=(p=d.value)?Gn(s,!!d.multiple,p,!1):null!=d.defaultValue&&Gn(s,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof s.onClick&&(p.onclick=pr)}(u=vr(l,u))&&hi(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?bi(i,t,i.memoizedProps,u):("string"!=typeof u&&(null===t.stateNode&&a("166")),i=Co(To.current),Co(_o.current),Zo(t)?(l=(u=t).stateNode,i=u.memoizedProps,l[R]=u,(u=l.nodeValue!==i)&&hi(t)):(l=t,(u=(9===i.nodeType?i:i.ownerDocument).createTextNode(u))[R]=t,l.stateNode=u));break;case 11:break;case 13:if(u=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=l,Di=t;break e}u=null!==u,l=null!==i&&null!==i.memoizedState,null!==i&&!u&&l&&(null!==(i=i.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=i,i.nextEffect=s):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(u!==l||0==(1&t.effectTag)&&u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Po(),vi(t);break;case 10:go(t);break;case 9:case 14:break;case 17:jr(t.type)&&Nr();break;default:a("156")}Di=null}if(t=e,1===Ui||1!==t.childExpirationTime){for(u=0,l=t.child;null!==l;)(i=l.expirationTime)>u&&(u=i),(s=l.childExpirationTime)>u&&(u=s),l=l.sibling;t.childExpirationTime=u}if(null!==Di)return Di;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Pi(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Gi(e){var t=pi(e.alternate,e,Ui);return e.memoizedProps=e.pendingProps,null===t&&(t=Ki(e)),Mi.current=null,t}function qi(e,t){Ri&&a("243"),Hi(),Ri=!0,Mi.currentDispatcher=Oi;var n=e.nextExpirationTimeToWorkOn;n===Ui&&e===Ai&&null!==Di||($i(),Ui=n,Di=$r((Ai=e).current,null),e.pendingCommitExpirationTime=0);for(var r=!1;;){try{if(t)for(;null!==Di&&!Pa();)Di=Gi(Di);else for(;null!==Di;)Di=Gi(Di)}catch(t){if(mo=vo=yo=null,null===Di)r=!0,Da(t);else{null===Di&&a("271");var o=Di,i=o.return;if(null!==i){e:{var l=e,u=i,s=o,c=t;if(i=Ui,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==c&&"object"==typeof c&&"function"==typeof c.then){var f=c;c=u;var d=-1,p=-1;do{if(13===c.tag){var h=c.alternate;if(null!==h&&null!==(h=h.memoizedState)){p=10*(1073741822-h.timedOutAt);break}"number"==typeof(h=c.pendingProps.maxDuration)&&(0>=h?d=0:(-1===d||h<d)&&(d=h))}c=c.return}while(null!==c);c=u;do{if((h=13===c.tag)&&(h=void 0!==c.memoizedProps.fallback&&null===c.memoizedState),h){if(u=Qi.bind(null,l,c,s,0==(1&c.mode)?1073741823:i),f.then(u,u),0==(1&c.mode)){c.effectTag|=64,s.effectTag&=-1957,1===s.tag&&null===s.alternate&&(s.tag=17),s.expirationTime=i;break e}-1===d?l=1073741823:(-1===p&&(p=10*(1073741822-Jr(l,i))-5e3),l=p+d),0<=l&&Fi<l&&(Fi=l),c.effectTag|=2048,c.expirationTime=i;break e}c=c.return}while(null!==c);c=Error((lt(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ut(s))}Ii=!0,c=po(c,s),l=u;do{switch(l.tag){case 3:s=c,l.effectTag|=2048,l.expirationTime=i,ao(l,i=Ci(l,s,i));break e;case 1:if(s=c,u=l.type,f=l.stateNode,0==(64&l.effectTag)&&("function"==typeof u.getDerivedStateFromError||null!==f&&"function"==typeof f.componentDidCatch&&(null===Bi||!Bi.has(f)))){l.effectTag|=2048,l.expirationTime=i,ao(l,i=Ei(l,s,i));break e}}l=l.return}while(null!==l)}Di=Ki(o);continue}r=!0,Da(t)}}break}if(Ri=!1,mo=vo=yo=Mi.currentDispatcher=null,r)Ai=null,e.finishedWork=null;else if(null!==Di)e.finishedWork=null;else{if(null===(r=e.current.alternate)&&a("281"),Ai=null,Ii){if(o=e.latestPendingTime,i=e.latestSuspendedTime,l=e.latestPingedTime,0!==o&&o<n||0!==i&&i<n||0!==l&&l<n)return Qr(e,n),void _a(e,r,n,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,n=e.nextExpirationTimeToWorkOn=n,t=e.expirationTime=1073741823,void _a(e,r,n,t,-1)}t&&-1!==Fi?(Qr(e,n),(t=10*(1073741822-Jr(e,n)))<Fi&&(Fi=t),t=10*(1073741822-Sa()),t=Fi-t,_a(e,r,n,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=n,e.finishedWork=r)}}function Yi(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Bi||!Bi.has(r)))return io(n,e=Ei(n,e=po(t,e),1073741823)),void Zi(n,1073741823);break;case 3:return io(n,e=Ci(n,e=po(t,e),1073741823)),void Zi(n,1073741823)}n=n.return}3===e.tag&&(io(e,n=Ci(e,n=po(t,e),1073741823)),Zi(e,1073741823))}function Xi(e,t){return 0!==Ni?e=Ni:Ri?e=Li?1073741823:Ui:1&t.mode?(e=pa?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==Ai&&e===Ui&&--e):e=1073741823,pa&&(0===ua||e<ua)&&(ua=e),e}function Qi(e,t,n,r){var o=e.earliestSuspendedTime,i=e.latestSuspendedTime;if(0!==o&&r<=o&&r>=i){i=o=r,e.didError=!1;var a=e.latestPingedTime;(0===a||a>i)&&(e.latestPingedTime=i),Zr(i,e)}else Xr(e,o=Xi(o=Sa(),t));0!=(1&t.mode)&&e===Ai&&Ui===r&&(Ai=null),Ji(t,o),0==(1&t.mode)&&(Ji(n,o),1===n.tag&&null!==n.stateNode&&((t=ro(o)).tag=2,io(n,t))),0!==(n=e.expirationTime)&&Ta(e,n)}function Ji(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Zi(e,t){null!==(e=Ji(e,t))&&(!Ri&&0!==Ui&&t>Ui&&$i(),Xr(e,t),Ri&&!Li&&Ai===e||Ta(e,e.expirationTime),ga>ba&&(ga=0,a("185")))}function ea(e,t,n,r,o){var i=Ni;Ni=1073741823;try{return e(t,n,r,o)}finally{Ni=i}}var ta=null,na=null,ra=0,oa=void 0,ia=!1,aa=null,la=0,ua=0,sa=!1,ca=null,fa=!1,da=!1,pa=!1,ha=null,ya=i.unstable_now(),va=1073741822-(ya/10|0),ma=va,ba=50,ga=0,xa=null;function ka(){va=1073741822-((i.unstable_now()-ya)/10|0)}function wa(e,t){if(0!==ra){if(t<ra)return;null!==oa&&i.unstable_cancelCallback(oa)}ra=t,e=i.unstable_now()-ya,oa=i.unstable_scheduleCallback(Oa,{timeout:10*(1073741822-t)-e})}function _a(e,t,n,r,o){e.expirationTime=r,0!==o||Pa()?0<o&&(e.timeoutHandle=br(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,ka(),ma=va,ja(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Sa(){return ia?ma:(Ca(),0!==la&&1!==la||(ka(),ma=va),ma)}function Ta(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===na?(ta=na=e,e.nextScheduledRoot=e):(na=na.nextScheduledRoot=e).nextScheduledRoot=ta):t>e.expirationTime&&(e.expirationTime=t),ia||(fa?da&&(aa=e,la=1073741823,Na(e,1073741823,!1)):1073741823===t?Ma(1073741823,!1):wa(e,t))}function Ca(){var e=0,t=null;if(null!==na)for(var n=na,r=ta;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===na)&&a("244"),r===r.nextScheduledRoot){ta=na=r.nextScheduledRoot=null;break}if(r===ta)ta=o=r.nextScheduledRoot,na.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===na){(na=n).nextScheduledRoot=ta,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===na)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}aa=t,la=e}var Ea=!1;function Pa(){return!!Ea||!!i.unstable_shouldYield()&&(Ea=!0)}function Oa(){try{if(!Pa()&&null!==ta){ka();var e=ta;do{var t=e.expirationTime;0!==t&&va<=t&&(e.nextExpirationTimeToWorkOn=va),e=e.nextScheduledRoot}while(e!==ta)}Ma(0,!0)}finally{Ea=!1}}function Ma(e,t){if(Ca(),t)for(ka(),ma=va;null!==aa&&0!==la&&e<=la&&!(Ea&&va>la);)Na(aa,la,va>la),Ca(),ka(),ma=va;else for(;null!==aa&&0!==la&&e<=la;)Na(aa,la,!1),Ca();if(t&&(ra=0,oa=null),0!==la&&wa(aa,la),ga=0,xa=null,null!==ha)for(e=ha,ha=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){sa||(sa=!0,ca=e)}}if(sa)throw e=ca,ca=null,sa=!1,e}function ja(e,t){ia&&a("253"),aa=e,la=t,Na(e,t,!1),Ma(1073741823,!1)}function Na(e,t,n){if(ia&&a("245"),ia=!0,n){var r=e.finishedWork;null!==r?Ra(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,gr(r)),qi(e,n),null!==(r=e.finishedWork)&&(Pa()?e.finishedWork=r:Ra(e,r,t)))}else null!==(r=e.finishedWork)?Ra(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,gr(r)),qi(e,n),null!==(r=e.finishedWork)&&Ra(e,r,t));ia=!1}function Ra(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===ha?ha=[r]:ha.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===xa?ga++:(xa=e,ga=0),Li=Ri=!0,e.current===t&&a("177"),0===(n=e.pendingCommitExpirationTime)&&a("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=o>r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(0!==(o=e.latestPendingTime)&&(o>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Xr(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Xr(e,r)):r>o&&Xr(e,r)),Zr(0,e),Mi.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,hr=Sn,Fn(o=Un())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else e:{var l=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(l&&0!==l.rangeCount){i=l.anchorNode;var u=l.anchorOffset,s=l.focusNode;l=l.focusOffset;try{i.nodeType,s.nodeType}catch(e){i=null;break e}var c=0,f=-1,d=-1,p=0,h=0,y=o,v=null;t:for(;;){for(var m;y!==i||0!==u&&3!==y.nodeType||(f=c+u),y!==s||0!==l&&3!==y.nodeType||(d=c+l),3===y.nodeType&&(c+=y.nodeValue.length),null!==(m=y.firstChild);)v=y,y=m;for(;;){if(y===o)break t;if(v===i&&++p===u&&(f=c),v===s&&++h===l&&(d=c),null!==(m=y.nextSibling))break;v=(y=v).parentNode}y=m}i=-1===f||-1===d?null:{start:f,end:d}}else i=null}i=i||{start:0,end:0}}else i=null;for(yr={focusedElem:o,selectionRange:i},Sn=!1,zi=r;null!==zi;){o=!1,i=void 0;try{for(;null!==zi;){if(256&zi.effectTag)e:{var b=zi.alternate;switch((u=zi).tag){case 0:case 11:case 15:break e;case 1:if(256&u.effectTag&&null!==b){var g=b.memoizedProps,x=b.memoizedState,k=u.stateNode,w=k.getSnapshotBeforeUpdate(u.elementType===u.type?g:jo(u.type,g),x);k.__reactInternalSnapshotBeforeUpdate=w}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}zi=zi.nextEffect}}catch(e){o=!0,i=e}o&&(null===zi&&a("178"),Yi(zi,i),null!==zi&&(zi=zi.nextEffect))}for(zi=r;null!==zi;){b=!1,g=void 0;try{for(;null!==zi;){var _=zi.effectTag;if(16&_&&or(zi.stateNode,""),128&_){var S=zi.alternate;if(null!==S){var T=S.ref;null!==T&&("function"==typeof T?T(null):T.current=null)}}switch(14&_){case 2:_i(zi),zi.effectTag&=-3;break;case 6:_i(zi),zi.effectTag&=-3,Ti(zi.alternate,zi);break;case 4:Ti(zi.alternate,zi);break;case 8:Si(x=zi),x.return=null,x.child=null,x.alternate&&(x.alternate.child=null,x.alternate.return=null)}zi=zi.nextEffect}}catch(e){b=!0,g=e}b&&(null===zi&&a("178"),Yi(zi,g),null!==zi&&(zi=zi.nextEffect))}if(T=yr,S=Un(),_=T.focusedElem,g=T.selectionRange,S!==_&&_&&_.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(_.ownerDocument.documentElement,_)){null!==g&&Fn(_)&&(S=g.start,void 0===(T=g.end)&&(T=S),"selectionStart"in _?(_.selectionStart=S,_.selectionEnd=Math.min(T,_.value.length)):(T=(S=_.ownerDocument||document)&&S.defaultView||window).getSelection&&(T=T.getSelection(),x=_.textContent.length,b=Math.min(g.start,x),g=void 0===g.end?b:Math.min(g.end,x),!T.extend&&b>g&&(x=g,g=b,b=x),x=An(_,b),k=An(_,g),x&&k&&(1!==T.rangeCount||T.anchorNode!==x.node||T.anchorOffset!==x.offset||T.focusNode!==k.node||T.focusOffset!==k.offset)&&((S=S.createRange()).setStart(x.node,x.offset),T.removeAllRanges(),b>g?(T.addRange(S),T.extend(k.node,k.offset)):(S.setEnd(k.node,k.offset),T.addRange(S))))),S=[];for(T=_;T=T.parentNode;)1===T.nodeType&&S.push({element:T,left:T.scrollLeft,top:T.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<S.length;_++)(T=S[_]).element.scrollLeft=T.left,T.element.scrollTop=T.top}for(yr=null,Sn=!!hr,hr=null,e.current=t,zi=r;null!==zi;){r=!1,_=void 0;try{for(S=n;null!==zi;){var C=zi.effectTag;if(36&C){var E=zi.alternate;switch(b=S,(T=zi).tag){case 0:case 11:case 15:break;case 1:var P=T.stateNode;if(4&T.effectTag)if(null===E)P.componentDidMount();else{var O=T.elementType===T.type?E.memoizedProps:jo(T.type,E.memoizedProps);P.componentDidUpdate(O,E.memoizedState,P.__reactInternalSnapshotBeforeUpdate)}var M=T.updateQueue;null!==M&&co(0,M,P);break;case 3:var j=T.updateQueue;if(null!==j){if(g=null,null!==T.child)switch(T.child.tag){case 5:g=T.child.stateNode;break;case 1:g=T.child.stateNode}co(0,j,g)}break;case 5:var N=T.stateNode;null===E&&4&T.effectTag&&vr(T.type,T.memoizedProps)&&N.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}if(128&C){var R=zi.ref;if(null!==R){var D=zi.stateNode;switch(zi.tag){case 5:var A=D;break;default:A=D}"function"==typeof R?R(A):R.current=A}}zi=zi.nextEffect}}catch(e){r=!0,_=e}r&&(null===zi&&a("178"),Yi(zi,_),null!==zi&&(zi=zi.nextEffect))}Ri=Li=!1,"function"==typeof Ir&&Ir(t.stateNode),C=t.expirationTime,0===(t=(t=t.childExpirationTime)>C?t:C)&&(Bi=null),e.expirationTime=t,e.finishedWork=null}function Da(e){null===aa&&a("246"),aa.expirationTime=0,sa||(sa=!0,ca=e)}function Aa(e,t){var n=fa;fa=!0;try{return e(t)}finally{(fa=n)||ia||Ma(1073741823,!1)}}function Ua(e,t){if(fa&&!da){da=!0;try{return e(t)}finally{da=!1}}return e(t)}function Fa(e,t,n){if(pa)return e(t,n);fa||ia||0===ua||(Ma(ua,!1),ua=0);var r=pa,o=fa;fa=pa=!0;try{return e(t,n)}finally{pa=r,(fa=o)||ia||Ma(1073741823,!1)}}function Ia(e,t,n,r,o){var i=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(jr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);a("171"),l=void 0}if(1===n.tag){var u=n.type;if(jr(u)){n=Ar(n,u,l);break e}}n=l}else n=Cr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=ro(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Hi(),io(i,o),Zi(i,r),r}function za(e,t,n,r){var o=t.current;return Ia(e,t,n,o=Xi(Sa(),o),r)}function La(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Va(e){var t=1073741822-25*(1+((1073741822-Sa()+500)/25|0));t>=ji&&(t=ji-1),this._expirationTime=ji=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Wa(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Ba(e,t,n){e={current:t=Wr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function $a(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ha(e,t,n,r,o){$a(n)||a("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var l=o;o=function(){var e=La(i._internalRoot);l.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ba(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=La(i._internalRoot);u.call(e)}}Ua(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return La(i._internalRoot)}function Ka(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return $a(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:qe,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ce=function(e,t,n){switch(t){case"input":if(wt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=I(r);o||a("90"),Be(r),wt(r,o)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&Gn(e,!!n.multiple,t,!1)}},Va.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Wa;return Ia(e,t,null,n,r._onCommit),r},Va.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Va.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,ja(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Va.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Wa.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Wa.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Ba.prototype.render=function(e,t){var n=this._internalRoot,r=new Wa;return null!==(t=void 0===t?null:t)&&r.then(t),za(e,n,null,r._onCommit),r},Ba.prototype.unmount=function(e){var t=this._internalRoot,n=new Wa;return null!==(e=void 0===e?null:e)&&n.then(e),za(null,t,null,n._onCommit),n},Ba.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Wa;return null!==(n=void 0===n?null:n)&&o.then(n),za(t,r,e,o._onCommit),o},Ba.prototype.createBatch=function(){var e=new Va(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ne=Aa,Re=Fa,De=function(){ia||0===ua||(Ma(ua,!1),ua=0)};var Ga={createPortal:Ka,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Ha(null,e,t,!0,n)},render:function(e,t,n){return Ha(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&a("38"),Ha(e,t,n,!1,r)},unmountComponentAtNode:function(e){return $a(e)||a("40"),!!e._reactRootContainer&&(Ua(function(){Ha(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ka.apply(void 0,arguments)},unstable_batchedUpdates:Aa,unstable_interactiveUpdates:Fa,flushSync:function(e,t){ia&&a("187");var n=fa;fa=!0;try{return ea(e,t)}finally{fa=n,Ma(1073741823,!1)}},unstable_flushControlled:function(e){var t=fa;fa=!0;try{ea(e)}finally{(fa=t)||ia||Ma(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[U,F,I,O.injectEventPluginsByName,b,$,function(e){C(e,B)},Me,je,Pn,j]},unstable_createRoot:function(e,t){return $a(e)||a("299","unstable_createRoot"),new Ba(e,!0,null!=t&&!0===t.hydrate)}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ir=Lr(function(e){return t.onCommitFiberRoot(n,e)}),zr=Lr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:A,bundleType:0,version:"16.6.3",rendererPackageName:"react-dom"});var qa={default:Ga},Ya=qa&&Ga||qa;e.exports=Ya.default||Ya},function(e,t,n){"use strict";e.exports=n(55)},function(e,t,n){"use strict";(function(e){
/** @license React v0.11.3
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,a=-1,l=!1,u=!1;function s(){if(!l){var e=n.expirationTime;u?_():u=!0,w(d,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,l=a;o=e,a=t;try{var u=r()}finally{o=i,a=l}if("function"==typeof u)if(u={callback:u,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=u.next=u.previous=u;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=u,s()),(t=r.previous).next=r.previous=u,u.next=r,u.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){l=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?s():u=!1}}}function d(e){l=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{c()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{c()}while(null!==n&&!S())}finally{l=!1,r=o,null!==n?s():u=!1,f()}}var p,h,y=Date,v="function"==typeof setTimeout?setTimeout:void 0,m="function"==typeof clearTimeout?clearTimeout:void 0,b="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,g="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function x(e){p=b(function(t){m(h),e(t)}),h=v(function(){g(p),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var k=performance;t.unstable_now=function(){return k.now()}}else t.unstable_now=function(){return y.now()};var w,_,S,T=null;if("undefined"!=typeof window?T=window:void 0!==e&&(T=e),T&&T._schedMock){var C=T._schedMock;w=C[0],_=C[1],S=C[2],t.unstable_now=C[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var E=null,P=function(e){if(null!==E)try{E(e)}finally{E=null}};w=function(e){null!==E?setTimeout(w,0,e):(E=e,setTimeout(P,0,!1))},_=function(){E=null},S=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof b&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var O=null,M=!1,j=-1,N=!1,R=!1,D=0,A=33,U=33;S=function(){return D<=t.unstable_now()};var F=new MessageChannel,I=F.port2;F.port1.onmessage=function(){M=!1;var e=O,n=j;O=null,j=-1;var r=t.unstable_now(),o=!1;if(0>=D-r){if(!(-1!==n&&n<=r))return N||(N=!0,x(z)),O=e,void(j=n);o=!0}if(null!==e){R=!0;try{e(o)}finally{R=!1}}};var z=function(e){if(null!==O){x(z);var t=e-D+U;t<U&&A<U?(8>t&&(t=8),U=t<A?A:t):A=t,D=e+U,M||(M=!0,I.postMessage(void 0))}else N=!1};w=function(e,t){O=e,j=t,R||0>t?I.postMessage(void 0):N||(N=!0,x(z))},_=function(){O=null,M=!1,j=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,a=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(o){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,s();else{a=null;var l=n;do{if(l.expirationTime>r){a=l;break}l=l.next}while(l!==n);null===a?a=n:a===n&&(n=e,s()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,a=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||S())}}).call(this,n(18))},function(e,t,n){"use strict";var r=n(57);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(59);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(25)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(24)(!1)).push([e.i,".Header header {\n  display: flex;\n  flex-direction: row;\n  align-items: center; }\n  .Header header h6 {\n    margin: 10px 20px; }\n",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(6)),a=r(n(4)),l=r(n(0)),u=(r(n(2)),r(n(7))),s=r(n(9)),c=n(31),f=r(n(32)),d=function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText}}};function p(e){var t,n=e.children,r=e.classes,s=e.className,d=e.color,p=e.position,h=(0,a.default)(e,["children","classes","className","color","position"]),y=(0,u.default)(r.root,r["position".concat((0,c.capitalize)(p))],(t={},(0,i.default)(t,r["color".concat((0,c.capitalize)(d))],"inherit"!==d),(0,i.default)(t,"mui-fixed","fixed"===p),t),s);return l.default.createElement(f.default,(0,o.default)({square:!0,component:"header",elevation:4,className:y},h),n)}t.styles=d,p.propTypes={},p.defaultProps={color:"primary",position:"fixed"};var h=(0,s.default)(d,{name:"MuiAppBar"})(p);t.default=h},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){"use strict";var r=n(65),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={};a[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var l=Object.defineProperty,u=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,c=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var p=f(n);p&&p!==d&&e(t,p,r)}var h=u(n);s&&(h=h.concat(s(n)));for(var y=a[t.$$typeof]||o,v=a[n.$$typeof]||o,m=0;m<h.length;++m){var b=h[m];if(!(i[b]||r&&r[b]||v&&v[b]||y&&y[b])){var g=c(n,b);try{l(t,b,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";e.exports=n(66)},function(e,t,n){"use strict";
/** @license React v16.6.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function m(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case u:case l:return e;default:switch(e=e&&e.$$typeof){case c:case p:case s:return e;default:return t}}case i:return t}}}function b(e){return m(e)===d}t.typeOf=m,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Profiler=u,t.Portal=i,t.StrictMode=l,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===l||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===y||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p)},t.isAsyncMode=function(e){return b(e)||m(e)===f},t.isConcurrentMode=b,t.isContextConsumer=function(e){return m(e)===c},t.isContextProvider=function(e){return m(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return m(e)===p},t.isFragment=function(e){return m(e)===a},t.isProfiler=function(e){return m(e)===u},t.isPortal=function(e){return m(e)===i},t.isStrictMode=function(e){return m(e)===l}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t){var n=null;for(var o in t){var i=t[o],a=void 0===i?"undefined":r(i);if("function"===a)n||(n={}),n[o]=i;else if("object"===a&&null!==i&&!Array.isArray(i)){var l=e(i);l&&(n||(n={}),n[o]=l)}}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(8),a=(r=i)&&r.__esModule?r:{default:r};var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sheets=[],this.refs=[],this.keys=[]}return o(e,[{key:"get",value:function(e){var t=this.keys.indexOf(e);return this.sheets[t]}},{key:"add",value:function(e,t){var n=this.sheets,r=this.refs,o=this.keys,i=n.indexOf(t);return-1!==i?i:(n.push(t),r.push(0),o.push(e),n.length-1)}},{key:"manage",value:function(e){var t=this.keys.indexOf(e),n=this.sheets[t];return 0===this.refs[t]&&n.attach(),this.refs[t]++,this.keys[t]||this.keys.splice(t,0,e),n}},{key:"unmanage",value:function(e){var t=this.keys.indexOf(e);-1!==t?this.refs[t]>0&&(this.refs[t]--,0===this.refs[t]&&this.sheets[t].detach()):(0,a.default)(!1,"SheetsManager: can't find sheet to unmanage")}},{key:"size",get:function(){return this.keys.length}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t){if(null==t)return t;var n=void 0===t?"undefined":r(t);if("string"===n||"number"===n||"function"===n)return t;if(l(t))return t.map(e);if((0,a.default)(t))return t;var o={};for(var i in t){var u=t[i];"object"!==(void 0===u?"undefined":r(u))?o[i]=u:o[i]=e(u)}return o};var o,i=n(40),a=(o=i)&&o.__esModule?o:{default:o};var l=Array.isArray},function(e,t,n){"use strict";n.r(t),function(e,r){var o,i=n(50);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.default=a}.call(this,n(18),n(71)(e))},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});e.CSS;t.default=function(e){return e}}).call(this,n(18))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n="2f1acc6c3a606b082e5eef5e54414ffb";null==e[n]&&(e[n]=0),t.default=e[n]++}).call(this,n(18))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=b(n(22)),l=b(n(43)),u=b(n(75)),s=b(n(76)),c=b(n(82)),f=b(n(83)),d=b(n(29)),p=b(n(10)),h=b(n(42)),y=b(n(21)),v=b(n(84)),m=b(n(85));function b(e){return e&&e.__esModule?e:{default:e}}var g=s.default.concat([c.default,f.default]),x=0,k=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=x++,this.version="9.8.7",this.plugins=new u.default,this.options={createGenerateClassName:h.default,Renderer:a.default?v.default:m.default,plugins:[]},this.generateClassName=(0,h.default)(),this.use.apply(this,g),this.setup(t)}return i(e,[{key:"setup",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.createGenerateClassName&&(this.options.createGenerateClassName=e.createGenerateClassName,this.generateClassName=e.createGenerateClassName()),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),(e.virtual||e.Renderer)&&(this.options.Renderer=e.Renderer||(e.virtual?m.default:v.default)),e.plugins&&this.use.apply(this,e.plugins),this}},{key:"createStyleSheet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.index;"number"!=typeof n&&(n=0===d.default.index?0:d.default.index+1);var r=new l.default(e,o({},t,{jss:this,generateClassName:t.generateClassName||this.generateClassName,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r}},{key:"removeStyleSheet",value:function(e){return e.detach(),d.default.remove(e),this}},{key:"createRule",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"===(void 0===e?"undefined":r(e))&&(n=t,t=e,e=void 0);var o=n;o.jss=this,o.Renderer=this.options.Renderer,o.generateClassName||(o.generateClassName=this.generateClassName),o.classes||(o.classes={});var i=(0,y.default)(e,t,o);return!o.selector&&i instanceof p.default&&(i.selector="."+o.generateClassName(i)),this.plugins.onProcessRule(i),i}},{key:"use",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach(function(t){-1===e.options.plugins.indexOf(t)&&(e.options.plugins.push(t),e.plugins.use(t))}),this}}]),e}();t.default=k},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(8),a=(r=i)&&r.__esModule?r:{default:r};var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.hooks={onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}}return o(e,[{key:"onCreateRule",value:function(e,t,n){for(var r=0;r<this.hooks.onCreateRule.length;r++){var o=this.hooks.onCreateRule[r](e,t,n);if(o)return o}return null}},{key:"onProcessRule",value:function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.hooks.onProcessRule.length;n++)this.hooks.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}}},{key:"onProcessStyle",value:function(e,t,n){for(var r=e,o=0;o<this.hooks.onProcessStyle.length;o++)r=this.hooks.onProcessStyle[o](r,t,n),t.style=r}},{key:"onProcessSheet",value:function(e){for(var t=0;t<this.hooks.onProcessSheet.length;t++)this.hooks.onProcessSheet[t](e)}},{key:"onUpdate",value:function(e,t,n){for(var r=0;r<this.hooks.onUpdate.length;r++)this.hooks.onUpdate[r](e,t,n)}},{key:"onChangeValue",value:function(e,t,n){for(var r=e,o=0;o<this.hooks.onChangeValue.length;o++)r=this.hooks.onChangeValue[o](r,t,n);return r}},{key:"use",value:function(e){for(var t in e)this.hooks[t]?this.hooks[t].push(e[t]):(0,a.default)(!1,'[JSS] Unknown hook "%s".',t)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(77)),o=u(n(78)),i=u(n(79)),a=u(n(80)),l=u(n(81));function u(e){return e&&e.__esModule?e:{default:e}}var s={"@charset":r.default,"@import":r.default,"@namespace":r.default,"@keyframes":o.default,"@media":i.default,"@supports":i.default,"@font-face":a.default,"@viewport":l.default,"@-ms-viewport":l.default},c=Object.keys(s).map(function(e){var t=new RegExp("^"+e),n=s[e];return{onCreateRule:function(e,r,o){return t.test(e)?new n(e,r,o):null}}});t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="simple",this.isProcessed=!1,this.key=t,this.value=n,this.options=r}return r(e,[{key:"toString",value:function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(16),l=(r=a)&&r.__esModule?r:{default:r};var u=function(){function e(t,n,r){for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="keyframes",this.isProcessed=!1,this.key=t,this.options=r,this.rules=new l.default(o({},r,{parent:this})),n)this.rules.add(i,n[i],o({},this.options,{parent:this,selector:i}));this.rules.process()}return i(e,[{key:"toString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{indent:1},t=this.rules.toString(e);return t&&(t+="\n"),this.key+" {\n"+t+"}"}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(16),l=(r=a)&&r.__esModule?r:{default:r};var u=function(){function e(t,n,r){for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="conditional",this.isProcessed=!1,this.key=t,this.options=r,this.rules=new l.default(o({},r,{parent:this})),n)this.rules.add(i,n[i]);this.rules.process()}return i(e,[{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"addRule",value:function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r}},{key:"toString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{indent:1},t=this.rules.toString(e);return t?this.key+" {\n"+t+"\n}":""}}]),e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(28),a=(r=i)&&r.__esModule?r:{default:r};var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="font-face",this.isProcessed=!1,this.key=t,this.style=n,this.options=r}return o(e,[{key:"toString",value:function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=(0,a.default)(this.key,this.style[n]),this.style[n+1]&&(t+="\n");return t}return(0,a.default)(this.key,this.style,e)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(28),a=(r=i)&&r.__esModule?r:{default:r};var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="viewport",this.isProcessed=!1,this.key=t,this.style=n,this.options=r}return o(e,[{key:"toString",value:function(e){return(0,a.default)(this.key,this.style,e)}}]),e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(10)),o=a(n(21)),i=a(n(40));function a(e){return e&&e.__esModule?e:{default:e}}t.default={onCreateRule:function(e,t,n){if(!(0,i.default)(t))return null;var r=t,a=(0,o.default)(e,{},n);return r.subscribe(function(e){for(var t in e)a.prop(t,e[t])}),a},onProcessRule:function(e){if(e instanceof r.default){var t=e,n=t.style,o=function(e){var r=n[e];if(!(0,i.default)(r))return"continue";delete n[e],r.subscribe({next:function(n){t.prop(e,n)}})};for(var a in n)o(a)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(16)),o=a(n(10)),i=a(n(21));function a(e){return e&&e.__esModule?e:{default:e}}var l=Date.now(),u="fnValues"+l,s="fnStyle"+ ++l;t.default={onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=(0,i.default)(e,{},n);return r[s]=t,r},onProcessStyle:function(e,t){var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return(t=t)[u]=n,e},onUpdate:function(e,t){if(t.rules instanceof r.default)t.rules.update(e);else if(t instanceof o.default){if((t=t)[u])for(var n in t[u])t.prop(n,t[u][n](e));var i=(t=t)[s];if(i){var a=i(e);for(var l in a)t.prop(l,a[l])}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(8)),i=u(n(29)),a=u(n(10)),l=u(n(20));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){var t=void 0;return function(){return t||(t=e()),t}};function c(e,t){try{return e.style.getPropertyValue(t)}catch(e){return""}}function f(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=(0,l.default)(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.style.setProperty(t,r)}catch(e){return!1}return!0}function d(e,t){try{e.style.removeProperty(t)}catch(e){(0,o.default)(!1,'[JSS] DOMException "%s" was thrown. Tried to remove property "%s".',e.message,t)}}var p,h=1,y=7,v=(p=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return e.substr(t,e.indexOf("{")-1)},function(e){if(e.type===h)return e.selectorText;if(e.type===y){var t=e.name;if(t)return"@keyframes "+t;var n=e.cssText;return"@"+p(n,n.indexOf("keyframes"))}return p(e.cssText)});function m(e,t){return e.selectorText=t,e.selectorText===t}var b,g,x=s(function(){return document.head||document.getElementsByTagName("head")[0]}),k=(b=void 0,g=!1,function(e){var t={};b||(b=document.createElement("style"));for(var n=0;n<e.length;n++){var r=e[n];if(r instanceof a.default){var o=r.selector;if(o&&-1!==o.indexOf("\\")){g||(x().appendChild(b),g=!0),b.textContent=o+" {}";var i=b.sheet;if(i){var l=i.cssRules;l&&(t[l[0].selectorText]=r.key)}}}}return g&&(x().removeChild(b),g=!1),t});function w(e){var t=i.default.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n)return n.renderer.element;if(n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))return n.renderer.element.nextElementSibling}var r=e.insertionPoint;if(r&&"string"==typeof r){var a=function(e){for(var t=x(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(a)return a.nextSibling;(0,o.default)("jss"===r,'[JSS] Insertion point "%s" not found.',r)}return null}var _=s(function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null}),S=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.getPropertyValue=c,this.setProperty=f,this.removeProperty=d,this.setSelector=m,this.getKey=v,this.getUnescapedKeysMap=k,this.hasInsertedRules=!1,t&&i.default.add(t),this.sheet=t;var n=this.sheet?this.sheet.options:{},r=n.media,o=n.meta,a=n.element;this.element=a||document.createElement("style"),this.element.setAttribute("data-jss",""),r&&this.element.setAttribute("media",r),o&&this.element.setAttribute("data-meta",o);var l=_();l&&this.element.setAttribute("nonce",l)}return r(e,[{key:"attach",value:function(){!this.element.parentNode&&this.sheet&&(this.hasInsertedRules&&(this.deploy(),this.hasInsertedRules=!1),function(e,t){var n=t.insertionPoint,r=w(t);if(r){var i=r.parentNode;i&&i.insertBefore(e,r)}else if(n&&"number"==typeof n.nodeType){var a=n,l=a.parentNode;l?l.insertBefore(e,a.nextSibling):(0,o.default)(!1,"[JSS] Insertion point is not in the DOM.")}else x().insertBefore(e,r)}(this.element,this.sheet.options))}},{key:"detach",value:function(){this.element.parentNode.removeChild(this.element)}},{key:"deploy",value:function(){this.sheet&&(this.element.textContent="\n"+this.sheet.toString()+"\n")}},{key:"insertRule",value:function(e,t){var n=this.element.sheet,r=n.cssRules,i=e.toString();if(t||(t=r.length),!i)return!1;try{n.insertRule(i,t)}catch(t){return(0,o.default)(!1,"[JSS] Can not insert an unsupported rule \n\r%s",e),!1}return this.hasInsertedRules=!0,r[t]}},{key:"deleteRule",value:function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)}},{key:"indexOf",value:function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1}},{key:"replaceRule",value:function(e,t){var n=this.indexOf(e),r=this.insertRule(t,n);return this.element.sheet.deleteRule(n),r}},{key:"getRules",value:function(){return this.element.sheet.cssRules}}]),e}();t.default=S},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"setProperty",value:function(){return!0}},{key:"getPropertyValue",value:function(){return""}},{key:"removeProperty",value:function(){}},{key:"setSelector",value:function(){return!0}},{key:"getKey",value:function(){return""}},{key:"attach",value:function(){}},{key:"detach",value:function(){}},{key:"deploy",value:function(){}},{key:"insertRule",value:function(){return!1}},{key:"deleteRule",value:function(){return!0}},{key:"replaceRule",value:function(){return!1}},{key:"getRules",value:function(){}},{key:"indexOf",value:function(){return-1}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={jss:"64a55d578f856d258dc345b094a2a2b3",sheetsRegistry:"d4bd0baacbc52bbd48bbb9eb24344ecd",sheetOptions:"6fc570d6bd61383819d0f9e7407c452d"};t.default=r},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(88)),i=r(n(89)),a=r(n(90)),l=r(n(92)),u=r(n(94)),s=r(n(99));var c=function(){return{plugins:[(0,o.default)(),(0,i.default)(),(0,a.default)(),(0,l.default)(),"undefined"==typeof window?null:(0,u.default)(),(0,s.default)()]}};t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(){return{onCreateRule:function(e,t,n){if(e===l)return new s(e,t,n);if("@"===e[0]&&e.substr(0,u.length)===u)return new c(e,t,n);var r=n.parent;r&&("global"!==r.type&&"global"!==r.options.parent.type||(n.global=!0));n.global&&(n.selector=e);return null},onProcessRule:function(e){if("style"!==e.type)return;(function(e){var t=e.options,n=e.style,o=n[l];if(!o)return;for(var i in o)t.sheet.addRule(i,o[i],r({},t,{selector:d(i,e.selector)}));delete n[l]})(e),function(e){var t=e.options,n=e.style;for(var o in n)if(o.substr(0,l.length)===l){var i=d(o.substr(l.length),e.selector);t.sheet.addRule(i,n[o],r({},t,{selector:i})),delete n[o]}}(e)}}};var i=n(38);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var l="@global",u="@global ",s=function(){function e(t,n,o){for(var l in a(this,e),this.type="global",this.key=t,this.options=o,this.rules=new i.RuleList(r({},o,{parent:this})),n)this.rules.add(l,n[l],{selector:l});this.rules.process()}return o(e,[{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"addRule",value:function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"toString",value:function(){return this.rules.toString()}}]),e}(),c=function(){function e(t,n,o){a(this,e),this.name=t,this.options=o;var i=t.substr(u.length);this.rule=o.jss.createRule(i,n,r({},o,{parent:this,selector:i}))}return o(e,[{key:"toString",value:function(e){return this.rule.toString(e)}}]),e}(),f=/\s*,\s*/g;function d(e,t){for(var n=e.split(f),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(){function e(e){return function(t,n){var r=e.getRule(n);return r?r.selector:((0,a.default)(!1,"[JSS] Could not find the referenced rule %s in %s.",n,e.options.meta||e),n)}}var t=function(e){return-1!==e.indexOf("&")};function n(e,n){for(var r=n.split(l),o=e.split(l),i="",a=0;a<r.length;a++)for(var s=r[a],c=0;c<o.length;c++){var f=o[c];i&&(i+=", "),i+=t(f)?f.replace(u,s):s+" "+f}return i}function o(e,t,n){if(n)return r({},n,{index:n.index+1});var o=e.options.nestingLevel;return o=void 0===o?1:o+1,r({},e.options,{nestingLevel:o,index:t.indexOf(e)+1})}return{onProcessStyle:function(i,a){if("style"!==a.type)return i;var l=a.options.parent,u=void 0,c=void 0;for(var f in i){var d=t(f),p="@"===f[0];if(d||p){if(u=o(a,l,u),d){var h=n(f,a.selector);c||(c=e(l)),h=h.replace(s,c),l.addRule(h,i[f],r({},u,{selector:h}))}else p&&l.addRule(f,null,u).addRule(a.key,i[f],{selector:a.selector});delete i[f]}}return i}}};var o,i=n(8),a=(o=i)&&o.__esModule?o:{default:o};var l=/\s*,\s*/g,u=/&/g,s=/\$([\w-]+)/g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=a(e[t]);return e}return a(e)},onChangeValue:function(e,t,n){var r=(0,i.default)(t);return t===r?e:(n.prop(r,e),null)}}};var r,o=n(91),i=(r=o)&&r.__esModule?r:{default:r};function a(e){var t={};for(var n in e)t[(0,i.default)(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(a):t.fallbacks=a(e.fallbacks)),t}},function(e,t,n){"use strict";var r=/[A-Z]/g,o=/^ms-/,i={};e.exports=function(e){return e in i?i[e]:i[e]=e.replace(r,"-$&").toLowerCase().replace(o,"-ms-")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(){var e=a(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{});return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r in t)t[r]=u(r,t[r],e);return t},onChangeValue:function(t,n){return u(n,t,e)}}};var o,i=n(93);function a(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var l=a(((o=i)&&o.__esModule?o:{default:o}).default);function u(e,t,n){if(!t)return t;var o=t,i=void 0===t?"undefined":r(t);switch("object"===i&&Array.isArray(t)&&(i="array"),i){case"object":if("fallbacks"===e){for(var a in t)t[a]=u(a,t[a],n);break}for(var s in t)t[s]=u(e+"-"+s,t[s],n);break;case"array":for(var c=0;c<t.length;c++)t[c]=u(e,t[c],n);break;case"number":0!==t&&(o=t+(n[e]||l[e]||""))}return o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={"animation-delay":"ms","animation-duration":"ms","background-position":"px","background-position-x":"px","background-position-y":"px","background-size":"px",border:"px","border-bottom":"px","border-bottom-left-radius":"px","border-bottom-right-radius":"px","border-bottom-width":"px","border-left":"px","border-left-width":"px","border-radius":"px","border-right":"px","border-right-width":"px","border-spacing":"px","border-top":"px","border-top-left-radius":"px","border-top-right-radius":"px","border-top-width":"px","border-width":"px","border-after-width":"px","border-before-width":"px","border-end-width":"px","border-horizontal-spacing":"px","border-start-width":"px","border-vertical-spacing":"px",bottom:"px","box-shadow":"px","column-gap":"px","column-rule":"px","column-rule-width":"px","column-width":"px","flex-basis":"px","font-size":"px","font-size-delta":"px",height:"px",left:"px","letter-spacing":"px","logical-height":"px","logical-width":"px",margin:"px","margin-after":"px","margin-before":"px","margin-bottom":"px","margin-left":"px","margin-right":"px","margin-top":"px","max-height":"px","max-width":"px","margin-end":"px","margin-start":"px","mask-position-x":"px","mask-position-y":"px","mask-size":"px","max-logical-height":"px","max-logical-width":"px","min-height":"px","min-width":"px","min-logical-height":"px","min-logical-width":"px",motion:"px","motion-offset":"px",outline:"px","outline-offset":"px","outline-width":"px",padding:"px","padding-bottom":"px","padding-left":"px","padding-right":"px","padding-top":"px","padding-after":"px","padding-before":"px","padding-end":"px","padding-start":"px","perspective-origin-x":"%","perspective-origin-y":"%",perspective:"px",right:"px","shape-margin":"px",size:"px","text-indent":"px","text-stroke":"px","text-stroke-width":"px",top:"px","transform-origin":"%","transform-origin-x":"%","transform-origin-y":"%","transform-origin-z":"%","transition-delay":"ms","transition-duration":"ms","vertical-align":"px",width:"px","word-spacing":"px","box-shadow-x":"px","box-shadow-y":"px","box-shadow-blur":"px","box-shadow-spread":"px","font-line-height":"px","text-shadow-x":"px","text-shadow-y":"px","text-shadow-blur":"px"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{onProcessRule:function(e){"keyframes"===e.type&&(e.key="@"+r.prefix.css+e.key.substr(1))},onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n in e){var o=e[n],i=!1,a=r.supportedProperty(n);a&&a!==n&&(i=!0);var l=!1,u=r.supportedValue(a,o);u&&u!==o&&(l=!0),(i||l)&&(i&&delete e[n],e[a||n]=u||o)}return e},onChangeValue:function(e,t){return r.supportedValue(t,e)}}};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(95))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.supportedValue=t.supportedProperty=t.prefix=void 0;var r=a(n(30)),o=a(n(96)),i=a(n(98));function a(e){return e&&e.__esModule?e:{default:e}}t.default={prefix:r.default,supportedProperty:o.default,supportedValue:i.default},
/**
    * CSS Vendor prefix detection and property feature testing.
    *
    * @copyright Oleg Slobodskoi 2015
    * @website https://github.com/jsstyles/css-vendor
    * @license MIT
    */
t.prefix=r.default,t.supportedProperty=o.default,t.supportedValue=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!l)return e;if(null!=u[e])return u[e];(0,i.default)(e)in l.style?u[e]=e:o.default.js+(0,i.default)("-"+e)in l.style?u[e]=o.default.css+e:u[e]=!1;return u[e]};var r=a(n(22)),o=a(n(30)),i=a(n(97));function a(e){return e&&e.__esModule?e:{default:e}}var l=void 0,u={};if(r.default){l=document.createElement("p");var s=window.getComputedStyle(document.documentElement,"");for(var c in s)isNaN(c)||(u[s[c]]=s[c])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(r,o)};var r=/[-\s]+(.)?/g;function o(e,t){return t?t.toUpperCase():""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!l)return t;if("string"!=typeof t||!isNaN(parseInt(t,10)))return t;var n=e+t;if(null!=a[n])return a[n];try{l.style[e]=t}catch(e){return a[n]=!1,!1}""!==l.style[e]?a[n]=t:("-ms-flex"===(t=o.default.css+t)&&(t="-ms-flexbox"),l.style[e]=t,""!==l.style[e]&&(a[n]=t));a[n]||(a[n]=!1);return l.style[e]="",a[n]};var r=i(n(22)),o=i(n(30));function i(e){return e&&e.__esModule?e:{default:e}}var a={},l=void 0;r.default&&(l=document.createElement("p"))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){function e(e,t){return e.length-t.length}return{onProcessStyle:function(t,n){if("style"!==n.type)return t;var r={},o=Object.keys(t).sort(e);for(var i in o)r[o[i]]=t[o[i]];return r}}}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3));r(n(5)),n(19);var i=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=(0,o.default)({},t);return Object.keys(n).forEach(function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))}),r};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};t.default=r},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(23)),l=r(n(103)),u=(r(n(5)),r(n(105))),s=r(n(106)),c=r(n(107)),f=r(n(113)),d=r(n(114)),p=r(n(115)),h=r(n(116)),y=r(n(117)),v=r(n(118));var m=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,m=void 0===r?{}:r,b=e.palette,g=void 0===b?{}:b,x=e.shadows,k=e.spacing,w=void 0===k?{}:k,_=e.typography,S=void 0===_?{}:_,T=(0,i.default)(e,["breakpoints","mixins","palette","shadows","spacing","typography"]),C=(0,c.default)(g),E=(0,u.default)(n),P=(0,o.default)({},h.default,w);return(0,o.default)({breakpoints:E,direction:"ltr",mixins:(0,s.default)(E,P,m),overrides:{},palette:C,props:{},shadows:x||d.default,typography:(0,f.default)(C,S)},(0,a.default)({shape:p.default,spacing:P,transitions:y.default,zIndex:v.default},T,{isMergeableObject:l.default}))};t.default=m},function(e,t,n){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var r=n(104);function o(e){return!0===r(e)&&"[object Object]"===Object.prototype.toString.call(e)}e.exports=function(e){var t,n;return!1!==o(e)&&("function"==typeof(t=e.constructor)&&(!1!==o(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf")))}},function(e,t,n){"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */e.exports=function(e){return null!=e&&"object"==typeof e&&!1===Array.isArray(e)}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,l=void 0===r?"px":r,u=e.step,s=void 0===u?5:u,c=(0,i.default)(e,["values","unit","step"]);function f(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(l,")")}function d(e,t){var r=a.indexOf(t)+1;return r===a.length?f(e):"@media (min-width:".concat(n[e]).concat(l,") and ")+"(max-width:".concat(n[a[r]]-s/100).concat(l,")")}return(0,o.default)({keys:a,values:n,up:f,down:function(e){var t=a.indexOf(e)+1,r=n[a[t]];if(t===a.length)return f("xs");return"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-s/100).concat(l,")")},between:d,only:function(e){return d(e,e)},width:function(e){return n[e]}},c)},t.keys=void 0;var o=r(n(3)),i=r(n(4)),a=["xs","sm","md","lg","xl"];t.keys=a},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r;return(0,i.default)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.default)({paddingLeft:2*t.unit,paddingRight:2*t.unit},n,(0,o.default)({},e.up("sm"),(0,i.default)({paddingLeft:3*t.unit,paddingRight:3*t.unit},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,o.default)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,o.default)(r,e.up("sm"),{minHeight:64}),r)},n)};var o=r(n(6)),i=r(n(3))},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.primary,n=void 0===t?{light:l.default[300],main:l.default[500],dark:l.default[700]}:t,r=e.secondary,v=void 0===r?{light:u.default.A200,main:u.default.A400,dark:u.default.A700}:r,m=e.error,b=void 0===m?{light:c.default[300],main:c.default[500],dark:c.default[700]}:m,g=e.type,x=void 0===g?"light":g,k=e.contrastThreshold,w=void 0===k?3:k,_=e.tonalOffset,S=void 0===_?.2:_,T=(0,i.default)(e,["primary","secondary","error","type","contrastThreshold","tonalOffset"]);function C(e){var t=(0,d.getContrastRatio)(e,h.text.primary)>=w?h.text.primary:p.text.primary;return t}function E(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;return!e.main&&e[t]&&(e.main=e[t]),y(e,"light",n,S),y(e,"dark",r,S),e.contrastText||(e.contrastText=C(e.main)),e}E(n),E(v,"A400","A200","A700"),E(b);var P={dark:h,light:p};return(0,a.default)((0,o.default)({common:f.default,type:x,primary:n,secondary:v,error:b,grey:s.default,contrastThreshold:w,getContrastText:C,augmentColor:E,tonalOffset:S},P[x]),T,{clone:!1})},t.dark=t.light=void 0;var o=r(n(3)),i=r(n(4)),a=(r(n(5)),r(n(23))),l=r(n(108)),u=r(n(109)),s=r(n(110)),c=r(n(111)),f=r(n(112)),d=n(44),p={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:f.default.white,default:s.default[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.08)",hoverOpacity:.08,selected:"rgba(0, 0, 0, 0.14)",disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)"}};t.light=p;var h={text:{primary:f.default.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:s.default[800],default:"#303030"},action:{active:f.default.white,hover:"rgba(255, 255, 255, 0.1)",hoverOpacity:.1,selected:"rgba(255, 255, 255, 0.2)",disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)"}};function y(e,t,n,r){e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,d.lighten)(e.main,r):"dark"===t&&(e.dark=(0,d.darken)(e.main,1.5*r)))}t.dark=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={black:"#000",white:"#fff"};t.default=r},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,f=void 0===r?c:r,d=n.fontSize,p=void 0===d?14:d,h=n.fontWeightLight,y=void 0===h?300:h,v=n.fontWeightRegular,m=void 0===v?400:v,b=n.fontWeightMedium,g=void 0===b?500:b,x=n.htmlFontSize,k=void 0===x?16:x,w=n.useNextVariants,_=void 0===w?Boolean(l.ponyfillGlobal.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__):w,S=(n.suppressWarning,n.allVariants),T=(0,i.default)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","htmlFontSize","useNextVariants","suppressWarning","allVariants"]);var C=p/14,E=function(e){return"".concat(e/k*C,"rem")},P=function(t,n,r,i,a){return(0,o.default)({color:e.text.primary,fontFamily:f,fontWeight:t,fontSize:E(n),lineHeight:r},f===c?{letterSpacing:"".concat(u(i/n),"em")}:{},a,S)},O={h1:P(y,96,1,-1.5),h2:P(y,60,1,-.5),h3:P(m,48,1.04,0),h4:P(m,34,1.17,.25),h5:P(m,24,1.33,0),h6:P(g,20,1.6,.15),subtitle1:P(m,16,1.75,.15),subtitle2:P(g,14,1.57,.1),body1Next:P(m,16,1.5,.15),body2Next:P(m,14,1.5,.15),buttonNext:P(g,14,1.5,.4,s),captionNext:P(m,12,1.66,.4),overline:P(m,12,2.66,1,s)},M={display4:(0,o.default)({fontSize:E(112),fontWeight:y,fontFamily:f,letterSpacing:"-.04em",lineHeight:"".concat(u(128/112),"em"),marginLeft:"-.04em",color:e.text.secondary},S),display3:(0,o.default)({fontSize:E(56),fontWeight:m,fontFamily:f,letterSpacing:"-.02em",lineHeight:"".concat(u(73/56),"em"),marginLeft:"-.02em",color:e.text.secondary},S),display2:(0,o.default)({fontSize:E(45),fontWeight:m,fontFamily:f,lineHeight:"".concat(u(51/45),"em"),marginLeft:"-.02em",color:e.text.secondary},S),display1:(0,o.default)({fontSize:E(34),fontWeight:m,fontFamily:f,lineHeight:"".concat(u(41/34),"em"),color:e.text.secondary},S),headline:(0,o.default)({fontSize:E(24),fontWeight:m,fontFamily:f,lineHeight:"".concat(u(32.5/24),"em"),color:e.text.primary},S),title:(0,o.default)({fontSize:E(21),fontWeight:g,fontFamily:f,lineHeight:"".concat(u(24.5/21),"em"),color:e.text.primary},S),subheading:(0,o.default)({fontSize:E(16),fontWeight:m,fontFamily:f,lineHeight:"".concat(u(1.5),"em"),color:e.text.primary},S),body2:(0,o.default)({fontSize:E(14),fontWeight:g,fontFamily:f,lineHeight:"".concat(u(24/14),"em"),color:e.text.primary},S),body1:(0,o.default)({fontSize:E(14),fontWeight:m,fontFamily:f,lineHeight:"".concat(u(20.5/14),"em"),color:e.text.primary},S),caption:(0,o.default)({fontSize:E(12),fontWeight:m,fontFamily:f,lineHeight:"".concat(u(1.375),"em"),color:e.text.secondary},S),button:(0,o.default)({fontSize:E(14),textTransform:"uppercase",fontWeight:g,fontFamily:f,color:e.text.primary},S)};return(0,a.default)((0,o.default)({pxToRem:E,round:u,fontFamily:f,fontSize:p,fontWeightLight:y,fontWeightRegular:m,fontWeightMedium:g},M,O,_?{body1:O.body1Next,body2:O.body2Next,button:O.buttonNext,caption:O.captionNext}:{},{useNextVariants:_}),T,{clone:!1})};var o=r(n(3)),i=r(n(4)),a=r(n(23)),l=(r(n(5)),n(19));function u(e){return Math.round(1e5*e)/1e5}var s={textTransform:"uppercase"},c='"Roboto", "Helvetica", "Arial", sans-serif'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=.2,o=.14,i=.12;function a(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0, 0, 0, ").concat(r,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0, 0, 0, ").concat(o,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0, 0, 0, ").concat(i,")")].join(",")}var l=["none",a(0,1,3,0,0,1,1,0,0,2,1,-1),a(0,1,5,0,0,2,2,0,0,3,1,-2),a(0,1,8,0,0,3,4,0,0,3,3,-2),a(0,2,4,-1,0,4,5,0,0,1,10,0),a(0,3,5,-1,0,5,8,0,0,1,14,0),a(0,3,5,-1,0,6,10,0,0,1,18,0),a(0,4,5,-2,0,7,10,1,0,2,16,1),a(0,5,5,-3,0,8,10,1,0,3,14,2),a(0,5,6,-3,0,9,12,1,0,3,16,2),a(0,6,6,-3,0,10,14,1,0,4,18,3),a(0,6,7,-4,0,11,15,1,0,4,20,3),a(0,7,8,-4,0,12,17,2,0,5,22,4),a(0,7,8,-4,0,13,19,2,0,5,24,4),a(0,7,9,-4,0,14,21,2,0,5,26,4),a(0,8,9,-5,0,15,22,2,0,6,28,5),a(0,8,10,-5,0,16,24,2,0,6,30,5),a(0,8,11,-5,0,17,26,2,0,6,32,5),a(0,9,11,-5,0,18,28,2,0,7,34,6),a(0,9,12,-6,0,19,29,2,0,7,36,6),a(0,10,13,-6,0,20,31,3,0,8,38,7),a(0,10,13,-6,0,21,33,3,0,8,40,7),a(0,10,14,-6,0,22,35,3,0,8,42,7),a(0,11,14,-7,0,23,36,3,0,9,44,8),a(0,11,15,-7,0,24,38,3,0,9,46,8)];t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={borderRadius:4};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={unit:8};t.default=r},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isNumber=t.isString=t.formatMs=t.duration=t.easing=void 0;var o=r(n(4)),i=(r(n(5)),{easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"});t.easing=i;var a={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};t.duration=a;var l=function(e){return"".concat(Math.round(e),"ms")};t.formatMs=l;t.isString=function(e){return"string"==typeof e};t.isNumber=function(e){return!isNaN(parseFloat(e))};var u={easing:i,duration:a,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?a.standard:n,u=t.easing,s=void 0===u?i.easeInOut:u,c=t.delay,f=void 0===c?0:c;(0,o.default)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map(function(e){return"".concat(e," ").concat("string"==typeof r?r:l(r)," ").concat(s," ").concat("string"==typeof f?f:l(f))}).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={mobileStepper:1e3,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};t.default=r},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.CHANNEL=void 0;var o=r(n(6)),i="__THEMING__";t.CHANNEL=i;var a={contextTypes:(0,o.default)({},i,function(){}),initial:function(e){return e[i]?e[i].getState():null},subscribe:function(e,t){return e[i]?e[i].subscribe(t):null},unsubscribe:function(e,t){e[i]&&e[i].unsubscribe(t)}};t.default=a},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dangerouslyUseGlobalCSS,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,a=e.seed,l=void 0===a?"":a,u=0;return function(e,t){return u+=1,n&&t&&t.options.name?"".concat(i(t.options.name),"-").concat(e.key):"".concat(o).concat(l).concat(u)}};r(n(5));var o=/([[\].#*$><+~=|^:(),"'`\s])/g;function i(e){return String(e).replace(o,"-")}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=(r(n(26)),r(n(5)),r(n(23)));function a(e,t){return t}var l=function(e){var t="function"==typeof e;return{create:function(n,r){var l=t?e(n):e;if(!r||!n.overrides||!n.overrides[r])return l;var u=n.overrides[r],s=(0,o.default)({},l);return Object.keys(u).forEach(function(e){s[e]=(0,i.default)(s[e],u[e],{arrayMerge:a})}),s},options:{},themingEnabled:t}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){var t=e.theme,n=e.name,r=e.props;if(!t.props||!n||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r};t.default=r},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(6)),i=r(n(4)),a=r(n(3)),l=r(n(0)),u=(r(n(2)),r(n(7))),s=(r(n(5)),r(n(9))),c=function(e){var t={};return e.shadows.forEach(function(e,n){t["elevation".concat(n)]={boxShadow:e}}),(0,a.default)({root:{backgroundColor:e.palette.background.paper},rounded:{borderRadius:e.shape.borderRadius}},t)};function f(e){var t=e.classes,n=e.className,r=e.component,s=e.square,c=e.elevation,f=(0,i.default)(e,["classes","className","component","square","elevation"]),d=(0,u.default)(t.root,t["elevation".concat(c)],(0,o.default)({},t.rounded,!s),n);return l.default.createElement(r,(0,a.default)({className:d},f))}t.styles=c,f.propTypes={},f.defaultProps={component:"div",elevation:2,square:!1};var d=(0,s.default)(c,{name:"MuiPaper"})(f);t.default=d},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(6)),a=r(n(4)),l=r(n(0)),u=(r(n(2)),r(n(7))),s=r(n(9)),c=n(31),f=(r(n(45)),function(e){return{root:{display:"block",margin:0},display4:e.typography.display4,display3:e.typography.display3,display2:e.typography.display2,display1:e.typography.display1,headline:e.typography.headline,title:e.typography.title,subheading:e.typography.subheading,body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main}}});t.styles=f;var d={display4:"h1",display3:"h2",display2:"h3",display1:"h4",headline:"h5",title:"h6",subheading:"subtitle1"};var p={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",display4:"h1",display3:"h1",display2:"h1",display1:"h1",headline:"h1",title:"h2",subheading:"h3"};function h(e){var t,n=e.align,r=e.classes,s=e.className,f=e.color,h=e.component,y=e.gutterBottom,v=e.headlineMapping,m=(e.internalDeprecatedVariant,e.noWrap),b=e.paragraph,g=e.theme,x=e.variant,k=(0,a.default)(e,["align","classes","className","color","component","gutterBottom","headlineMapping","internalDeprecatedVariant","noWrap","paragraph","theme","variant"]),w=function(e,t){var n=e.typography,r=t;return r||(r=n.useNextVariants?"body2":"body1"),n.useNextVariants&&(r=d[r]||r),r}(g,x),_=(0,u.default)(r.root,(t={},(0,i.default)(t,r[w],"inherit"!==w),(0,i.default)(t,r["color".concat((0,c.capitalize)(f))],"default"!==f),(0,i.default)(t,r.noWrap,m),(0,i.default)(t,r.gutterBottom,y),(0,i.default)(t,r.paragraph,b),(0,i.default)(t,r["align".concat((0,c.capitalize)(n))],"inherit"!==n),t),s),S=h||(b?"p":v[w]||p[w])||"span";return l.default.createElement(S,(0,o.default)({className:_},k))}h.propTypes={},h.defaultProps={align:"inherit",color:"default",gutterBottom:!1,headlineMapping:p,noWrap:!1,paragraph:!1};var y=(0,s.default)(f,{name:"MuiTypography",withTheme:!0})(h);t.default=y},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(6)),i=r(n(4)),a=r(n(3)),l=r(n(0)),u=(r(n(2)),r(n(7))),s=r(n(9)),c=n(44),f=r(n(126)),d=(r(n(45)),n(31)),p=function(e){return{root:(0,a.default)({},e.typography.button,{boxSizing:"border-box",minWidth:64,minHeight:36,padding:"8px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:(0,c.fade)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},flat:{},flatPrimary:{},flatSecondary:{},outlined:{border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)")},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat((0,c.fade)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:(0,c.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat((0,c.fade)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:(0,c.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground},"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},raised:{},raisedPrimary:{},raisedSecondary:{},fab:{borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,boxShadow:e.shadows[6],"&:active":{boxShadow:e.shadows[12]}},extendedFab:{borderRadius:24,padding:"0 16px",width:"auto",minWidth:48,height:48},focusVisible:{},disabled:{},colorInherit:{color:"inherit"},mini:{width:40,height:40},sizeSmall:{padding:"7px 8px",minWidth:64,minHeight:32,fontSize:e.typography.pxToRem(13)},sizeLarge:{padding:"8px 24px",minWidth:112,minHeight:40,fontSize:e.typography.pxToRem(15)},fullWidth:{width:"100%"}}};function h(e){var t,n=e.children,r=e.classes,s=e.className,c=e.color,p=e.disabled,h=e.disableFocusRipple,y=e.focusVisibleClassName,v=e.fullWidth,m=e.mini,b=e.size,g=e.variant,x=(0,i.default)(e,["children","classes","className","color","disabled","disableFocusRipple","focusVisibleClassName","fullWidth","mini","size","variant"]),k="fab"===g||"extendedFab"===g,w="contained"===g||"raised"===g,_="text"===g||"flat"===g,S=(0,u.default)(r.root,(t={},(0,o.default)(t,r.fab,k),(0,o.default)(t,r.mini,k&&m),(0,o.default)(t,r.extendedFab,"extendedFab"===g),(0,o.default)(t,r.text,_),(0,o.default)(t,r.textPrimary,_&&"primary"===c),(0,o.default)(t,r.textSecondary,_&&"secondary"===c),(0,o.default)(t,r.flat,"text"===g||"flat"===g),(0,o.default)(t,r.flatPrimary,("text"===g||"flat"===g)&&"primary"===c),(0,o.default)(t,r.flatSecondary,("text"===g||"flat"===g)&&"secondary"===c),(0,o.default)(t,r.contained,w||k),(0,o.default)(t,r.containedPrimary,(w||k)&&"primary"===c),(0,o.default)(t,r.containedSecondary,(w||k)&&"secondary"===c),(0,o.default)(t,r.raised,w||k),(0,o.default)(t,r.raisedPrimary,(w||k)&&"primary"===c),(0,o.default)(t,r.raisedSecondary,(w||k)&&"secondary"===c),(0,o.default)(t,r.outlined,"outlined"===g),(0,o.default)(t,r.outlinedPrimary,"outlined"===g&&"primary"===c),(0,o.default)(t,r.outlinedSecondary,"outlined"===g&&"secondary"===c),(0,o.default)(t,r["size".concat((0,d.capitalize)(b))],"medium"!==b),(0,o.default)(t,r.disabled,p),(0,o.default)(t,r.fullWidth,v),(0,o.default)(t,r.colorInherit,"inherit"===c),t),s);return l.default.createElement(f.default,(0,a.default)({className:S,disabled:p,focusRipple:!h,focusVisibleClassName:(0,u.default)(r.focusVisible,y)},x),l.default.createElement("span",{className:r.label},n))}t.styles=p,h.propTypes={},h.defaultProps={color:"default",component:"button",disabled:!1,disableFocusRipple:!1,fullWidth:!1,mini:!1,size:"medium",type:"button",variant:"text"};var y=(0,s.default)(p,{name:"MuiButton"})(h);t.default=y},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(127))},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(6)),a=r(n(4)),l=r(n(11)),u=r(n(12)),s=r(n(13)),c=r(n(14)),f=r(n(15)),d=r(n(27)),p=r(n(0)),h=(r(n(2)),r(n(17))),y=r(n(7)),v=r(n(46)),m=r(n(128)),b=r(n(9)),g=r(n(129)),x=n(131),k=r(n(132)),w=r(n(142)),_={root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:"none",border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"}},disabled:{},focusVisible:{}};t.styles=_;var S=function(e){function t(){var e,n;(0,l.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).state={},n.keyDown=!1,n.focusVisibleCheckTime=50,n.focusVisibleMaxCheckTimes=5,n.handleMouseDown=(0,w.default)((0,d.default)((0,d.default)(n)),"MouseDown","start",function(){clearTimeout(n.focusVisibleTimeout),n.state.focusVisible&&n.setState({focusVisible:!1})}),n.handleMouseUp=(0,w.default)((0,d.default)((0,d.default)(n)),"MouseUp","stop"),n.handleMouseLeave=(0,w.default)((0,d.default)((0,d.default)(n)),"MouseLeave","stop",function(e){n.state.focusVisible&&e.preventDefault()}),n.handleTouchStart=(0,w.default)((0,d.default)((0,d.default)(n)),"TouchStart","start"),n.handleTouchEnd=(0,w.default)((0,d.default)((0,d.default)(n)),"TouchEnd","stop"),n.handleTouchMove=(0,w.default)((0,d.default)((0,d.default)(n)),"TouchMove","stop"),n.handleBlur=(0,w.default)((0,d.default)((0,d.default)(n)),"Blur","stop",function(){clearTimeout(n.focusVisibleTimeout),n.state.focusVisible&&n.setState({focusVisible:!1})}),n.onRippleRef=function(e){n.ripple=e},n.onFocusVisibleHandler=function(e){n.keyDown=!1,n.setState({focusVisible:!0}),n.props.onFocusVisible&&n.props.onFocusVisible(e)},n.handleKeyDown=function(e){var t=n.props,r=t.component,o=t.focusRipple,i=t.onKeyDown,a=t.onClick,l=(0,v.default)(e);o&&!n.keyDown&&n.state.focusVisible&&n.ripple&&"space"===l&&(n.keyDown=!0,e.persist(),n.ripple.stop(e,function(){n.ripple.start(e)})),i&&i(e),e.target!==e.currentTarget||!r||"button"===r||"space"!==l&&"enter"!==l||"A"===n.button.tagName&&n.button.href||(e.preventDefault(),a&&a(e))},n.handleKeyUp=function(e){n.props.focusRipple&&"space"===(0,v.default)(e)&&n.ripple&&n.state.focusVisible&&(n.keyDown=!1,e.persist(),n.ripple.stop(e,function(){n.ripple.pulsate(e)})),n.props.onKeyUp&&n.props.onKeyUp(e)},n.handleFocus=function(e){n.props.disabled||(n.button||(n.button=e.currentTarget),e.persist(),(0,x.detectFocusVisible)((0,d.default)((0,d.default)(n)),n.button,function(){n.onFocusVisibleHandler(e)}),n.props.onFocus&&n.props.onFocus(e))},n}return(0,f.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.button=h.default.findDOMNode(this),(0,x.listenForFocusKeys)((0,m.default)(this.button)),this.props.action&&this.props.action({focusVisible:function(){e.setState({focusVisible:!0}),e.button.focus()}})}},{key:"componentDidUpdate",value:function(e,t){this.props.focusRipple&&!this.props.disableRipple&&!t.focusVisible&&this.state.focusVisible&&this.ripple.pulsate()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.focusVisibleTimeout)}},{key:"render",value:function(){var e,t=this.props,n=(t.action,t.buttonRef),r=t.centerRipple,l=t.children,u=t.classes,s=t.className,c=t.component,f=t.disabled,d=t.disableRipple,h=(t.disableTouchRipple,t.focusRipple,t.focusVisibleClassName),v=(t.onBlur,t.onFocus,t.onFocusVisible,t.onKeyDown,t.onKeyUp,t.onMouseDown,t.onMouseLeave,t.onMouseUp,t.onTouchEnd,t.onTouchMove,t.onTouchStart,t.tabIndex),m=t.TouchRippleProps,b=t.type,x=(0,a.default)(t,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","type"]),w=(0,y.default)(u.root,(e={},(0,i.default)(e,u.disabled,f),(0,i.default)(e,u.focusVisible,this.state.focusVisible),(0,i.default)(e,h,this.state.focusVisible),e),s),_=c;"button"===_&&x.href&&(_="a");var S={};return"button"===_?(S.type=b||"button",S.disabled=f):S.role="button",p.default.createElement(_,(0,o.default)({className:w,onBlur:this.handleBlur,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown,onKeyUp:this.handleKeyUp,onMouseDown:this.handleMouseDown,onMouseLeave:this.handleMouseLeave,onMouseUp:this.handleMouseUp,onTouchEnd:this.handleTouchEnd,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,ref:n,tabIndex:f?"-1":v},S,x),l,d||f?null:p.default.createElement(g.default,null,p.default.createElement(k.default,(0,o.default)({innerRef:this.onRippleRef,center:r},m))))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return void 0===t.focusVisible?{focusVisible:!1,lastDisabled:e.disabled}:!t.prevState&&e.disabled&&t.focusVisible?{focusVisible:!1,lastDisabled:e.disabled}:{lastDisabled:e.disabled}}}]),t}(p.default.Component);S.propTypes={},S.defaultProps={centerRipple:!1,component:"button",disableRipple:!1,disableTouchRipple:!1,focusRipple:!1,tabIndex:"0",type:"button"};var T=(0,b.default)(_,{name:"MuiButtonBase"})(S);t.default=T},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(47));var i=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window,n=(0,o.default)(e);return n.defaultView||n.parentView||t};t.default=i},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(130))},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(11)),i=r(n(12)),a=r(n(13)),l=r(n(14)),u=r(n(15)),s=r(n(0)),c=(r(n(2)),n(19),function(e){function t(){var e,n;(0,o.default)(this,t);for(var r=arguments.length,i=new Array(r),u=0;u<r;u++)i[u]=arguments[u];return(n=(0,a.default)(this,(e=(0,l.default)(t)).call.apply(e,[this].concat(i)))).mounted=!1,n.state={mounted:!1},n}return(0,u.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.mounted=!0,this.props.defer?requestAnimationFrame(function(){requestAnimationFrame(function(){e.mounted&&e.setState({mounted:!0})})}):this.setState({mounted:!0})}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.fallback;return this.state.mounted?t:n}}]),t}(s.default.Component));c.propTypes={},c.propTypes={},c.defaultProps={defer:!1,fallback:null};var f=c;t.default=f},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.detectFocusVisible=function e(t,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.focusVisibleTimeout=setTimeout(function(){var l=(0,i.default)(n),u=function(e){var t=e.activeElement;for(;t&&t.shadowRoot&&t.shadowRoot.activeElement;)t=t.shadowRoot.activeElement;return t}(l);a.focusKeyPressed&&(u===n||n.contains(u))?r():o<t.focusVisibleMaxCheckTimes&&e(t,n,r,o+1)},t.focusVisibleCheckTime)},t.listenForFocusKeys=function(e){e.addEventListener("keyup",u)};var o=r(n(46)),i=(r(n(5)),r(n(47))),a={focusKeyPressed:!1,keyUpEventTimeout:-1};var l=["tab","enter","space","esc","up","down","left","right"];var u=function(e){(function(e){return l.indexOf((0,o.default)(e))>-1})(e)&&(a.focusKeyPressed=!0,clearTimeout(a.keyUpEventTimeout),a.keyUpEventTimeout=setTimeout(function(){a.focusKeyPressed=!1},1e3))}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=t.DELAY_RIPPLE=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(133)),l=r(n(11)),u=r(n(12)),s=r(n(13)),c=r(n(14)),f=r(n(15)),d=r(n(27)),p=r(n(0)),h=(r(n(2)),r(n(17))),y=r(n(137)),v=r(n(7)),m=r(n(9)),b=r(n(139)),g=550,x=80;t.DELAY_RIPPLE=x;var k=function(e){return{root:{display:"block",position:"absolute",overflow:"hidden",borderRadius:"inherit",width:"100%",height:"100%",left:0,top:0,pointerEvents:"none",zIndex:0},ripple:{width:50,height:50,left:0,top:0,opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"mui-ripple-enter ".concat(g,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"mui-ripple-exit ".concat(g,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"mui-ripple-pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes mui-ripple-enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes mui-ripple-exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes mui-ripple-pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}};t.styles=k;var w=function(e){function t(){var e,n;(0,l.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).state={nextKey:0,ripples:[]},n.pulsate=function(){n.start({},{pulsate:!0})},n.start=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2?arguments[2]:void 0,o=t.pulsate,i=void 0!==o&&o,a=t.center,l=void 0===a?n.props.center||t.pulsate:a,u=t.fakeElement,s=void 0!==u&&u;if("mousedown"===e.type&&n.ignoringMouseDown)n.ignoringMouseDown=!1;else{"touchstart"===e.type&&(n.ignoringMouseDown=!0);var c,f,p,y=s?null:h.default.findDOMNode((0,d.default)((0,d.default)(n))),v=y?y.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(v.width/2),f=Math.round(v.height/2);else{var m=e.clientX?e.clientX:e.touches[0].clientX,b=e.clientY?e.clientY:e.touches[0].clientY;c=Math.round(m-v.left),f=Math.round(b-v.top)}if(l)(p=Math.sqrt((2*Math.pow(v.width,2)+Math.pow(v.height,2))/3))%2==0&&(p+=1);else{var g=2*Math.max(Math.abs((y?y.clientWidth:0)-c),c)+2,k=2*Math.max(Math.abs((y?y.clientHeight:0)-f),f)+2;p=Math.sqrt(Math.pow(g,2)+Math.pow(k,2))}e.touches?(n.startTimerCommit=function(){n.startCommit({pulsate:i,rippleX:c,rippleY:f,rippleSize:p,cb:r})},n.startTimer=setTimeout(function(){n.startTimerCommit&&(n.startTimerCommit(),n.startTimerCommit=null)},x)):n.startCommit({pulsate:i,rippleX:c,rippleY:f,rippleSize:p,cb:r})}},n.startCommit=function(e){var t=e.pulsate,r=e.rippleX,o=e.rippleY,i=e.rippleSize,l=e.cb;n.setState(function(e){return{nextKey:e.nextKey+1,ripples:(0,a.default)(e.ripples).concat([p.default.createElement(b.default,{key:e.nextKey,classes:n.props.classes,timeout:{exit:g,enter:g},pulsate:t,rippleX:r,rippleY:o,rippleSize:i})])}},l)},n.stop=function(e,t){clearTimeout(n.startTimer);var r=n.state.ripples;if("touchend"===e.type&&n.startTimerCommit)return e.persist(),n.startTimerCommit(),n.startTimerCommit=null,void(n.startTimer=setTimeout(function(){n.stop(e,t)},0));n.startTimerCommit=null,r&&r.length&&n.setState({ripples:r.slice(1)},t)},n}return(0,f.default)(t,e),(0,u.default)(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.startTimer)}},{key:"render",value:function(){var e=this.props,t=(e.center,e.classes),n=e.className,r=(0,i.default)(e,["center","classes","className"]);return p.default.createElement(y.default,(0,o.default)({component:"span",enter:!0,exit:!0,className:(0,v.default)(t.root,n)},r),this.state.ripples)}}]),t}(p.default.PureComponent);w.propTypes={},w.defaultProps={center:!1};var _=(0,m.default)(k,{flip:!1,name:"MuiTouchRipple"})(w);t.default=_},function(e,t,n){var r=n(134),o=n(135),i=n(136);e.exports=function(e){return r(e)||o(e)||i()}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=l(n(2)),o=l(n(0)),i=n(48),a=n(138);function l(e){return e&&e.__esModule?e:{default:e}}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var c=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},f=function(e){var t,n;function r(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(s(s(r)));return r.state={handleExited:o,firstRender:!0},r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},i.componentDidMount=function(){this.appeared=!0},r.getDerivedStateFromProps=function(e,t){var n=t.children,r=t.handleExited;return{children:t.firstRender?(0,a.getInitialChildMapping)(e,r):(0,a.getNextChildMapping)(e,n,r),firstRender:!1}},i.handleExited=function(e,t){var n=(0,a.getChildMapping)(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.setState(function(t){var n=u({},t.children);return delete n[e.key],{children:n}}))},i.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["component","childFactory"]),i=c(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?i:o.default.createElement(t,r,i)},r}(o.default.Component);f.childContextTypes={transitionGroup:r.default.object.isRequired},f.propTypes={},f.defaultProps={component:"div",childFactory:function(e){return e}};var d=(0,i.polyfill)(f);t.default=d,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=o,t.mergeChildMappings=i,t.getInitialChildMapping=function(e,t){return o(e.children,function(n){return(0,r.cloneElement)(n,{onExited:t.bind(null,n),in:!0,appear:a(n,"appear",e),enter:a(n,"enter",e),exit:a(n,"exit",e)})})},t.getNextChildMapping=function(e,t,n){var l=o(e.children),u=i(t,l);return Object.keys(u).forEach(function(o){var i=u[o];if((0,r.isValidElement)(i)){var s=o in t,c=o in l,f=t[o],d=(0,r.isValidElement)(f)&&!f.props.in;!c||s&&!d?c||!s||d?c&&s&&(0,r.isValidElement)(f)&&(u[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:f.props.in,exit:a(i,"exit",e),enter:a(i,"enter",e)})):u[o]=(0,r.cloneElement)(i,{in:!1}):u[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:!0,exit:a(i,"exit",e),enter:a(i,"enter",e)})}}),u};var r=n(0);function o(e,t){var n=Object.create(null);return e&&r.Children.map(e,function(e){return e}).forEach(function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)}),n}function i(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var s=o[u][r];l[o[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<i.length;r++)l[i[r]]=n(i[r]);return l}function a(e,t,n){return null!=n[t]?n[t]:e.props[t]}},function(e,t,n){"use strict";var r=n(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(6)),a=r(n(4)),l=r(n(11)),u=r(n(12)),s=r(n(13)),c=r(n(14)),f=r(n(15)),d=r(n(0)),p=(r(n(2)),r(n(7))),h=r(n(140)),y=function(e){function t(){var e,n;(0,l.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).state={visible:!1,leaving:!1},n.handleEnter=function(){n.setState({visible:!0})},n.handleExit=function(){n.setState({leaving:!0})},n}return(0,f.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e,t,n=this.props,r=n.classes,l=n.className,u=n.pulsate,s=n.rippleX,c=n.rippleY,f=n.rippleSize,y=(0,a.default)(n,["classes","className","pulsate","rippleX","rippleY","rippleSize"]),v=this.state,m=v.visible,b=v.leaving,g=(0,p.default)(r.ripple,(e={},(0,i.default)(e,r.rippleVisible,m),(0,i.default)(e,r.ripplePulsate,u),e),l),x={width:f,height:f,top:-f/2+c,left:-f/2+s},k=(0,p.default)(r.child,(t={},(0,i.default)(t,r.childLeaving,b),(0,i.default)(t,r.childPulsate,u),t));return d.default.createElement(h.default,(0,o.default)({onEnter:this.handleEnter,onExit:this.handleExit},y),d.default.createElement("span",{className:g,style:x},d.default.createElement("span",{className:k})))}}]),t}(d.default.Component);y.propTypes={},y.defaultProps={pulsate:!1};var v=y;t.default=v},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(2)),o=l(n(0)),i=l(n(17)),a=n(48);n(141);function l(e){return e&&e.__esModule?e:{default:e}}var u="unmounted";t.UNMOUNTED=u;var s="exited";t.EXITED=s;var c="entering";t.ENTERING=c;var f="entered";t.ENTERED=f;t.EXITING="exiting";var d=function(e){var t,n;function r(t,n){var r;r=e.call(this,t,n)||this;var o,i=n.transitionGroup,a=i&&!i.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=s,r.appearStatus=c):o=f:o=t.unmountOnExit||t.mountOnEnter?u:s,r.state={status:o},r.nextCallback=null,r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var a=r.prototype;return a.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===u?{status:s}:null},a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==c&&n!==f&&(t=c):n!==c&&n!==f||(t="exiting")}this.updateStatus(!1,t)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=r.appear),{exit:e,enter:t,appear:n}},a.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=i.default.findDOMNode(this);t===c?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===s&&this.setState({status:u})},a.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,i=this.getTimeouts();t||r?(this.props.onEnter(e,o),this.safeSetState({status:c},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,i.enter,function(){n.safeSetState({status:f},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:f},function(){n.props.onEntered(e)})},a.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:s},function(){t.props.onExited(e)})})})):this.safeSetState({status:s},function(){t.props.onExited(e)})},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},a.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},a.render=function(){var e=this.state.status;if(e===u)return null;var t=this.props,n=t.children,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var i=o.default.Children.only(n);return o.default.cloneElement(i,r)},r}(o.default.Component);function p(){}d.contextTypes={transitionGroup:r.object},d.childContextTypes={transitionGroup:function(){}},d.propTypes={},d.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:p,onEntering:p,onEntered:p,onExit:p,onExiting:p,onExited:p},d.UNMOUNTED=0,d.EXITED=1,d.ENTERING=2,d.ENTERED=3,d.EXITING=4;var h=(0,a.polyfill)(d);t.default=h},function(e,t,n){"use strict";t.__esModule=!0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}},t.classNamesShape=t.timeoutsShape=void 0;var r,o=(r=n(2))&&r.__esModule?r:{default:r};var i=o.default.oneOfType([o.default.number,o.default.shape({enter:o.default.number,exit:o.default.number}).isRequired]);t.timeoutsShape=i;var a=o.default.oneOfType([o.default.string,o.default.shape({enter:o.default.string,exit:o.default.string,active:o.default.string}),o.default.shape({enter:o.default.string,enterDone:o.default.string,enterActive:o.default.string,exit:o.default.string,exitDone:o.default.string,exitActive:o.default.string})]);t.classNamesShape=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t,n,r){return function(o){r&&r.call(e,o);var i=!1;return o.defaultPrevented&&(i=!0),e.props.disableTouchRipple&&"Blur"!==t&&(i=!0),!i&&e.ripple&&e.ripple[n](o),"function"==typeof e.props["on".concat(t)]&&e.props["on".concat(t)](o),!0}};"undefined"==typeof window&&(r=function(){return function(){}});var o=r;t.default=o},function(e,t,n){var r=n(144);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(25)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(24)(!1)).push([e.i,".Card {\n  width: 120px;\n  margin: 20px; }\n  .Card div {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px;\n    font-size: 20px; }\n  .Card .heart,\n  .Card .diamond {\n    color: red; }\n",""])},function(e,t,n){var r=n(146);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(25)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(24)(!1)).push([e.i,".CardContainer {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center; }\n  .CardContainer .onecarddisplay {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 0 auto;\n    margin-top: 30; }\n",""])},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(17),a=n.n(i),l=function(e){return Math.floor(Math.random()*Math.floor(e))},u=function(e){for(var t=e.length-1;t>0;t--){var n=l(t+1),r=e[t];e[t]=e[n],e[n]=r}return e},s=function(){var e=[],t=["Ace","2","3","4","5","6","7","8","9","10","Jack","Queen","King"];return["heart","spade","club","diamond"].forEach(function(n){t.forEach(function(t){e.push({group:n,value:t})})}),e},c=n(2),f=n.n(c),d=n(49),p=n.n(d),h=n(33),y=n.n(h),v=n(51),m=n.n(v),b=(n(58),function(e){return o.a.createElement("div",{className:"Header"},o.a.createElement(p.a,{position:"static"},o.a.createElement(m.a,{variant:"h6",color:"inherit"},"Deck Of Cards"),o.a.createElement(y.a,{color:"inherit",onClick:function(){return e.handleShuffle()}},"Shuffle"),o.a.createElement(y.a,{color:"inherit",onClick:function(){return e.handleDealOneCard()}},"Deal One Card")))});b.propTypes={handleShuffle:f.a.func.isRequired,handleDealOneCard:f.a.func.isRequired};var g=b,x=n(32),k=n.n(x),w={heart:"♥️",spade:"♠️",club:"♣️",diamond:"♦️"},_=(n(143),function(e){var t=e.card;return o.a.createElement("div",{className:"Card"},o.a.createElement(k.a,null,o.a.createElement("div",null,w[t.group]),o.a.createElement("div",{className:t.group},t.value)))});_.propTypes={card:f.a.shape({group:f.a.string.isRequired,value:f.a.string.isRequired}).isRequired};var S=_,T=(n(145),function(e){return o.a.createElement("div",{className:"CardContainer"},e.dealOneCard?o.a.createElement("div",{className:"onecarddisplay"},o.a.createElement("div",null,"Rest cards : ",e.cards.length),0!==e.cards.length?o.a.createElement(S,{card:e.card}):o.a.createElement("div",null,"No more card, click shuffle to restart")):e.cards.map(function(e,t){return o.a.createElement(S,{key:t,card:e})}))});T.propTypes={cards:f.a.arrayOf(f.a.object).isRequired};var C=T;function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function M(e,t){return(M=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var N=function(e){function t(){var e,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(e=!(r=O(t).call(this))||"object"!==E(r)&&"function"!=typeof r?j(n):r).state={card:{},cards:s(),dealOneCard:!1,shuffleForDealOneCard:!1},e.handleShuffle=e.handleShuffle.bind(j(j(e))),e.handleDealOneCard=e.handleDealOneCard.bind(j(j(e))),e}var n,i,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&M(e,t)}(t,r["Component"]),n=t,(i=[{key:"handleShuffle",value:function(){0===this.state.cards.length?this.setState({cards:u(s())}):this.setState({cards:u(this.state.cards)}),this.setState({card:{},dealOneCard:!1,shuffleForDealOneCard:!1})}},{key:"handleDealOneCard",value:function(){this.state.shuffleForDealOneCard||(u(this.state.cards),this.setState({shuffleForDealOneCard:!0}));var e=function(e){if(e.length>1){var t=l(e.length),n=e[t];return e.splice(t,1),{cards:e,card:n}}return 1===e.length?{cards:[],card:e[0]}:{cards:[],card:{}}}(this.state.cards),t=e.card,n=e.cards;this.setState({card:t,cards:n,dealOneCard:!0})}},{key:"render",value:function(){return o.a.createElement(r.Fragment,null,o.a.createElement(g,{handleShuffle:this.handleShuffle,handleDealOneCard:this.handleDealOneCard}),o.a.createElement(C,{card:this.state.card,cards:this.state.cards,dealOneCard:this.state.dealOneCard}))}}])&&P(n.prototype,i),a&&P(n,a),t}();a.a.render(o.a.createElement(N,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL1N0eWxlUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL1J1bGVMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2luZGV4LmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3V0aWxzL3RvQ3NzVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvY3JlYXRlUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtaW4tYnJvd3Nlci9kaXN0L21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy90b0Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9zaGVldHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL3ByZWZpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUGFwZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2V4YWN0UHJvcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2dldERpc3BsYXlOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvcG9ueWZpbGxHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvU2hlZXRzUmVnaXN0cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvaXNPYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3V0aWxzL2xpbmtSdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3V0aWxzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL1N0eWxlU2hlZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS91dGlscy9jaGFpblByb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMva2V5Y29kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQvcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0FwcEJhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyLnNjc3M/MDlmYSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQXBwQmFyL0FwcEJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9nZXREeW5hbWljU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL1NoZWV0c01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvY2xvbmVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3V0aWxzL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9tb2R1bGVJZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9Kc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvUGx1Z2luc1JlZ2lzdHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3BsdWdpbnMvcnVsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcnVsZXMvU2ltcGxlUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9ydWxlcy9LZXlmcmFtZXNSdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL0NvbmRpdGlvbmFsUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9ydWxlcy9Gb250RmFjZVJ1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcnVsZXMvVmlld3BvcnRSdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3BsdWdpbnMvb2JzZXJ2YWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcGx1Z2lucy9mdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcmVuZGVyZXJzL0RvbVJlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3JlbmRlcmVycy9WaXJ0dWFsUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9yZWFjdEpzc0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9qc3NQcmVzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1nbG9iYWwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtbmVzdGVkL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLWNhbWVsLWNhc2UvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLWRlZmF1bHQtdW5pdC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1kZWZhdWx0LXVuaXQvbGliL2RlZmF1bHRVbml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXZlbmRvci1wcmVmaXhlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2xpYi9zdXBwb3J0ZWQtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2xpYi9zdXBwb3J0ZWQtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wcm9wcy1zb3J0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL21lcmdlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVNdWlUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc29iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2luZGlnby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL3BpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9zaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3NwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy90cmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL3RoZW1lTGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2dldFN0eWxlc0NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9nZXRUaGVtZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9QYXBlci9QYXBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeS9UeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24vQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL0J1dHRvbkJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Ob1Nzci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTm9Tc3IvTm9Tc3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UvZm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL1RvdWNoUmlwcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uQmFzZS9jcmVhdGVSaXBwbGVIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhcmQvQ2FyZC5zY3NzPzBiM2UiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC9DYXJkLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZENvbnRhaW5lci9DYXJkQ29udGFpbmVyLnNjc3M/ODNmMSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkQ29udGFpbmVyL0NhcmRDb250YWluZXIuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvSGVhZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25zdGFudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DYXJkL0NhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FyZENvbnRhaW5lci9DYXJkQ29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwib2JqIiwiZGVmYXVsdCIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIndhcm5pbmciLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiaGFzT3duIiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJhcmciLCJhcmdUeXBlIiwicHVzaCIsIkFycmF5IiwiaXNBcnJheSIsImlubmVyIiwiam9pbiIsInVuZGVmaW5lZCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJzaGVldHNNYW5hZ2VyIiwiX2RlZmluZVByb3BlcnR5MiIsIl9leHRlbmRzMyIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9pbmhlcml0czIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX3JlYWN0IiwiX3Byb3BUeXBlcyIsIl9ob2lzdE5vblJlYWN0U3RhdGljcyIsIl91dGlscyIsIl9qc3MiLCJfcmVhY3RKc3NDb250ZXh0IiwiX2pzc1ByZXNldCIsIl9tZXJnZUNsYXNzZXMiLCJfbXVsdGlLZXlTdG9yZSIsIl9jcmVhdGVNdWlUaGVtZSIsIl90aGVtZUxpc3RlbmVyIiwiX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIiwiX2dldFN0eWxlc0NyZWF0b3IiLCJfZ2V0VGhlbWVQcm9wcyIsImpzcyIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiaW5kZXhDb3VudGVyIiwiTWFwIiwiZGVmYXVsdFRoZW1lIiwibm9vcFRoZW1lIiwiZ2V0RGVmYXVsdFRoZW1lIiwidHlwb2dyYXBoeSIsInN1cHByZXNzV2FybmluZyIsInBvbnlmaWxsR2xvYmFsIiwiX19NVUlfREVGQVVMVF9USEVNRV9fIiwiX19NVUlfU1RZTEVTX18iLCJ3aXRoU3R5bGVzIiwic3R5bGVzT3JDcmVhdG9yIiwib3B0aW9ucyIsIkNvbXBvbmVudCIsIl9leHRlbmRzMiIsIl9vcHRpb25zJHdpdGhUaGVtZSIsIndpdGhUaGVtZSIsIl9vcHRpb25zJGZsaXAiLCJmbGlwIiwic3R5bGVTaGVldE9wdGlvbnMiLCJzdHlsZXNDcmVhdG9yIiwibGlzdGVuVG9UaGVtZSIsInRoZW1pbmdFbmFibGVkIiwiaW5kZXgiLCJXaXRoU3R5bGVzIiwiX1JlYWN0JENvbXBvbmVudCIsInByb3BzIiwiY29udGV4dCIsIl90aGlzIiwidW5zdWJzY3JpYmVJZCIsIm11aVRoZW1lUHJvdmlkZXJPcHRpb25zIiwic2hlZXRzQ2FjaGUiLCJkaXNhYmxlU3R5bGVzR2VuZXJhdGlvbiIsInN0eWxlc0NyZWF0b3JTYXZlZCIsInNoZWV0T3B0aW9ucyIsInRoZW1lIiwiaW5pdGlhbCIsImF0dGFjaCIsImNhY2hlQ2xhc3NlcyIsImxhc3RQcm9wIiwibGFzdEpTUyIsIl90aGlzMiIsInN1YnNjcmliZSIsIm9sZFRoZW1lIiwic2V0U3RhdGUiLCJkZXRhY2giLCJ1bnN1YnNjcmliZSIsImdlbmVyYXRlIiwic2hlZXRNYW5hZ2VyIiwic2hlZXQiLCJiYXNlQ2xhc3NlcyIsIm5ld0NsYXNzZXMiLCJyZWZzIiwic2V0IiwiY3JlYXRlU2hlZXQiLCJzaGVldHNSZWdpc3RyeSIsImFkZCIsInN0eWxlcyIsIm1ldGEiLCJjcmVhdGVTdHlsZVNoZWV0IiwiY2xhc3NOYW1lUHJlZml4IiwiZGlyZWN0aW9uIiwibGluayIsImRpc3BsYXlOYW1lIiwiZGVsZXRlIiwicmVtb3ZlU3R5bGVTaGVldCIsInJlbW92ZSIsIl90aGlzJHByb3BzIiwiaW5uZXJSZWYiLCJvdGhlciIsIm1vcmUiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q2xhc3NlcyIsInJlZiIsInByb3BUeXBlcyIsImNvbnRleHRUeXBlcyIsIl9kZWZhdWx0IiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3dhcm5pbmcyIiwiX3RvQ3NzMiIsIl90b0Nzc1ZhbHVlMiIsIlN0eWxlUnVsZSIsInN0eWxlIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0eXBlIiwiaXNQcm9jZXNzZWQiLCJSZW5kZXJlciIsInNlbGVjdG9yIiwic2VsZWN0b3JUZXh0IiwicmVuZGVyZXIiLCJpc0VtcHR5IiwicGx1Z2lucyIsIm9uQ2hhbmdlVmFsdWUiLCJpc0RlZmluZWQiLCJyZW5kZXJhYmxlIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImF0dGFjaGVkIiwianNvbiIsInRvSlNPTiIsInByb3AiLCJvcHRzIiwiYWxsb3dFbXB0eSIsInNldFNlbGVjdG9yIiwicmVwbGFjZVJ1bGUiLCJfZGVmaW5lUHJvcGVydGllcyIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2NyZWF0ZVJ1bGUyIiwiX2xpbmtSdWxlMiIsIl9TdHlsZVJ1bGUyIiwiX2VzY2FwZTIiLCJSdWxlTGlzdCIsIm1hcCIsInJhdyIsInVwZGF0ZSIsImRhdGEiLCJfb3B0aW9ucyIsIm9uVXBkYXRlIiwiZGVjbCIsIl9vcHRpb25zMiIsInBhcmVudCIsInJ1bGUiLCJjbGFzc05hbWUiLCJyZWdpc3RlciIsInNwbGljZSIsInVucmVnaXN0ZXIiLCJzbGljZSIsImZvckVhY2giLCJvblByb2Nlc3NSdWxlIiwiY3NzUnVsZXMiLCJnZXRVbmVzY2FwZWRLZXlzTWFwIiwiY3NzUnVsZSIsIl9rZXkiLCJnZXRLZXkiLCJzdHIiLCJjc3MiLCJ0b1N0cmluZyIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIl9fd2VicGFja19leHBvcnRzX18iLCJfZXhhY3RQcm9wX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfZXhhY3RQcm9wX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsImEiLCJfZ2V0RGlzcGxheU5hbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9nZXREaXNwbGF5TmFtZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJfcG9ueWZpbGxHbG9iYWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9wb255ZmlsbEdsb2JhbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImJ5IiwicmVzdWx0IiwiZGVjbENvcHkiLCJfY2xvbmVTdHlsZTIiLCJvbkNyZWF0ZVJ1bGUiLCJpc0Jyb3dzZXIiLCJkb2N1bWVudCIsIm5vZGVUeXBlIiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsIiQkdHlwZW9mIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJmb3IiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImNsb25lIiwiZGVlcG1lcmdlIiwidmFsIiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJjb25jYXQiLCJlbGVtZW50IiwiYXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJkZXN0aW5hdGlvbiIsImtleXMiLCJtZXJnZU9iamVjdCIsImFsbCIsImFycmF5IiwiRXJyb3IiLCJyZWR1Y2UiLCJwcmV2IiwibmV4dCIsImRlZXBtZXJnZV8xIiwidXNlU291cmNlTWFwIiwibGlzdCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiaWQiLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwibWVkaWEiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJub25jZSIsIm5jIiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsImVsIiwic2V0QXR0cmlidXRlIiwidHJhbnNmb3JtIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJfdHlwZW9mMiIsIlJlZmVyZW5jZUVycm9yIiwiX29wdGlvbnMkaW5kZW50IiwiaW5kZW50IiwiZmFsbGJhY2tzIiwiZmFsbGJhY2siLCJpbmRlbnRTdHIiLCJfcHJvcCIsIl92YWx1ZSIsIl9wcm9wMiIsIl92YWx1ZTIiLCJfdG9Dc3NWYWx1ZSIsIl9TaGVldHNSZWdpc3RyeSIsIl9TaGVldHNSZWdpc3RyeTIiLCJfaXNJbkJyb3dzZXIiLCJqcyIsImpzQ3NzTWFwIiwiTW96IiwibXMiLCJPIiwiV2Via2l0IiwiY2FwaXRhbGl6ZSIsInN0cmluZyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiY29udGFpbnMiLCJmaW5kSW5kZXgiLCJmaW5kIiwiYXJyIiwicHJlZCIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsIl9sZW4iLCJmdW5jcyIsImFjYyIsImZ1bmMiLCJfbGVuMiIsImFyZ3MiLCJfa2V5MiIsImV2ZXJ5IiwicHJlZFR5cGUiLCJfUGFwZXIiLCJfQnV0dG9uIiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJzcGxpdCIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ0b09iamVjdCIsInNwZWNpYWxQcm9wZXJ0eSIsImdldEZ1bmN0aW9uTmFtZSIsImZuTmFtZU1hdGNoUmVnZXgiLCJtYXRjaCIsIk1hdGgiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0cyIsIlNoZWV0c01hbmFnZXIiLCJTaGVldHNSZWdpc3RyeSIsInRvQ3NzVmFsdWUiLCJnZXREeW5hbWljU3R5bGVzIiwiX2dldER5bmFtaWNTdHlsZXMiLCJfU2hlZXRzTWFuYWdlciIsIl9SdWxlTGlzdCIsIl9zaGVldHMiLCJfSnNzMiIsInJlZ2lzdHJ5IiwiX3N5bWJvbE9ic2VydmFibGUiLCJfc3ltYm9sT2JzZXJ2YWJsZTIiLCJydWxlcyIsIl9tb2R1bGVJZDIiLCJydWxlQ291bnRlciIsInByZWZpeCIsImpzc0lkIiwiX1J1bGVMaXN0MiIsIlN0eWxlU2hlZXQiLCJfbmFtZSIsImRlcGxveWVkIiwibGlua2VkIiwicHJvY2VzcyIsImRlcGxveSIsInF1ZXVlIiwiaW5zZXJ0UnVsZSIsImFkZGVkIiwiX25hbWUyIiwiYWRkUnVsZSIsImRlbGV0ZVJ1bGUiLCJnZXRSdWxlcyIsImNvbnZlcnRIZXhUb1JHQiIsInJnYlRvSGV4IiwiY29sb3IiLCJ2YWx1ZXMiLCJkZWNvbXBvc2VDb2xvciIsImhleCIsInJlY29tcG9zZUNvbG9yIiwiZ2V0Q29udHJhc3RSYXRpbyIsImZvcmVncm91bmQiLCJiYWNrZ3JvdW5kIiwibHVtQSIsImdldEx1bWluYW5jZSIsImx1bUIiLCJtYXgiLCJtaW4iLCJlbXBoYXNpemUiLCJjb2VmZmljaWVudCIsImRhcmtlbiIsImxpZ2h0ZW4iLCJmYWRlIiwiY2xhbXAiLCJzdWJzdHIiLCJyZSIsIlJlZ0V4cCIsImNvbG9ycyIsInBhcnNlSW50IiwibWFya2VyIiwic3Vic3RyaW5nIiwicGFyc2VGbG9hdCIsImRlY29tcG9zZWRDb2xvciIsInJnYiIsInBvdyIsIk51bWJlciIsInRvRml4ZWQiLCJwcm9wVHlwZTEiLCJwcm9wVHlwZTIiLCJrZXlDb2RlIiwic2VhcmNoSW5wdXQiLCJoYXNLZXlDb2RlIiwid2hpY2giLCJjaGFyQ29kZSIsIm5hbWVzIiwiZm91bmROYW1lZEtleSIsInNlYXJjaCIsImNvZGVzIiwidG9Mb3dlckNhc2UiLCJhbGlhc2VzIiwiY2hhckNvZGVBdCIsImlzRXZlbnRLZXkiLCJldmVudCIsIm5hbWVPckNvZGUiLCJjb2RlIiwiYmFja3NwYWNlIiwidGFiIiwiZW50ZXIiLCJzaGlmdCIsImN0cmwiLCJhbHQiLCJwYXVzZS9icmVhayIsImNhcHMgbG9jayIsImVzYyIsInNwYWNlIiwicGFnZSB1cCIsInBhZ2UgZG93biIsImVuZCIsImhvbWUiLCJsZWZ0IiwidXAiLCJyaWdodCIsImRvd24iLCJpbnNlcnQiLCJjb21tYW5kIiwibGVmdCBjb21tYW5kIiwicmlnaHQgY29tbWFuZCIsIm51bXBhZCAqIiwibnVtcGFkICsiLCJudW1wYWQgLSIsIm51bXBhZCAuIiwibnVtcGFkIC8iLCJudW0gbG9jayIsInNjcm9sbCBsb2NrIiwibXkgY29tcHV0ZXIiLCJteSBjYWxjdWxhdG9yIiwiOyIsIj0iLCIsIiwiLSIsIi4iLCIvIiwiYCIsIlsiLCJcXCIsIl0iLCInIiwid2luZG93cyIsIuKHpyIsIuKMpSIsIuKMgyIsIuKMmCIsImN0bCIsImNvbnRyb2wiLCJvcHRpb24iLCJwYXVzZSIsImJyZWFrIiwiY2FwcyIsInJldHVybiIsImVzY2FwZSIsInNwYyIsInNwYWNlYmFyIiwicGd1cCIsInBnZG4iLCJpbnMiLCJkZWwiLCJjbWQiLCJ0aXRsZSIsImFsaWFzIiwibm9kZSIsIm93bmVyRG9jdW1lbnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJzdGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJwcmV2U3RhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwibmV4dFN0YXRlIiwicHJldlByb3BzIiwiX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIiwiX19yZWFjdEludGVybmFsU25hcHNob3QiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInBvbHlmaWxsIiwiaXNSZWFjdENvbXBvbmVudCIsImZvdW5kV2lsbE1vdW50TmFtZSIsImZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUiLCJmb3VuZFdpbGxVcGRhdGVOYW1lIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnROYW1lIiwibmV3QXBpTmFtZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIm1heWJlU25hcHNob3QiLCJzbmFwc2hvdCIsIl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmciLCJfQXBwQmFyIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwicm9vdCIsIm9ic2VydmFibGUiLCJfVHlwb2dyYXBoeSIsImsiLCJxIiwidSIsInYiLCJ3IiwieCIsInkiLCJ6IiwiQSIsIkIiLCJDIiwiRCIsImIiLCJoIiwiZiIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsImFhIiwiRSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJGIiwiRyIsInVwZGF0ZXIiLCJIIiwiSSIsImZvcmNlVXBkYXRlIiwiSiIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSyIsImN1cnJlbnQiLCJjdXJyZW50RGlzcGF0Y2hlciIsIkwiLCJNIiwiX19zZWxmIiwiX19zb3VyY2UiLCJOIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJfb3duZXIiLCJQIiwiUSIsIlIiLCJwb3AiLCJrZXlQcmVmaXgiLCJjb3VudCIsIlMiLCJWIiwiVCIsIlUiLCJkb25lIiwiOiIsImNhIiwiZGEiLCJXIiwiYmEiLCJYIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsInJlbmRlciIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiY29tcGFyZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJ1bnN0YWJsZV9Db25jdXJyZW50TW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiWSIsIloiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwib25FcnJvciIsImthIiwibWEiLCJuYSIsIm9hIiwicGEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInFhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJyYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJzYSIsInRhIiwiZGVwZW5kZW5jaWVzIiwidWEiLCJ2YSIsIndhIiwieGEiLCJjdXJyZW50VGFyZ2V0IiwibGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkNhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJFYSIsIkZhIiwicmFuZG9tIiwiR2EiLCJIYSIsIklhIiwidGFnIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsImRpc3BhdGNoQ29uZmlnIiwiT2EiLCJfdGFyZ2V0SW5zdCIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJVYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlZhIiwiV2EiLCJYYSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJlYiIsImZiIiwiZ2IiLCJ0ZXh0Q29udGVudCIsImhiIiwiaWIiLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImtiIiwiZXZlbnRQb29sIiwibGIiLCJkZXN0cnVjdG9yIiwiamIiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwiZXh0ZW5kIiwibWIiLCJuYiIsIm9iIiwicGIiLCJxYiIsImRvY3VtZW50TW9kZSIsInJiIiwic2IiLCJ0YiIsInViIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInZiIiwid2IiLCJ4YiIsImRldGFpbCIsInliIiwiQmIiLCJsb2NhbGUiLCJ6YiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIkFiIiwiQ2IiLCJEYiIsIkViIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIlFiIiwibm9kZU5hbWUiLCJSYiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIlNiIiwiVGIiLCJWYiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWIiLCJXYiIsImNoZWNrZWQiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJvYyIsInBjIiwicWMiLCJyYyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJ2YyIsInhjIiwieWMiLCJ0YyIsImlzTmFOIiwidWMiLCJ0ZXN0Iiwic2MiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInpjIiwiQWMiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkJjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiYWN0aXZlRWxlbWVudCIsInRhYkluZGV4IiwiR2MiLCJjaGFuZ2UiLCJIYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiZGV0YWNoRXZlbnQiLCJRYyIsIlJjIiwiYXR0YWNoRXZlbnQiLCJTYyIsIlRjIiwiVWMiLCJWYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJXYyIsInZpZXciLCJYYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJZYyIsImdldE1vZGlmaWVyU3RhdGUiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiZGQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImVkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImdkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJoZCIsImpkIiwia2QiLCJlZmZlY3RUYWciLCJsZCIsIm5kIiwiY2hpbGQiLCJzaWJsaW5nIiwibWQiLCJvZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJwZCIsImNsaXBib2FyZERhdGEiLCJxZCIsInJkIiwic2QiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwidGQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwidWQiLCJsb2NhdGlvbiIsInJlcGVhdCIsInZkIiwiZGF0YVRyYW5zZmVyIiwid2QiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwieGQiLCJ5ZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiemQiLCJBZCIsIkJkIiwiQ2QiLCJpc0ludGVyYWN0aXZlIiwiRGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJFZCIsIkZkIiwiR2QiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkhkIiwiSWQiLCJKZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJLZCIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJib2R5IiwiUWQiLCJSZCIsIm9mZnNldCIsIlRkIiwiVWQiLCJjb250ZW50RWRpdGFibGUiLCJWZCIsIldkIiwic2VsZWN0IiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJiZSIsIm9uU2VsZWN0IiwiZWUiLCJkZSIsImZlIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGUiLCJpZSIsImplIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImtlIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsImxlIiwibWUiLCJuZSIsIm9lIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsInBlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwicWUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInNlIiwidHJpbSIsInRlIiwidWUiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2ZSIsIndlIiwiaXMiLCJ4ZSIsImJsdXIiLCJmb2N1cyIsInllIiwiemUiLCJBZSIsIkJlIiwiYXV0b0ZvY3VzIiwiQ2UiLCJfX2h0bWwiLCJEZSIsInNldFRpbWVvdXQiLCJFZSIsImNsZWFyVGltZW91dCIsIkZlIiwiR2UiLCJTZXQiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJNZSIsIk5lIiwiT2UiLCJQZSIsImdldENoaWxkQ29udGV4dCIsIlFlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIldlIiwiZWxlbWVudFR5cGUiLCJwZW5kaW5nUHJvcHMiLCJmaXJzdENvbnRleHREZXBlbmRlbmN5IiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJYZSIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiZWYiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImZmIiwiZ2YiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImhmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJsZiIsIm1mIiwicGF5bG9hZCIsImNhbGxiYWNrIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInZmIiwic3RhY2siLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwib2JzZXJ2ZWRCaXRzIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJKZiIsIktmIiwiTGYiLCJOZiIsIk9mIiwiUGYiLCJVZiIsIl9yZWFjdEludGVybmFsRmliZXIiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlZmIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiV2YiLCJjb250ZXh0VHlwZSIsInJlYWRDb250ZXh0IiwiWGYiLCJZZiIsImNvbXBvbmVudERpZE1vdW50IiwiWmYiLCIkZiIsIl9zdHJpbmdSZWYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIndnIiwicGVuZGluZ0NvbnRleHQiLCJ4ZyIsInRpbWVkT3V0QXQiLCJ5ZyIsInRoZW4iLCJNZiIsIlllIiwiaHlkcmF0ZSIsImhpZGRlbiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInpnIiwiQWciLCJCZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsImRlc3Ryb3kiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkxnIiwiTWciLCJOZyIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJvbmNsaWNrIiwiT2ciLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiZGlzcGxheSIsIlBnIiwiUWciLCJSZyIsImNvbXBvbmVudERpZENhdGNoIiwiU2ciLCJjb21wb25lbnRTdGFjayIsIlRnIiwib25DbGljayIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImVoIiwiY3JlYXRlRWxlbWVudE5TIiwiZmgiLCJnaCIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImhoIiwibWF4RHVyYXRpb24iLCJpaCIsImhhcyIsImZpbmlzaGVkV29yayIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJ1bnN0YWJsZV9ub3ciLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsIkZoIiwidGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJIaCIsIkloIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJKaCIsIktoIiwiTGgiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIl9vbkNvbXBsZXRlIiwiTWgiLCJmaXJzdEJhdGNoIiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwicmFuZ2VDb3VudCIsImRiIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIlRoIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJTZCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsIkZiIiwiR2IiLCJ3YyIsImNpIiwiQ2ciLCJEZyIsImRpIiwiSWMiLCJFZyIsImNlIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVmgiLCJfcm9vdCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsIldoIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsIlhoIiwiX2ludGVybmFsUm9vdCIsIlloIiwiJGgiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJaaCIsImFpIiwiVWgiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsImNvbW1pdCIsInVubW91bnQiLCJjcmVhdGVCYXRjaCIsImJpIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50cyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIlZlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImVpIiwiZmkiLCJnbG9iYWwiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInBlcmZvcm1hbmNlIiwiX3NjaGVkTW9jayIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsInNoaW0iLCJwcm9wTmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiaG1yIiwibG9jYWxzIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIl9jbGFzc25hbWVzIiwiX3dpdGhTdHlsZXMiLCJfaGVscGVycyIsImJhY2tncm91bmRDb2xvckRlZmF1bHQiLCJwYWxldHRlIiwiZ3JleSIsImZsZXhEaXJlY3Rpb24iLCJib3hTaXppbmciLCJhcHBCYXIiLCJwb3NpdGlvbkZpeGVkIiwicG9zaXRpb24iLCJwb3NpdGlvbkFic29sdXRlIiwicG9zaXRpb25TdGlja3kiLCJwb3NpdGlvblN0YXRpYyIsInBvc2l0aW9uUmVsYXRpdmUiLCJjb2xvckRlZmF1bHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJnZXRDb250cmFzdFRleHQiLCJjb2xvclByaW1hcnkiLCJwcmltYXJ5IiwibWFpbiIsImNvbnRyYXN0VGV4dCIsImNvbG9yU2Vjb25kYXJ5Iiwic2Vjb25kYXJ5IiwiQXBwQmFyIiwiX2NsYXNzTmFtZXMiLCJjbGFzc05hbWVQcm9wIiwic3F1YXJlIiwiY29tcG9uZW50IiwiZWxldmF0aW9uIiwic291cmNlS2V5cyIsIl9zZXRQcm90b3R5cGVPZiIsIlJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiZ2V0RGVmYXVsdFByb3BzIiwibWl4aW5zIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiVFlQRV9TVEFUSUNTIiwiRm9yd2FyZFJlZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJQcm9maWxlciIsIlBvcnRhbCIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNQcm9maWxlciIsImlzUG9ydGFsIiwiaXNTdHJpY3RNb2RlIiwiZXh0cmFjdGVkIiwiX3dhcm5pbmciLCJjbG9uZVN0eWxlIiwidHlwZU9mU3R5bGUiLCJfaXNPYnNlcnZhYmxlMiIsIm5ld1N0eWxlIiwiX2lzT2JzZXJ2YWJsZSIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJDU1MiLCJfaXNJbkJyb3dzZXIyIiwiX1N0eWxlU2hlZXQyIiwiX1BsdWdpbnNSZWdpc3RyeTIiLCJfcnVsZXMyIiwiX29ic2VydmFibGVzMiIsIl9mdW5jdGlvbnMyIiwiX3NoZWV0czIiLCJfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUyIiwiX2NyZWF0ZVJ1bGUzIiwiX0RvbVJlbmRlcmVyMiIsIl9WaXJ0dWFsUmVuZGVyZXIyIiwiZGVmYXVsdFBsdWdpbnMiLCJpbnN0YW5jZUNvdW50ZXIiLCJKc3MiLCJ1c2UiLCJzZXR1cCIsImluc2VydGlvblBvaW50IiwidmlydHVhbCIsIm9uUHJvY2Vzc1NoZWV0IiwicnVsZU9wdGlvbnMiLCJwbHVnaW4iLCJQbHVnaW5zUmVnaXN0cnkiLCJob29rcyIsIm9uUHJvY2Vzc1N0eWxlIiwibmV4dFN0eWxlIiwicHJvY2Vzc2VkVmFsdWUiLCJfU2ltcGxlUnVsZTIiLCJfS2V5ZnJhbWVzUnVsZTIiLCJfQ29uZGl0aW9uYWxSdWxlMiIsIl9Gb250RmFjZVJ1bGUyIiwiX1ZpZXdwb3J0UnVsZTIiLCJAY2hhcnNldCIsIkBpbXBvcnQiLCJAbmFtZXNwYWNlIiwiQGtleWZyYW1lcyIsIkBtZWRpYSIsIkBzdXBwb3J0cyIsIkBmb250LWZhY2UiLCJAdmlld3BvcnQiLCJALW1zLXZpZXdwb3J0IiwiUnVsZUNsYXNzIiwiU2ltcGxlUnVsZSIsIktleWZyYW1lc1J1bGUiLCJmcmFtZXMiLCJDb25kaXRpb25hbFJ1bGUiLCJfdG9Dc3MiLCJGb250RmFjZVJ1bGUiLCJWaWV3cG9ydFJ1bGUiLCJzdHlsZSQiLCJzdHlsZVJ1bGUiLCJfbG9vcCIsIm5leHRWYWx1ZSIsImZuVmFsdWVzTnMiLCJmblN0eWxlTnMiLCJmblN0eWxlIiwibWVtb2l6ZSIsImdldFByb3BlcnR5VmFsdWUiLCJtZXNzYWdlIiwiZXh0cmFjdEtleSIsIkNTU1J1bGVUeXBlcyIsImlzQXR0YWNoZWQiLCJnZXRIZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJmaW5kUHJldk5vZGUiLCJmaW5kSGlnaGVyU2hlZXQiLCJmaW5kSGlnaGVzdFNoZWV0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY29tbWVudCIsImZpbmRDb21tZW50Tm9kZSIsImdldEF0dHJpYnV0ZSIsIkRvbVJlbmRlcmVyIiwiaGFzSW5zZXJ0ZWRSdWxlcyIsIl9yZWYiLCJwcmV2Tm9kZSIsImluc2VydGlvblBvaW50RWxlbWVudCIsIl9wYXJlbnROb2RlIiwiaW5zZXJ0U3R5bGUiLCJfaW5kZXgiLCJuZXdDc3NSdWxlIiwiVmlydHVhbFJlbmRlcmVyIiwiX2pzc0dsb2JhbCIsIl9qc3NOZXN0ZWQiLCJfanNzQ2FtZWxDYXNlIiwiX2pzc0RlZmF1bHRVbml0IiwiX2pzc1ZlbmRvclByZWZpeGVyIiwiX2pzc1Byb3BzU29ydCIsInByb3BLZXkiLCJHbG9iYWxDb250YWluZXJSdWxlIiwicHJlZml4S2V5IiwiR2xvYmFsUHJlZml4ZWRSdWxlIiwiYWRkU2NvcGUiLCJoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlIiwiaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlIiwiY3JlYXRlUnVsZSIsInNlcGFyYXRvclJlZ0V4cCIsInNjb3BlIiwic2NvcGVkIiwiZ2V0UmVwbGFjZVJlZiIsImNvbnRhaW5lciIsImdldFJ1bGUiLCJoYXNBbmQiLCJyZXBsYWNlUGFyZW50UmVmcyIsIm5lc3RlZFByb3AiLCJwYXJlbnRQcm9wIiwicGFyZW50U2VsZWN0b3JzIiwibmVzdGVkU2VsZWN0b3JzIiwibmVzdGVkIiwicGFyZW50UmVnRXhwIiwiZ2V0T3B0aW9ucyIsIm5lc3RpbmdMZXZlbCIsInJlcGxhY2VSZWYiLCJpc05lc3RlZCIsImlzTmVzdGVkQ29uZGl0aW9uYWwiLCJyZWZSZWdFeHAiLCJjb252ZXJ0Q2FzZSIsImh5cGhlbmF0ZWRQcm9wIiwiX2h5cGhlbmF0ZVN0eWxlTmFtZTIiLCJfaHlwaGVuYXRlU3R5bGVOYW1lIiwiY29udmVydGVkIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsImNhY2hlIiwiY2FtZWxDYXNlZE9wdGlvbnMiLCJhZGRDYW1lbENhc2VkVmVyc2lvbiIsIml0ZXJhdGUiLCJfZGVmYXVsdFVuaXRzIiwicmVnRXhwIiwidW5pdHMiLCJjb252ZXJ0ZWRWYWx1ZSIsImlubmVyUHJvcCIsIl9pbm5lclByb3AiLCJhbmltYXRpb24tZGVsYXkiLCJhbmltYXRpb24tZHVyYXRpb24iLCJiYWNrZ3JvdW5kLXBvc2l0aW9uIiwiYmFja2dyb3VuZC1wb3NpdGlvbi14IiwiYmFja2dyb3VuZC1wb3NpdGlvbi15IiwiYmFja2dyb3VuZC1zaXplIiwiYm9yZGVyIiwiYm9yZGVyLWJvdHRvbSIsImJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMiLCJib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1cyIsImJvcmRlci1ib3R0b20td2lkdGgiLCJib3JkZXItbGVmdCIsImJvcmRlci1sZWZ0LXdpZHRoIiwiYm9yZGVyLXJhZGl1cyIsImJvcmRlci1yaWdodCIsImJvcmRlci1yaWdodC13aWR0aCIsImJvcmRlci1zcGFjaW5nIiwiYm9yZGVyLXRvcCIsImJvcmRlci10b3AtbGVmdC1yYWRpdXMiLCJib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyIsImJvcmRlci10b3Atd2lkdGgiLCJib3JkZXItd2lkdGgiLCJib3JkZXItYWZ0ZXItd2lkdGgiLCJib3JkZXItYmVmb3JlLXdpZHRoIiwiYm9yZGVyLWVuZC13aWR0aCIsImJvcmRlci1ob3Jpem9udGFsLXNwYWNpbmciLCJib3JkZXItc3RhcnQtd2lkdGgiLCJib3JkZXItdmVydGljYWwtc3BhY2luZyIsImJvdHRvbSIsImJveC1zaGFkb3ciLCJjb2x1bW4tZ2FwIiwiY29sdW1uLXJ1bGUiLCJjb2x1bW4tcnVsZS13aWR0aCIsImNvbHVtbi13aWR0aCIsImZsZXgtYmFzaXMiLCJmb250LXNpemUiLCJmb250LXNpemUtZGVsdGEiLCJsZXR0ZXItc3BhY2luZyIsImxvZ2ljYWwtaGVpZ2h0IiwibG9naWNhbC13aWR0aCIsIm1hcmdpbiIsIm1hcmdpbi1hZnRlciIsIm1hcmdpbi1iZWZvcmUiLCJtYXJnaW4tYm90dG9tIiwibWFyZ2luLWxlZnQiLCJtYXJnaW4tcmlnaHQiLCJtYXJnaW4tdG9wIiwibWF4LWhlaWdodCIsIm1heC13aWR0aCIsIm1hcmdpbi1lbmQiLCJtYXJnaW4tc3RhcnQiLCJtYXNrLXBvc2l0aW9uLXgiLCJtYXNrLXBvc2l0aW9uLXkiLCJtYXNrLXNpemUiLCJtYXgtbG9naWNhbC1oZWlnaHQiLCJtYXgtbG9naWNhbC13aWR0aCIsIm1pbi1oZWlnaHQiLCJtaW4td2lkdGgiLCJtaW4tbG9naWNhbC1oZWlnaHQiLCJtaW4tbG9naWNhbC13aWR0aCIsIm1vdGlvbiIsIm1vdGlvbi1vZmZzZXQiLCJvdXRsaW5lIiwib3V0bGluZS1vZmZzZXQiLCJvdXRsaW5lLXdpZHRoIiwicGFkZGluZyIsInBhZGRpbmctYm90dG9tIiwicGFkZGluZy1sZWZ0IiwicGFkZGluZy1yaWdodCIsInBhZGRpbmctdG9wIiwicGFkZGluZy1hZnRlciIsInBhZGRpbmctYmVmb3JlIiwicGFkZGluZy1lbmQiLCJwYWRkaW5nLXN0YXJ0IiwicGVyc3BlY3RpdmUtb3JpZ2luLXgiLCJwZXJzcGVjdGl2ZS1vcmlnaW4teSIsInBlcnNwZWN0aXZlIiwic2hhcGUtbWFyZ2luIiwic2l6ZSIsInRleHQtaW5kZW50IiwidGV4dC1zdHJva2UiLCJ0ZXh0LXN0cm9rZS13aWR0aCIsInRyYW5zZm9ybS1vcmlnaW4iLCJ0cmFuc2Zvcm0tb3JpZ2luLXgiLCJ0cmFuc2Zvcm0tb3JpZ2luLXkiLCJ0cmFuc2Zvcm0tb3JpZ2luLXoiLCJ0cmFuc2l0aW9uLWRlbGF5IiwidHJhbnNpdGlvbi1kdXJhdGlvbiIsInZlcnRpY2FsLWFsaWduIiwid29yZC1zcGFjaW5nIiwiYm94LXNoYWRvdy14IiwiYm94LXNoYWRvdy15IiwiYm94LXNoYWRvdy1ibHVyIiwiYm94LXNoYWRvdy1zcHJlYWQiLCJmb250LWxpbmUtaGVpZ2h0IiwidGV4dC1zaGFkb3cteCIsInRleHQtc2hhZG93LXkiLCJ0ZXh0LXNoYWRvdy1ibHVyIiwidmVuZG9yIiwiY2hhbmdlUHJvcCIsInN1cHBvcnRlZFByb3AiLCJzdXBwb3J0ZWRQcm9wZXJ0eSIsImNoYW5nZVZhbHVlIiwic3VwcG9ydGVkVmFsdWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9wcmVmaXgyIiwiX3N1cHBvcnRlZFByb3BlcnR5MiIsIl9zdXBwb3J0ZWRWYWx1ZTIiLCJfY2FtZWxpemUyIiwiY29tcHV0ZWQiLCJnZXRDb21wdXRlZFN0eWxlIiwidG9VcHBlciIsImNhY2hlS2V5Iiwic29ydCIsInByb3AwIiwicHJvcDEiLCJuZXh0Q2xhc3NlcyIsImtleTEiLCJrZXkyIiwic3ViQ2FjaGUiLCJfZGVlcG1lcmdlIiwiX2lzUGxhaW5PYmplY3QiLCJfY3JlYXRlQnJlYWtwb2ludHMiLCJfY3JlYXRlTWl4aW5zIiwiX2NyZWF0ZVBhbGV0dGUiLCJfY3JlYXRlVHlwb2dyYXBoeSIsIl9zaGFkb3dzIiwiX3NoYXBlIiwiX3NwYWNpbmciLCJfdHJhbnNpdGlvbnMiLCJfekluZGV4IiwiX29wdGlvbnMkYnJlYWtwb2ludHMiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJzaGFkb3dzSW5wdXQiLCJzaGFkb3dzIiwiX29wdGlvbnMkc3BhY2luZyIsInNwYWNpbmciLCJzcGFjaW5nSW5wdXQiLCJfb3B0aW9ucyR0eXBvZ3JhcGh5IiwidHlwb2dyYXBoeUlucHV0Iiwib3ZlcnJpZGVzIiwidHJhbnNpdGlvbnMiLCJpc09iamVjdCIsImlzT2JqZWN0T2JqZWN0IiwiY3RvciIsInByb3QiLCJfYnJlYWtwb2ludHMkdmFsdWVzIiwieHMiLCJzbSIsInhsIiwiX2JyZWFrcG9pbnRzJHVuaXQiLCJ1bml0IiwiX2JyZWFrcG9pbnRzJHN0ZXAiLCJzdGVwIiwiYmV0d2VlbiIsImVuZEluZGV4IiwidXBwZXJib3VuZCIsIl90b29sYmFyIiwiZ3V0dGVycyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwidG9vbGJhciIsIm1pbkhlaWdodCIsIl9wYWxldHRlJHByaW1hcnkiLCJsaWdodCIsIl9pbmRpZ28iLCJkYXJrIiwiX3BhbGV0dGUkc2Vjb25kYXJ5IiwiX3BpbmsiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJfcGFsZXR0ZSRlcnJvciIsIl9yZWQiLCJfcGFsZXR0ZSR0eXBlIiwiX3BhbGV0dGUkY29udHJhc3RUaHJlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJfcGFsZXR0ZSR0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0IiwiX2NvbG9yTWFuaXB1bGF0b3IiLCJhdWdtZW50Q29sb3IiLCJtYWluU2hhZGUiLCJsaWdodFNoYWRlIiwiZGFya1NoYWRlIiwiYWRkTGlnaHRPckRhcmsiLCJ0eXBlcyIsImNvbW1vbiIsIl9jb21tb24iLCJfZ3JleSIsImhpbnQiLCJkaXZpZGVyIiwicGFwZXIiLCJ3aGl0ZSIsImFjdGlvbiIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5IiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiaWNvbiIsImludGVudCIsInNoYWRlIiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJBMTAwIiwiYmxhY2siLCJfcmVmJGZvbnRGYW1pbHkiLCJmb250RmFtaWx5IiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJfcmVmJGZvbnRTaXplIiwiZm9udFNpemUiLCJfcmVmJGZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRMaWdodCIsIl9yZWYkZm9udFdlaWdodFJlZ3VsYSIsImZvbnRXZWlnaHRSZWd1bGFyIiwiX3JlZiRmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodE1lZGl1bSIsIl9yZWYkaHRtbEZvbnRTaXplIiwiaHRtbEZvbnRTaXplIiwiX3JlZiR1c2VOZXh0VmFyaWFudHMiLCJ1c2VOZXh0VmFyaWFudHMiLCJfX01VSV9VU0VfTkVYVF9UWVBPR1JBUEhZX1ZBUklBTlRTX18iLCJhbGxWYXJpYW50cyIsImNvZWYiLCJweFRvUmVtIiwiYnVpbGRWYXJpYW50IiwibGV0dGVyU3BhY2luZyIsImNhc2luZyIsInJvdW5kIiwibmV4dFZhcmlhbnRzIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTFOZXh0IiwiYm9keTJOZXh0IiwiYnV0dG9uTmV4dCIsImNhc2VBbGxDYXBzIiwiY2FwdGlvbk5leHQiLCJvdmVybGluZSIsIm9sZFZhcmlhbnRzIiwiZGlzcGxheTQiLCJtYXJnaW5MZWZ0IiwiZGlzcGxheTMiLCJkaXNwbGF5MiIsImRpc3BsYXkxIiwiaGVhZGxpbmUiLCJzdWJoZWFkaW5nIiwiYm9keTIiLCJib2R5MSIsImNhcHRpb24iLCJ0ZXh0VHJhbnNmb3JtIiwic2hhZG93S2V5VW1icmFPcGFjaXR5Iiwic2hhZG93S2V5UGVudW1icmFPcGFjaXR5Iiwic2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkiLCJjcmVhdGVTaGFkb3ciLCJib3JkZXJSYWRpdXMiLCJpc051bWJlciIsImlzU3RyaW5nIiwiZm9ybWF0TXMiLCJkdXJhdGlvbiIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsInNob3J0ZXN0Iiwic2hvcnRlciIsInNob3J0Iiwic3RhbmRhcmQiLCJjb21wbGV4IiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwibWlsbGlzZWNvbmRzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiZGVsYXkiLCJhbmltYXRlZFByb3AiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJjb25zdGFudCIsIm1vYmlsZVN0ZXBwZXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsIkNIQU5ORUwiLCJnZXRTdGF0ZSIsInN1YnNjcmlwdGlvbklkIiwiX29wdGlvbnMkZGFuZ2Vyb3VzbHlVIiwiZGFuZ2Vyb3VzbHlVc2VHbG9iYWxDU1MiLCJfb3B0aW9ucyRwcm9kdWN0aW9uUHIiLCJwcm9kdWN0aW9uUHJlZml4IiwiX29wdGlvbnMkc2VlZCIsInNlZWQiLCJzYWZlUHJlZml4IiwiZXNjYXBlUmVnZXgiLCJzdHlsZXNXaXRoT3ZlcnJpZGVzIiwicGFyYW1zIiwiZWxldmF0aW9ucyIsInNoYWRvdyIsImJveFNoYWRvdyIsInJvdW5kZWQiLCJQYXBlciIsInNyT25seSIsIm92ZXJmbG93IiwiYWxpZ25MZWZ0IiwidGV4dEFsaWduIiwiYWxpZ25DZW50ZXIiLCJhbGlnblJpZ2h0IiwiYWxpZ25KdXN0aWZ5Iiwibm9XcmFwIiwidGV4dE92ZXJmbG93Iiwid2hpdGVTcGFjZSIsImd1dHRlckJvdHRvbSIsIm1hcmdpbkJvdHRvbSIsInBhcmFncmFwaCIsImNvbG9ySW5oZXJpdCIsImNvbG9yVGV4dFByaW1hcnkiLCJjb2xvclRleHRTZWNvbmRhcnkiLCJjb2xvckVycm9yIiwiZGVmYXVsdEhlYWRsaW5lTWFwcGluZyIsIlR5cG9ncmFwaHkiLCJhbGlnbiIsImNvbXBvbmVudFByb3AiLCJoZWFkbGluZU1hcHBpbmciLCJpbnRlcm5hbERlcHJlY2F0ZWRWYXJpYW50IiwidmFyaWFudFByb3AiLCJ2YXJpYW50IiwiZ2V0VmFyaWFudCIsIl9CdXR0b25CYXNlIiwibWluV2lkdGgiLCImOmhvdmVyIiwidGV4dERlY29yYXRpb24iLCJAbWVkaWEgKGhvdmVyOiBub25lKSIsIiYkZGlzYWJsZWQiLCJsYWJlbCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInRleHRQcmltYXJ5IiwidGV4dFNlY29uZGFyeSIsImZsYXQiLCJmbGF0UHJpbWFyeSIsImZsYXRTZWNvbmRhcnkiLCJvdXRsaW5lZCIsIm91dGxpbmVkUHJpbWFyeSIsIm91dGxpbmVkU2Vjb25kYXJ5IiwiY29udGFpbmVkIiwiJiRmb2N1c1Zpc2libGUiLCImOmFjdGl2ZSIsImNvbnRhaW5lZFByaW1hcnkiLCJjb250YWluZWRTZWNvbmRhcnkiLCJyYWlzZWQiLCJyYWlzZWRQcmltYXJ5IiwicmFpc2VkU2Vjb25kYXJ5IiwiZmFiIiwiZXh0ZW5kZWRGYWIiLCJmb2N1c1Zpc2libGUiLCJtaW5pIiwic2l6ZVNtYWxsIiwic2l6ZUxhcmdlIiwiZnVsbFdpZHRoIiwiQnV0dG9uIiwiZGlzYWJsZUZvY3VzUmlwcGxlIiwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lIiwiZm9jdXNSaXBwbGUiLCJfZ2V0UHJvdG90eXBlT2YzIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZDIiLCJfcmVhY3REb20iLCJfa2V5Y29kZSIsIl9vd25lcldpbmRvdyIsIl9Ob1NzciIsIl9mb2N1c1Zpc2libGUiLCJfVG91Y2hSaXBwbGUiLCJfY3JlYXRlUmlwcGxlSGFuZGxlciIsIldlYmtpdFRhcEhpZ2hsaWdodENvbG9yIiwiY3Vyc29yIiwidXNlclNlbGVjdCIsInZlcnRpY2FsQWxpZ24iLCItbW96LWFwcGVhcmFuY2UiLCItd2Via2l0LWFwcGVhcmFuY2UiLCImOjotbW96LWZvY3VzLWlubmVyIiwiYm9yZGVyU3R5bGUiLCJwb2ludGVyRXZlbnRzIiwiQnV0dG9uQmFzZSIsImtleURvd24iLCJmb2N1c1Zpc2libGVDaGVja1RpbWUiLCJmb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzIiwiaGFuZGxlTW91c2VEb3duIiwiZm9jdXNWaXNpYmxlVGltZW91dCIsImhhbmRsZU1vdXNlVXAiLCJoYW5kbGVNb3VzZUxlYXZlIiwiaGFuZGxlVG91Y2hTdGFydCIsImhhbmRsZVRvdWNoRW5kIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlQmx1ciIsIm9uUmlwcGxlUmVmIiwicmlwcGxlIiwib25Gb2N1c1Zpc2libGVIYW5kbGVyIiwib25Gb2N1c1Zpc2libGUiLCJoYW5kbGVLZXlEb3duIiwib25LZXlEb3duIiwic3RvcCIsImhhbmRsZUtleVVwIiwicHVsc2F0ZSIsIm9uS2V5VXAiLCJoYW5kbGVGb2N1cyIsImRldGVjdEZvY3VzVmlzaWJsZSIsIm9uRm9jdXMiLCJsaXN0ZW5Gb3JGb2N1c0tleXMiLCJkaXNhYmxlUmlwcGxlIiwiX3RoaXMkcHJvcHMyIiwiYnV0dG9uUmVmIiwiY2VudGVyUmlwcGxlIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwib25CbHVyIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJUb3VjaFJpcHBsZVByb3BzIiwiQ29tcG9uZW50UHJvcCIsImJ1dHRvblByb3BzIiwicm9sZSIsImNlbnRlciIsImxhc3REaXNhYmxlZCIsIl9vd25lckRvY3VtZW50IiwiZG9jIiwicGFyZW50VmlldyIsIk5vU3NyIiwibW91bnRlZCIsImRlZmVyIiwiYXR0ZW1wdCIsInNoYWRvd1Jvb3QiLCJmaW5kQWN0aXZlRWxlbWVudCIsImludGVybmFsIiwiZm9jdXNLZXlQcmVzc2VkIiwid2luIiwiaGFuZGxlS2V5VXBFdmVudCIsImtleVVwRXZlbnRUaW1lb3V0IiwiRk9DVVNfS0VZUyIsImlzRm9jdXNLZXkiLCJERUxBWV9SSVBQTEUiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiX1RyYW5zaXRpb25Hcm91cCIsIl9SaXBwbGUiLCJEVVJBVElPTiIsInJpcHBsZVZpc2libGUiLCJyaXBwbGVQdWxzYXRlIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJjaGlsZExlYXZpbmciLCJjaGlsZFB1bHNhdGUiLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXIiLCIwJSIsIjEwMCUiLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZXhpdCIsIkBrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlIiwiNTAlIiwiVG91Y2hSaXBwbGUiLCJfUmVhY3QkUHVyZUNvbXBvbmVudCIsIm5leHRLZXkiLCJyaXBwbGVzIiwiX29wdGlvbnMkcHVsc2F0ZSIsIl9vcHRpb25zJGNlbnRlciIsIl9vcHRpb25zJGZha2VFbGVtZW50IiwiZmFrZUVsZW1lbnQiLCJpZ25vcmluZ01vdXNlRG93biIsInJpcHBsZVgiLCJyaXBwbGVZIiwicmlwcGxlU2l6ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzcXJ0Iiwic2l6ZVgiLCJhYnMiLCJjbGllbnRXaWR0aCIsInNpemVZIiwiY2xpZW50SGVpZ2h0Iiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwic3RhcnRUaW1lciIsImV4aXQiLCJhcnJheVdpdGhvdXRIb2xlcyIsIml0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwiYXJyMiIsIml0ZXIiLCJfcmVhY3RMaWZlY3ljbGVzQ29tcGF0IiwiX0NoaWxkTWFwcGluZyIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJUcmFuc2l0aW9uR3JvdXAiLCJoYW5kbGVFeGl0ZWQiLCJmaXJzdFJlbmRlciIsIl9wcm90byIsInRyYW5zaXRpb25Hcm91cCIsImlzTW91bnRpbmciLCJhcHBlYXJlZCIsInByZXZDaGlsZE1hcHBpbmciLCJnZXRJbml0aWFsQ2hpbGRNYXBwaW5nIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJnZXRDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsImNoaWxkRmFjdG9yeSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiYXBwZWFyIiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaW4iLCJnZXRQcm9wIiwibmV4dENoaWxkTWFwcGluZyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsInBlbmRpbmdOZXh0S2V5IiwiX1RyYW5zaXRpb24iLCJSaXBwbGUiLCJ2aXNpYmxlIiwibGVhdmluZyIsImhhbmRsZUVudGVyIiwiaGFuZGxlRXhpdCIsIl9jbGFzc05hbWVzMiIsIl90aGlzJHN0YXRlIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlU3R5bGVzIiwiY2hpbGRDbGFzc05hbWUiLCJvbkVudGVyIiwib25FeGl0IiwiRVhJVElORyIsIkVOVEVSRUQiLCJFTlRFUklORyIsIkVYSVRFRCIsIlVOTU9VTlRFRCIsImRlc2MiLCJUcmFuc2l0aW9uIiwiaW5pdGlhbFN0YXR1cyIsInBhcmVudEdyb3VwIiwiYXBwZWFyU3RhdHVzIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsInN0YXR1cyIsIm5leHRDYWxsYmFjayIsInVwZGF0ZVN0YXR1cyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJvbkVudGVyZWQiLCJfdGhpczMiLCJvbkV4aXRpbmciLCJjYW5jZWwiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJoYW5kbGVyIiwiYWRkRW5kTGlzdGVuZXIiLCJjaGlsZFByb3BzIiwibm9vcCIsInRyYW5zaXRpb25UaW1lb3V0IiwidHJhbnNpdGlvblR5cGUiLCJ0aW1lb3V0UHJvcE5hbWUiLCJlbmFibGVkUHJvcE5hbWUiLCJjbGFzc05hbWVzU2hhcGUiLCJ0aW1lb3V0c1NoYXBlIiwiZW50ZXJEb25lIiwiZW50ZXJBY3RpdmUiLCJleGl0RG9uZSIsImV4aXRBY3RpdmUiLCJjcmVhdGVSaXBwbGVIYW5kbGVyIiwiZXZlbnROYW1lIiwiaWdub3JlIiwiZ2V0UmFuZG9tSW5kZXgiLCJmbG9vciIsInNodWZmbGUiLCJyYW5kb21JbmRleCIsInRtcCIsImdlbmVyYXRlQ2FyZHMiLCJjYXJkcyIsImNhcmRWYWx1ZXMiLCJncm91cCIsIkhlYWRlciIsInJlYWN0X2RlZmF1bHQiLCJBcHBCYXJfZGVmYXVsdCIsIlR5cG9ncmFwaHlfZGVmYXVsdCIsIkJ1dHRvbl9kZWZhdWx0IiwiaGFuZGxlU2h1ZmZsZSIsImhhbmRsZURlYWxPbmVDYXJkIiwic3VpdHMiLCJoZWFydCIsInNwYWRlIiwiY2x1YiIsImRpYW1vbmQiLCJDYXJkIiwiY2FyZCIsIlBhcGVyX2RlZmF1bHQiLCJDYXJkQ29udGFpbmVyIiwiZGVhbE9uZUNhcmQiLCJjb21wb25lbnRzX0NhcmRfQ2FyZCIsIkFwcCIsInNodWZmbGVGb3JEZWFsT25lQ2FyZCIsIl9kZWFsT25lQ2FyZCIsInJlYWN0IiwiY29tcG9uZW50c19IZWFkZXJfSGVhZGVyIiwiY29tcG9uZW50c19DYXJkQ29udGFpbmVyX0NhcmRDb250YWluZXIiLCJSZWFjdERPTSIsInNyY19BcHAiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElB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bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTQ3KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBkZWZhdWx0OiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kczsiLCJ2YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IHJlcXVpcmUoXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBfX0RFVl9fID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuXG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkobnVsbCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTsiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc2hlZXRzTWFuYWdlciA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbnZhciBfanNzID0gcmVxdWlyZShcImpzc1wiKTtcblxudmFyIF9yZWFjdEpzc0NvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlYWN0SnNzQ29udGV4dFwiKSk7XG5cbnZhciBfanNzUHJlc2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9qc3NQcmVzZXRcIikpO1xuXG52YXIgX21lcmdlQ2xhc3NlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWVyZ2VDbGFzc2VzXCIpKTtcblxudmFyIF9tdWx0aUtleVN0b3JlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tdWx0aUtleVN0b3JlXCIpKTtcblxudmFyIF9jcmVhdGVNdWlUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlTXVpVGhlbWVcIikpO1xuXG52YXIgX3RoZW1lTGlzdGVuZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RoZW1lTGlzdGVuZXJcIikpO1xuXG52YXIgX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZVwiKSk7XG5cbnZhciBfZ2V0U3R5bGVzQ3JlYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0U3R5bGVzQ3JlYXRvclwiKSk7XG5cbnZhciBfZ2V0VGhlbWVQcm9wcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0VGhlbWVQcm9wc1wiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4vLyBEZWZhdWx0IEpTUyBpbnN0YW5jZS5cbnZhciBqc3MgPSAoMCwgX2pzcy5jcmVhdGUpKCgwLCBfanNzUHJlc2V0LmRlZmF1bHQpKCkpOyAvLyBVc2UgYSBzaW5nbGV0b24gb3IgdGhlIHByb3ZpZGVkIG9uZSBieSB0aGUgY29udGV4dC5cbi8vXG4vLyBUaGUgY291bnRlci1iYXNlZCBhcHByb2FjaCBkb2Vzbid0IHRvbGVyYXRlIGFueSBtaXN0YWtlLlxuLy8gSXQncyBtdWNoIHNhZmVyIHRvIHVzZSB0aGUgc2FtZSBjb3VudGVyIGV2ZXJ5d2hlcmUuXG5cbnZhciBnZW5lcmF0ZUNsYXNzTmFtZSA9ICgwLCBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuZGVmYXVsdCkoKTsgLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgYXQgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGRzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG5cbnZhciBpbmRleENvdW50ZXIgPSAtMTBlMTA7IC8vIEV4cG9ydGVkIGZvciB0ZXN0IHB1cnBvc2VzXG5cbnZhciBzaGVldHNNYW5hZ2VyID0gbmV3IE1hcCgpOyAvLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cblxuZXhwb3J0cy5zaGVldHNNYW5hZ2VyID0gc2hlZXRzTWFuYWdlcjtcbnZhciBub29wVGhlbWUgPSB7fTsgLy8gSW4gb3JkZXIgdG8gaGF2ZSBzZWxmLXN1cHBvcnRpbmcgY29tcG9uZW50cywgd2UgcmVseSBvbiBkZWZhdWx0IHRoZW1lIHdoZW4gbm90IHByb3ZpZGVkLlxuXG52YXIgZGVmYXVsdFRoZW1lO1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0VGhlbWUoKSB7XG4gIGlmIChkZWZhdWx0VGhlbWUpIHtcbiAgICByZXR1cm4gZGVmYXVsdFRoZW1lO1xuICB9XG5cbiAgZGVmYXVsdFRoZW1lID0gKDAsIF9jcmVhdGVNdWlUaGVtZS5kZWZhdWx0KSh7XG4gICAgdHlwb2dyYXBoeToge1xuICAgICAgc3VwcHJlc3NXYXJuaW5nOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlZmF1bHRUaGVtZTtcbn1cblxuX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX0RFRkFVTFRfVEhFTUVfXyA9IGdldERlZmF1bHRUaGVtZSgpOyAvLyBMaW5rIGEgc3R5bGUgc2hlZXQgd2l0aCBhIGNvbXBvbmVudC5cbi8vIEl0IGRvZXMgbm90IG1vZGlmeSB0aGUgY29tcG9uZW50IHBhc3NlZCB0byBpdDtcbi8vIGluc3RlYWQsIGl0IHJldHVybnMgYSBuZXcgY29tcG9uZW50LCB3aXRoIGEgYGNsYXNzZXNgIHByb3BlcnR5LlxuXG52YXIgd2l0aFN0eWxlc09sZCA9IGZ1bmN0aW9uIHdpdGhTdHlsZXNPbGQoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIF9vcHRpb25zJHdpdGhUaGVtZSA9IG9wdGlvbnMud2l0aFRoZW1lLFxuICAgICAgICB3aXRoVGhlbWUgPSBfb3B0aW9ucyR3aXRoVGhlbWUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aFRoZW1lLFxuICAgICAgICBfb3B0aW9ucyRmbGlwID0gb3B0aW9ucy5mbGlwLFxuICAgICAgICBmbGlwID0gX29wdGlvbnMkZmxpcCA9PT0gdm9pZCAwID8gbnVsbCA6IF9vcHRpb25zJGZsaXAsXG4gICAgICAgIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlU2hlZXRPcHRpb25zID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkob3B0aW9ucywgW1wid2l0aFRoZW1lXCIsIFwiZmxpcFwiLCBcIm5hbWVcIl0pO1xuICAgIHZhciBzdHlsZXNDcmVhdG9yID0gKDAsIF9nZXRTdHlsZXNDcmVhdG9yLmRlZmF1bHQpKHN0eWxlc09yQ3JlYXRvcik7XG4gICAgdmFyIGxpc3RlblRvVGhlbWUgPSBzdHlsZXNDcmVhdG9yLnRoZW1pbmdFbmFibGVkIHx8IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWU7XG4gICAgaW5kZXhDb3VudGVyICs9IDE7XG4gICAgc3R5bGVzQ3JlYXRvci5vcHRpb25zLmluZGV4ID0gaW5kZXhDb3VudGVyO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpbmRleENvdW50ZXIgPCAwLCBbJ01hdGVyaWFsLVVJOiB5b3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgaW5kZXhDb3VudGVyIGlzIG5vdCBzdXBwb3NlZCB0byBncm93IHRoYXQgbXVjaC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgV2l0aFN0eWxlcyA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShXaXRoU3R5bGVzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFN0eWxlcyhwcm9wcywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXM7XG5cbiAgICAgICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgV2l0aFN0eWxlcyk7XG4gICAgICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShXaXRoU3R5bGVzKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG4gICAgICAgIF90aGlzLmpzcyA9IGNvbnRleHRbX3JlYWN0SnNzQ29udGV4dC5kZWZhdWx0Lmpzc10gfHwganNzO1xuICAgICAgICBfdGhpcy5zaGVldHNNYW5hZ2VyID0gc2hlZXRzTWFuYWdlcjtcbiAgICAgICAgX3RoaXMudW5zdWJzY3JpYmVJZCA9IG51bGw7XG4gICAgICAgIHZhciBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucyA9IGNvbnRleHQubXVpVGhlbWVQcm92aWRlck9wdGlvbnM7XG5cbiAgICAgICAgaWYgKG11aVRoZW1lUHJvdmlkZXJPcHRpb25zKSB7XG4gICAgICAgICAgaWYgKG11aVRoZW1lUHJvdmlkZXJPcHRpb25zLnNoZWV0c01hbmFnZXIpIHtcbiAgICAgICAgICAgIF90aGlzLnNoZWV0c01hbmFnZXIgPSBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucy5zaGVldHNNYW5hZ2VyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLnNoZWV0c0NhY2hlID0gbXVpVGhlbWVQcm92aWRlck9wdGlvbnMuc2hlZXRzQ2FjaGU7XG4gICAgICAgICAgX3RoaXMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24gPSBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucy5kaXNhYmxlU3R5bGVzR2VuZXJhdGlvbjtcbiAgICAgICAgfSAvLyBBdHRhY2ggdGhlIHN0eWxlc0NyZWF0b3IgdG8gdGhlIGluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQgYXMgaW4gdGhlIGNvbnRleHRcbiAgICAgICAgLy8gb2YgcmVhY3QtaG90LWxvYWRlciB0aGUgaG9va3MgY2FuIGJlIGV4ZWN1dGVkIGluIGEgZGlmZmVyZW50IGNsb3N1cmUgY29udGV4dDpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dhZWFyb24vcmVhY3QtaG90LWxvYWRlci9ibG9iL21hc3Rlci9zcmMvcGF0Y2guZGV2LmpzI0wxMDdcblxuXG4gICAgICAgIF90aGlzLnN0eWxlc0NyZWF0b3JTYXZlZCA9IHN0eWxlc0NyZWF0b3I7XG4gICAgICAgIF90aGlzLnNoZWV0T3B0aW9ucyA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICAgIGdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZVxuICAgICAgICB9LCBjb250ZXh0W19yZWFjdEpzc0NvbnRleHQuZGVmYXVsdC5zaGVldE9wdGlvbnNdKTsgLy8gV2UgdXNlIHx8IGFzIHRoZSBmdW5jdGlvbiBjYWxsIGlzIGxhenkgZXZhbHVhdGVkLlxuXG4gICAgICAgIF90aGlzLnRoZW1lID0gbGlzdGVuVG9UaGVtZSA/IF90aGVtZUxpc3RlbmVyLmRlZmF1bHQuaW5pdGlhbChjb250ZXh0KSB8fCBnZXREZWZhdWx0VGhlbWUoKSA6IG5vb3BUaGVtZTtcblxuICAgICAgICBfdGhpcy5hdHRhY2goX3RoaXMudGhlbWUpO1xuXG4gICAgICAgIF90aGlzLmNhY2hlQ2xhc3NlcyA9IHtcbiAgICAgICAgICAvLyBDYWNoZSBmb3IgdGhlIGZpbmFsaXplZCBjbGFzc2VzIHZhbHVlLlxuICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIGNsYXNzZXMgcHJvcCBwb2ludGVyLlxuICAgICAgICAgIGxhc3RQcm9wOiBudWxsLFxuICAgICAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIHJlbmRlcmVkIGNsYXNzZXMgcG9pbnRlci5cbiAgICAgICAgICBsYXN0SlNTOiB7fVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFdpdGhTdHlsZXMsIFt7XG4gICAgICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICBpZiAoIWxpc3RlblRvVGhlbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlSWQgPSBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LnN1YnNjcmliZSh0aGlzLmNvbnRleHQsIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICAgICAgdmFyIG9sZFRoZW1lID0gX3RoaXMyLnRoZW1lO1xuICAgICAgICAgICAgX3RoaXMyLnRoZW1lID0gdGhlbWU7XG5cbiAgICAgICAgICAgIF90aGlzMi5hdHRhY2goX3RoaXMyLnRoZW1lKTsgLy8gUmVyZW5kZXIgdGhlIGNvbXBvbmVudCBzbyB0aGUgdW5kZXJseWluZyBjb21wb25lbnQgZ2V0cyB0aGUgdGhlbWUgdXBkYXRlLlxuICAgICAgICAgICAgLy8gQnkgdGhlbWUgdXBkYXRlIHdlIG1lYW4gcmVjZWl2aW5nIGFuZCBhcHBseWluZyB0aGUgbmV3IGNsYXNzIG5hbWVzLlxuXG5cbiAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7fSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczIuZGV0YWNoKG9sZFRoZW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgICAvLyByZWFjdC1ob3QtbG9hZGVyIHNwZWNpZmljIGxvZ2ljXG4gICAgICAgICAgaWYgKHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkID09PSBzdHlsZXNDcmVhdG9yIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmRldGFjaCh0aGlzLnRoZW1lKTtcbiAgICAgICAgICB0aGlzLnN0eWxlc0NyZWF0b3JTYXZlZCA9IHN0eWxlc0NyZWF0b3I7XG4gICAgICAgICAgdGhpcy5hdHRhY2godGhpcy50aGVtZSk7XG4gICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgICAgdGhpcy5kZXRhY2godGhpcy50aGVtZSk7XG5cbiAgICAgICAgICBpZiAodGhpcy51bnN1YnNjcmliZUlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LnVuc3Vic2NyaWJlKHRoaXMuY29udGV4dCwgdGhpcy51bnN1YnNjcmliZUlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldENsYXNzZXNcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENsYXNzZXMoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNsYXNzZXMgfHwge307XG4gICAgICAgICAgfSAvLyBUcmFja3MgaWYgZWl0aGVyIHRoZSByZW5kZXJlZCBjbGFzc2VzIG9yIGNsYXNzZXMgcHJvcCBoYXMgY2hhbmdlZCxcbiAgICAgICAgICAvLyByZXF1aXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgZmluYWxpemVkIGNsYXNzZXMgb2JqZWN0LlxuXG5cbiAgICAgICAgICB2YXIgZ2VuZXJhdGUgPSBmYWxzZTtcblxuICAgICAgICAgIHZhciBzaGVldE1hbmFnZXIgPSBfbXVsdGlLZXlTdG9yZS5kZWZhdWx0LmdldCh0aGlzLnNoZWV0c01hbmFnZXIsIHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkLCB0aGlzLnRoZW1lKTtcblxuICAgICAgICAgIGlmIChzaGVldE1hbmFnZXIuc2hlZXQuY2xhc3NlcyAhPT0gdGhpcy5jYWNoZUNsYXNzZXMubGFzdEpTUykge1xuICAgICAgICAgICAgdGhpcy5jYWNoZUNsYXNzZXMubGFzdEpTUyA9IHNoZWV0TWFuYWdlci5zaGVldC5jbGFzc2VzO1xuICAgICAgICAgICAgZ2VuZXJhdGUgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNsYXNzZXMgIT09IHRoaXMuY2FjaGVDbGFzc2VzLmxhc3RQcm9wKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlQ2xhc3Nlcy5sYXN0UHJvcCA9IHRoaXMucHJvcHMuY2xhc3NlcztcbiAgICAgICAgICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZ2VuZXJhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVDbGFzc2VzLnZhbHVlID0gKDAsIF9tZXJnZUNsYXNzZXMuZGVmYXVsdCkoe1xuICAgICAgICAgICAgICBiYXNlQ2xhc3NlczogdGhpcy5jYWNoZUNsYXNzZXMubGFzdEpTUyxcbiAgICAgICAgICAgICAgbmV3Q2xhc3NlczogdGhpcy5wcm9wcy5jbGFzc2VzLFxuICAgICAgICAgICAgICBDb21wb25lbnQ6IENvbXBvbmVudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVDbGFzc2VzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJhdHRhY2hcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaCh0aGVtZSkge1xuICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlc0NyZWF0b3JTYXZlZCA9IHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkO1xuXG4gICAgICAgICAgdmFyIHNoZWV0TWFuYWdlciA9IF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuZ2V0KHRoaXMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvclNhdmVkLCB0aGVtZSk7XG5cbiAgICAgICAgICBpZiAoIXNoZWV0TWFuYWdlcikge1xuICAgICAgICAgICAgc2hlZXRNYW5hZ2VyID0ge1xuICAgICAgICAgICAgICByZWZzOiAwLFxuICAgICAgICAgICAgICBzaGVldDogbnVsbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgX211bHRpS2V5U3RvcmUuZGVmYXVsdC5zZXQodGhpcy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yU2F2ZWQsIHRoZW1lLCBzaGVldE1hbmFnZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaGVldE1hbmFnZXIucmVmcyA9PT0gMCkge1xuICAgICAgICAgICAgdmFyIHNoZWV0O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zaGVldHNDYWNoZSkge1xuICAgICAgICAgICAgICBzaGVldCA9IF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuZ2V0KHRoaXMuc2hlZXRzQ2FjaGUsIHN0eWxlc0NyZWF0b3JTYXZlZCwgdGhlbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXNoZWV0KSB7XG4gICAgICAgICAgICAgIHNoZWV0ID0gdGhpcy5jcmVhdGVTaGVldCh0aGVtZSk7XG4gICAgICAgICAgICAgIHNoZWV0LmF0dGFjaCgpO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLnNoZWV0c0NhY2hlKSB7XG4gICAgICAgICAgICAgICAgX211bHRpS2V5U3RvcmUuZGVmYXVsdC5zZXQodGhpcy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvclNhdmVkLCB0aGVtZSwgc2hlZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNoZWV0TWFuYWdlci5zaGVldCA9IHNoZWV0O1xuICAgICAgICAgICAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gdGhpcy5jb250ZXh0W19yZWFjdEpzc0NvbnRleHQuZGVmYXVsdC5zaGVldHNSZWdpc3RyeV07XG5cbiAgICAgICAgICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgICAgICAgICBzaGVldHNSZWdpc3RyeS5hZGQoc2hlZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNoZWV0TWFuYWdlci5yZWZzICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNyZWF0ZVNoZWV0XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVTaGVldCh0aGVtZSkge1xuICAgICAgICAgIHZhciBzdHlsZXMgPSB0aGlzLnN0eWxlc0NyZWF0b3JTYXZlZC5jcmVhdGUodGhlbWUsIG5hbWUpO1xuICAgICAgICAgIHZhciBtZXRhID0gbmFtZTtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFtZXRhKSB7XG4gICAgICAgICAgICAvLyBQcm92aWRlIGEgYmV0dGVyIERYIG91dHNpZGUgcHJvZHVjdGlvbi5cbiAgICAgICAgICAgIG1ldGEgPSAoMCwgX3V0aWxzLmdldERpc3BsYXlOYW1lKShDb21wb25lbnQpO1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJywgWydNYXRlcmlhbC1VSTogdGhlIGNvbXBvbmVudCBkaXNwbGF5TmFtZSBpcyBpbnZhbGlkLiBJdCBuZWVkcyB0byBiZSBhIHN0cmluZy4nLCBcIlBsZWFzZSBmaXggdGhlIGZvbGxvd2luZyBjb21wb25lbnQ6IFwiLmNvbmNhdChDb21wb25lbnQsIFwiLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzaGVldCA9IHRoaXMuanNzLmNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgICAgICAgIG1ldGE6IG1ldGEsXG4gICAgICAgICAgICBjbGFzc05hbWVQcmVmaXg6IG1ldGEsXG4gICAgICAgICAgICBmbGlwOiB0eXBlb2YgZmxpcCA9PT0gJ2Jvb2xlYW4nID8gZmxpcCA6IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcsXG4gICAgICAgICAgICBsaW5rOiBmYWxzZVxuICAgICAgICAgIH0sIHRoaXMuc2hlZXRPcHRpb25zLCB0aGlzLnN0eWxlc0NyZWF0b3JTYXZlZC5vcHRpb25zLCB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZVxuICAgICAgICAgIH0sIHN0eWxlU2hlZXRPcHRpb25zKSk7XG4gICAgICAgICAgcmV0dXJuIHNoZWV0O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJkZXRhY2hcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCh0aGVtZSkge1xuICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNoZWV0TWFuYWdlciA9IF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuZ2V0KHRoaXMuc2hlZXRzTWFuYWdlciwgdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQsIHRoZW1lKTtcblxuICAgICAgICAgIHNoZWV0TWFuYWdlci5yZWZzIC09IDE7XG5cbiAgICAgICAgICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICAgICAgICAgIF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuZGVsZXRlKHRoaXMuc2hlZXRzTWFuYWdlciwgdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQsIHRoZW1lKTtcblxuICAgICAgICAgICAgdGhpcy5qc3MucmVtb3ZlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuc2hlZXQpO1xuICAgICAgICAgICAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gdGhpcy5jb250ZXh0W19yZWFjdEpzc0NvbnRleHQuZGVmYXVsdC5zaGVldHNSZWdpc3RyeV07XG5cbiAgICAgICAgICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgICAgICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyLnNoZWV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wcy5jbGFzc2VzLFxuICAgICAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiaW5uZXJSZWZcIl0pO1xuICAgICAgICAgIHZhciBtb3JlID0gKDAsIF9nZXRUaGVtZVByb3BzLmRlZmF1bHQpKHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGlzLnRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pOyAvLyBQcm92aWRlIHRoZSB0aGVtZSB0byB0aGUgd3JhcHBlZCBjb21wb25lbnQuXG4gICAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuICAgICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICAgIG1vcmUudGhlbWUgPSB0aGlzLnRoZW1lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgbW9yZSwge1xuICAgICAgICAgICAgY2xhc3NlczogdGhpcy5nZXRDbGFzc2VzKCksXG4gICAgICAgICAgICByZWY6IGlubmVyUmVmXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XSk7XG4gICAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgICB9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgICBXaXRoU3R5bGVzLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgICAgICovXG4gICAgICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGRlY29yYXRlZCBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGlubmVyUmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pXG4gICAgfSA6IHt9O1xuICAgIFdpdGhTdHlsZXMuY29udGV4dFR5cGVzID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSgoX2V4dGVuZHMyID0ge1xuICAgICAgbXVpVGhlbWVQcm92aWRlck9wdGlvbnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RcbiAgICB9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfZXh0ZW5kczIsIF9yZWFjdEpzc0NvbnRleHQuZGVmYXVsdC5qc3MsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfZXh0ZW5kczIsIF9yZWFjdEpzc0NvbnRleHQuZGVmYXVsdC5zaGVldE9wdGlvbnMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfZXh0ZW5kczIsIF9yZWFjdEpzc0NvbnRleHQuZGVmYXVsdC5zaGVldHNSZWdpc3RyeSwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCksIF9leHRlbmRzMiksIGxpc3RlblRvVGhlbWUgPyBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LmNvbnRleHRUeXBlcyA6IHt9KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoU3R5bGVzLmRpc3BsYXlOYW1lID0gXCJXaXRoU3R5bGVzKFwiLmNvbmNhdCgoMCwgX3V0aWxzLmdldERpc3BsYXlOYW1lKShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgKDAsIF9ob2lzdE5vblJlYWN0U3RhdGljcy5kZWZhdWx0KShXaXRoU3R5bGVzLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEV4cG9zZWQgZm9yIHRlc3QgcHVycG9zZXMuXG4gICAgICBXaXRoU3R5bGVzLk5ha2VkID0gQ29tcG9uZW50O1xuICAgICAgV2l0aFN0eWxlcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuXG5pZiAoIV91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9TVFlMRVNfXykge1xuICBfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18gPSB7fTtcbn1cblxuaWYgKCFfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18ud2l0aFN0eWxlcykge1xuICBfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18ud2l0aFN0eWxlcyA9IHdpdGhTdHlsZXNPbGQ7XG59XG5cbnZhciBfZGVmYXVsdCA9IF91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9TVFlMRVNfXy53aXRoU3R5bGVzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX3RvQ3NzID0gcmVxdWlyZSgnLi4vdXRpbHMvdG9Dc3MnKTtcblxudmFyIF90b0NzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzcyk7XG5cbnZhciBfdG9Dc3NWYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3RvQ3NzVmFsdWUnKTtcblxudmFyIF90b0Nzc1ZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ3NzVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTdHlsZVJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAnc3R5bGUnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB2YXIgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBSZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXIsXG4gICAgICAgIHNlbGVjdG9yID0gb3B0aW9ucy5zZWxlY3RvcjtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzZWxlY3RvcikgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB0aGlzLnJlbmRlcmVyID0gc2hlZXQgPyBzaGVldC5yZW5kZXJlciA6IG5ldyBSZW5kZXJlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzZWxlY3RvciBzdHJpbmcuXG4gICAqIEF0dGVudGlvbjogdXNlIHRoaXMgd2l0aCBjYXV0aW9uLiBNb3N0IGJyb3dzZXJzIGRpZG4ndCBpbXBsZW1lbnRcbiAgICogc2VsZWN0b3JUZXh0IHNldHRlciwgc28gdGhpcyBtYXkgcmVzdWx0IGluIHJlcmVuZGVyaW5nIG9mIGVudGlyZSBTdHlsZSBTaGVldC5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoU3R5bGVSdWxlLCBbe1xuICAgIGtleTogJ3Byb3AnLFxuXG5cbiAgICAvKipcbiAgICAgKiBHZXQgb3Igc2V0IGEgc3R5bGUgcHJvcGVydHkuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb3AobmFtZSwgdmFsdWUpIHtcbiAgICAgIC8vIEl0J3MgYSBnZXR0ZXIuXG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07XG5cbiAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG4gICAgICBpZiAodGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuXG4gICAgICB2YWx1ZSA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vbkNoYW5nZVZhbHVlKHZhbHVlLCBuYW1lLCB0aGlzKTtcblxuICAgICAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZTtcbiAgICAgIHZhciBpc0RlZmluZWQgPSBuYW1lIGluIHRoaXMuc3R5bGU7XG5cbiAgICAgIC8vIFZhbHVlIGlzIGVtcHR5IGFuZCB3YXNuJ3QgZGVmaW5lZCBiZWZvcmUuXG4gICAgICBpZiAoaXNFbXB0eSAmJiAhaXNEZWZpbmVkKSByZXR1cm4gdGhpcztcblxuICAgICAgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuICAgICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuXG4gICAgICBpZiAocmVtb3ZlKSBkZWxldGUgdGhpcy5zdHlsZVtuYW1lXTtlbHNlIHRoaXMuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcblxuICAgICAgLy8gUmVuZGVyYWJsZSBpcyBkZWZpbmVkIGlmIFN0eWxlU2hlZXQgb3B0aW9uIGBsaW5rYCBpcyB0cnVlLlxuICAgICAgaWYgKHRoaXMucmVuZGVyYWJsZSkge1xuICAgICAgICBpZiAocmVtb3ZlKSB0aGlzLnJlbmRlcmVyLnJlbW92ZVByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSk7ZWxzZSB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuXG4gICAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1J1bGUgaXMgbm90IGxpbmtlZC4gTWlzc2luZyBzaGVldCBvcHRpb24gXCJsaW5rOiB0cnVlXCIuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSBydWxlIHRvIGFuIGVsZW1lbnQgaW5saW5lLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseVRvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlUbyhyZW5kZXJhYmxlKSB7XG4gICAgICB2YXIganNvbiA9IHRoaXMudG9KU09OKCk7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIGpzb24pIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShyZW5kZXJhYmxlLCBwcm9wLCBqc29uW3Byb3BdKTtcbiAgICAgIH1yZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAgICogRmFsbGJhY2tzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgICAqIFVzZWZ1bCBmb3IgaW5saW5lIHN0eWxlcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9KU09OJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgdmFyIGpzb24gPSB7fTtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnN0eWxlW3Byb3BdO1xuICAgICAgICBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSAhPT0gJ29iamVjdCcpIGpzb25bcHJvcF0gPSB2YWx1ZTtlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkganNvbltwcm9wXSA9ICgwLCBfdG9Dc3NWYWx1ZTJbJ2RlZmF1bHQnXSkodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcbiAgICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7IGFsbG93RW1wdHk6IHRydWUgfSkgOiBvcHRpb25zO1xuICAgICAgcmV0dXJuICgwLCBfdG9Dc3MyWydkZWZhdWx0J10pKHRoaXMuc2VsZWN0b3IsIHRoaXMuc3R5bGUsIG9wdHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlbGVjdG9yJyxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuXG4gICAgICB0aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuXG4gICAgICBpZiAoIXRoaXMucmVuZGVyYWJsZSkgcmV0dXJuO1xuXG4gICAgICB2YXIgaGFzQ2hhbmdlZCA9IHRoaXMucmVuZGVyZXIuc2V0U2VsZWN0b3IodGhpcy5yZW5kZXJhYmxlLCBzZWxlY3Rvcik7XG5cbiAgICAgIC8vIElmIHNlbGVjdG9yIHNldHRlciBpcyBub3QgaW1wbGVtZW50ZWQsIHJlcmVuZGVyIHRoZSBydWxlLlxuICAgICAgaWYgKCFoYXNDaGFuZ2VkICYmIHRoaXMucmVuZGVyYWJsZSkge1xuICAgICAgICB2YXIgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyZXIucmVwbGFjZVJ1bGUodGhpcy5yZW5kZXJhYmxlLCB0aGlzKTtcbiAgICAgICAgaWYgKHJlbmRlcmFibGUpIHRoaXMucmVuZGVyYWJsZSA9IHJlbmRlcmFibGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICAgKi9cbiAgICAsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3RvclRleHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0eWxlUnVsZTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU3R5bGVSdWxlOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47IiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mOyIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9jcmVhdGVSdWxlID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVSdWxlJyk7XG5cbnZhciBfY3JlYXRlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSdWxlKTtcblxudmFyIF9saW5rUnVsZSA9IHJlcXVpcmUoJy4vdXRpbHMvbGlua1J1bGUnKTtcblxudmFyIF9saW5rUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saW5rUnVsZSk7XG5cbnZhciBfU3R5bGVSdWxlID0gcmVxdWlyZSgnLi9ydWxlcy9TdHlsZVJ1bGUnKTtcblxudmFyIF9TdHlsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVSdWxlKTtcblxudmFyIF9lc2NhcGUgPSByZXF1aXJlKCcuL3V0aWxzL2VzY2FwZScpO1xuXG52YXIgX2VzY2FwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lc2NhcGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogQ29udGFpbnMgcnVsZXMgb2JqZWN0cyBhbmQgYWxsb3dzIGFkZGluZy9yZW1vdmluZyBldGMuXG4gKiBJcyB1c2VkIGZvciBlLmcuIGJ5IGBTdHlsZVNoZWV0YCBvciBgQ29uZGl0aW9uYWxSdWxlYC5cbiAqL1xudmFyIFJ1bGVMaXN0ID0gZnVuY3Rpb24gKCkge1xuXG4gIC8vIE9yaWdpbmFsIHN0eWxlcyBvYmplY3QuXG4gIGZ1bmN0aW9uIFJ1bGVMaXN0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJ1bGVMaXN0KTtcblxuICAgIHRoaXMubWFwID0ge307XG4gICAgdGhpcy5yYXcgPSB7fTtcbiAgICB0aGlzLmluZGV4ID0gW107XG5cbiAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gICAgICB2YXIgX29wdGlvbnMgPSBfdGhpcy5vcHRpb25zLFxuICAgICAgICAgIHBsdWdpbnMgPSBfb3B0aW9ucy5qc3MucGx1Z2lucyxcbiAgICAgICAgICBzaGVldCA9IF9vcHRpb25zLnNoZWV0O1xuXG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBsdWdpbnMub25VcGRhdGUoZGF0YSwgX3RoaXMuZ2V0KG5hbWUpLCBzaGVldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgX3RoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgcGx1Z2lucy5vblVwZGF0ZShuYW1lLCBfdGhpcy5pbmRleFtpbmRleF0sIHNoZWV0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuY2xhc3NlcyA9IG9wdGlvbnMuY2xhc3NlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUuXG4gICAqXG4gICAqIFdpbGwgbm90IHJlbmRlciBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuXG5cbiAgLy8gVXNlZCB0byBlbnN1cmUgY29ycmVjdCBydWxlcyBvcmRlci5cblxuICAvLyBSdWxlcyByZWdpc3RyeSBmb3IgYWNjZXNzIGJ5IC5nZXQoKSBtZXRob2QuXG4gIC8vIEl0IGNvbnRhaW5zIHRoZSBzYW1lIHJ1bGUgcmVnaXN0ZXJlZCBieSBuYW1lIGFuZCBieSBzZWxlY3Rvci5cblxuXG4gIF9jcmVhdGVDbGFzcyhSdWxlTGlzdCwgW3tcbiAgICBrZXk6ICdhZGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgdmFyIF9vcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBwYXJlbnQgPSBfb3B0aW9uczIucGFyZW50LFxuICAgICAgICAgIHNoZWV0ID0gX29wdGlvbnMyLnNoZWV0LFxuICAgICAgICAgIGpzcyA9IF9vcHRpb25zMi5qc3MsXG4gICAgICAgICAgUmVuZGVyZXIgPSBfb3B0aW9uczIuUmVuZGVyZXIsXG4gICAgICAgICAgZ2VuZXJhdGVDbGFzc05hbWUgPSBfb3B0aW9uczIuZ2VuZXJhdGVDbGFzc05hbWU7XG5cblxuICAgICAgb3B0aW9ucyA9IF9leHRlbmRzKHtcbiAgICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgICBqc3M6IGpzcyxcbiAgICAgICAgUmVuZGVyZXI6IFJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUNsYXNzTmFtZTogZ2VuZXJhdGVDbGFzc05hbWVcbiAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoIW9wdGlvbnMuc2VsZWN0b3IgJiYgdGhpcy5jbGFzc2VzW25hbWVdKSB7XG4gICAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSAnLicgKyAoMCwgX2VzY2FwZTJbJ2RlZmF1bHQnXSkodGhpcy5jbGFzc2VzW25hbWVdKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yYXdbbmFtZV0gPSBkZWNsO1xuXG4gICAgICB2YXIgcnVsZSA9ICgwLCBfY3JlYXRlUnVsZTJbJ2RlZmF1bHQnXSkobmFtZSwgZGVjbCwgb3B0aW9ucyk7XG5cbiAgICAgIHZhciBjbGFzc05hbWUgPSB2b2lkIDA7XG5cbiAgICAgIGlmICghb3B0aW9ucy5zZWxlY3RvciAmJiBydWxlIGluc3RhbmNlb2YgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXSkge1xuICAgICAgICBjbGFzc05hbWUgPSBnZW5lcmF0ZUNsYXNzTmFtZShydWxlLCBzaGVldCk7XG4gICAgICAgIHJ1bGUuc2VsZWN0b3IgPSAnLicgKyAoMCwgX2VzY2FwZTJbJ2RlZmF1bHQnXSkoY2xhc3NOYW1lKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZWdpc3RlcihydWxlLCBjbGFzc05hbWUpO1xuXG4gICAgICB2YXIgaW5kZXggPSBvcHRpb25zLmluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLmluZGV4Lmxlbmd0aCA6IG9wdGlvbnMuaW5kZXg7XG4gICAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG5cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXBbbmFtZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKHJ1bGUpIHtcbiAgICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXhPZihydWxlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5kZXhPZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZXguaW5kZXhPZihydWxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwcm9jZXNzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICAgIHZhciBwbHVnaW5zID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zO1xuICAgICAgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgICAgLy8gd2UgZW5kIHVwIHdpdGggdmVyeSBoYXJkLXRvLXRyYWNrLWRvd24gc2lkZSBlZmZlY3RzLlxuXG4gICAgICB0aGlzLmluZGV4LnNsaWNlKDApLmZvckVhY2gocGx1Z2lucy5vblByb2Nlc3NSdWxlLCBwbHVnaW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgIGFuZCBgLmNsYXNzZXNgIG1hcHMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlZ2lzdGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXIocnVsZSwgY2xhc3NOYW1lKSB7XG4gICAgICB0aGlzLm1hcFtydWxlLmtleV0gPSBydWxlO1xuICAgICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSB7XG4gICAgICAgIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdID0gcnVsZTtcbiAgICAgICAgaWYgKGNsYXNzTmFtZSkgdGhpcy5jbGFzc2VzW3J1bGUua2V5XSA9IGNsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVyIGEgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndW5yZWdpc3RlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXIocnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMubWFwW3J1bGUua2V5XTtcbiAgICAgIGlmIChydWxlIGluc3RhbmNlb2YgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXSkge1xuICAgICAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl07XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGluaycsXG5cblxuICAgIC8qKlxuICAgICAqIExpbmsgcmVuZGVyYWJsZSBydWxlcyB3aXRoIENTU1J1bGVMaXN0LlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBsaW5rKGNzc1J1bGVzKSB7XG4gICAgICB2YXIgbWFwID0gdGhpcy5vcHRpb25zLnNoZWV0LnJlbmRlcmVyLmdldFVuZXNjYXBlZEtleXNNYXAodGhpcy5pbmRleCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3NzUnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNzc1J1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgICAgdmFyIF9rZXkgPSB0aGlzLm9wdGlvbnMuc2hlZXQucmVuZGVyZXIuZ2V0S2V5KGNzc1J1bGUpO1xuICAgICAgICBpZiAobWFwW19rZXldKSBfa2V5ID0gbWFwW19rZXldO1xuICAgICAgICB2YXIgcnVsZSA9IHRoaXMubWFwW19rZXldO1xuICAgICAgICBpZiAocnVsZSkgKDAsIF9saW5rUnVsZTJbJ2RlZmF1bHQnXSkocnVsZSwgY3NzUnVsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuXG4gICAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgcnVsZSA9IHRoaXMuaW5kZXhbaW5kZXhdO1xuICAgICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTtcblxuICAgICAgICAvLyBObyBuZWVkIHRvIHJlbmRlciBhbiBlbXB0eSBydWxlLlxuICAgICAgICBpZiAoIWNzcyAmJiAhbGluaykgY29udGludWU7XG5cbiAgICAgICAgaWYgKHN0cikgc3RyICs9ICdcXG4nO1xuICAgICAgICBzdHIgKz0gY3NzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSdWxlTGlzdDtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gUnVsZUxpc3Q7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyoqIEBsaWNlbnNlIE1hdGVyaWFsLVVJIHYzLjAuMC1hbHBoYS4wXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmV4cG9ydCB7IGRlZmF1bHQgYXMgZXhhY3RQcm9wIH0gZnJvbSAnLi9leGFjdFByb3AnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZXREaXNwbGF5TmFtZSB9IGZyb20gJy4vZ2V0RGlzcGxheU5hbWUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwb255ZmlsbEdsb2JhbCB9IGZyb20gJy4vcG9ueWZpbGxHbG9iYWwnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gdG9Dc3NWYWx1ZTtcbnZhciBqb2luID0gZnVuY3Rpb24gam9pbih2YWx1ZSwgYnkpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSB2YWx1ZXMgdG8gc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cbmZ1bmN0aW9uIHRvQ3NzVmFsdWUodmFsdWUpIHtcbiAgdmFyIGlnbm9yZUltcG9ydGFudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuXG4gIHZhciBjc3NWYWx1ZSA9ICcnO1xuXG4gIC8vIFN1cHBvcnQgc3BhY2Ugc2VwYXJhdGVkIHZhbHVlcyB2aWEgYFtbJzVweCcsICcxMHB4J11dYC5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgICAgaWYgKGNzc1ZhbHVlKSBjc3NWYWx1ZSArPSAnLCAnO1xuICAgICAgY3NzVmFsdWUgKz0gam9pbih2YWx1ZVtpXSwgJyAnKTtcbiAgICB9XG4gIH0gZWxzZSBjc3NWYWx1ZSA9IGpvaW4odmFsdWUsICcsICcpO1xuXG4gIC8vIEFkZCAhaW1wb3J0YW50LCBiZWNhdXNlIGl0IHdhcyBpZ25vcmVkLlxuICBpZiAoIWlnbm9yZUltcG9ydGFudCAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgY3NzVmFsdWUgKz0gJyAhaW1wb3J0YW50JztcbiAgfVxuXG4gIHJldHVybiBjc3NWYWx1ZTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVSdWxlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9TdHlsZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9TdHlsZVJ1bGUnKTtcblxudmFyIF9TdHlsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVSdWxlKTtcblxudmFyIF9jbG9uZVN0eWxlID0gcmVxdWlyZSgnLi4vdXRpbHMvY2xvbmVTdHlsZScpO1xuXG52YXIgX2Nsb25lU3R5bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xvbmVTdHlsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVSdWxlKCkge1xuICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3VubmFtZWQnO1xuICB2YXIgZGVjbCA9IGFyZ3VtZW50c1sxXTtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHNbMl07XG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcblxuICB2YXIgZGVjbENvcHkgPSAoMCwgX2Nsb25lU3R5bGUyWydkZWZhdWx0J10pKGRlY2wpO1xuXG4gIHZhciBydWxlID0ganNzLnBsdWdpbnMub25DcmVhdGVSdWxlKG5hbWUsIGRlY2xDb3B5LCBvcHRpb25zKTtcbiAgaWYgKHJ1bGUpIHJldHVybiBydWxlO1xuXG4gIC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cbiAgaWYgKG5hbWVbMF0gPT09ICdAJykge1xuICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoZmFsc2UsICdbSlNTXSBVbmtub3duIGF0LXJ1bGUgJXMnLCBuYW1lKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXShuYW1lLCBkZWNsQ29weSwgb3B0aW9ucyk7XG59IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yod2luZG93KSkgPT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmIGRvY3VtZW50Lm5vZGVUeXBlID09PSA5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Jyb3dzZXI7XG4iLCJ2YXIgaXNNZXJnZWFibGVPYmplY3QgPSBmdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKVxuXHRcdCYmICFpc1NwZWNpYWwodmFsdWUpXG59O1xuXG5mdW5jdGlvbiBpc05vbk51bGxPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1NwZWNpYWwodmFsdWUpIHtcblx0dmFyIHN0cmluZ1ZhbHVlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuXHRyZXR1cm4gc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG5cdFx0fHwgc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IERhdGVdJ1xuXHRcdHx8IGlzUmVhY3RFbGVtZW50KHZhbHVlKVxufVxuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjVhYzk2M2ZiNzkxZDEyOThlN2YzOTYyMzYzODNiYzk1NWY5MTZjMS9zcmMvaXNvbW9ycGhpYy9jbGFzc2ljL2VsZW1lbnQvUmVhY3RFbGVtZW50LmpzI0wyMS1MMjVcbnZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xuXG5mdW5jdGlvbiBpc1JlYWN0RWxlbWVudCh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodmFsdWUsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChvcHRpb25zLmNsb25lICE9PSBmYWxzZSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSlcblx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zKVxuXHRcdDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0cmV0dXJuIHRhcmdldC5jb25jYXQoc291cmNlKS5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChlbGVtZW50LCBvcHRpb25zKVxuXHR9KVxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0T2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdGlmICghb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblxuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5hcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdH1cblxuXHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdH0sIHt9KVxufTtcblxudmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5leHBvcnQgZGVmYXVsdCBkZWVwbWVyZ2VfMTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiAnQG1lZGlhICcgKyBpdGVtWzJdICsgJ3snICsgY29udGVudCArICd9JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSAnKCcgKyBpdGVtWzJdICsgJykgYW5kICgnICsgbWVkaWFRdWVyeSArICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJztcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcbiAgcmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCwgcGFyZW50KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUsIHRhcmdldCk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0aWYob3B0aW9ucy5hdHRycy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblx0XHRpZiAobm9uY2UpIHtcblx0XHRcdG9wdGlvbnMuYXR0cnMubm9uY2UgPSBub25jZTtcblx0XHR9XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXROb25jZSgpIHtcblx0aWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBfX3dlYnBhY2tfbm9uY2VfXztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YyKG9iaik7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiBfdHlwZW9mMihvYmopO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHRvQ3NzO1xuXG52YXIgX3RvQ3NzVmFsdWUgPSByZXF1aXJlKCcuL3RvQ3NzVmFsdWUnKTtcblxudmFyIF90b0Nzc1ZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ3NzVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuZnVuY3Rpb24gaW5kZW50U3RyKHN0ciwgaW5kZW50KSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGluZGVudDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCArPSAnICAnO1xuICB9cmV0dXJuIHJlc3VsdCArIHN0cjtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIFJ1bGUgdG8gQ1NTIHN0cmluZy5cbiAqL1xuXG5mdW5jdGlvbiB0b0NzcyhzZWxlY3Rvciwgc3R5bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gIHZhciByZXN1bHQgPSAnJztcblxuICBpZiAoIXN0eWxlKSByZXR1cm4gcmVzdWx0O1xuXG4gIHZhciBfb3B0aW9ucyRpbmRlbnQgPSBvcHRpb25zLmluZGVudCxcbiAgICAgIGluZGVudCA9IF9vcHRpb25zJGluZGVudCA9PT0gdW5kZWZpbmVkID8gMCA6IF9vcHRpb25zJGluZGVudDtcbiAgdmFyIGZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcztcblxuXG4gIGluZGVudCsrO1xuXG4gIC8vIEFwcGx5IGZhbGxiYWNrcyBmaXJzdC5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBmYWxsYmFjaykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGZhbGxiYWNrW3Byb3BdO1xuICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJ1xcbicgKyBpbmRlbnRTdHIocHJvcCArICc6ICcgKyAoMCwgX3RvQ3NzVmFsdWUyWydkZWZhdWx0J10pKHZhbHVlKSArICc7JywgaW5kZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0IHN5bnRheCB7ZmFsbGJhY2tzOiB7cHJvcDogdmFsdWV9fVxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZmFsbGJhY2tzKSB7XG4gICAgICAgIHZhciBfdmFsdWUgPSBmYWxsYmFja3NbX3Byb3BdO1xuICAgICAgICBpZiAoX3ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICByZXN1bHQgKz0gJ1xcbicgKyBpbmRlbnRTdHIoX3Byb3AgKyAnOiAnICsgKDAsIF90b0Nzc1ZhbHVlMlsnZGVmYXVsdCddKShfdmFsdWUpICsgJzsnLCBpbmRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgX3Byb3AyIGluIHN0eWxlKSB7XG4gICAgdmFyIF92YWx1ZTIgPSBzdHlsZVtfcHJvcDJdO1xuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgcmVzdWx0ICs9ICdcXG4nICsgaW5kZW50U3RyKF9wcm9wMiArICc6ICcgKyAoMCwgX3RvQ3NzVmFsdWUyWydkZWZhdWx0J10pKF92YWx1ZTIpICsgJzsnLCBpbmRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFsbG93IGVtcHR5IHN0eWxlIGluIHRoaXMgY2FzZSwgYmVjYXVzZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkZWQgZHluYW1pY2FsbHkuXG4gIGlmICghcmVzdWx0ICYmICFvcHRpb25zLmFsbG93RW1wdHkpIHJldHVybiByZXN1bHQ7XG5cbiAgaW5kZW50LS07XG4gIHJlc3VsdCA9IGluZGVudFN0cihzZWxlY3RvciArICcgeycgKyByZXN1bHQgKyAnXFxuJywgaW5kZW50KSArIGluZGVudFN0cignfScsIGluZGVudCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfU2hlZXRzUmVnaXN0cnkgPSByZXF1aXJlKCcuL1NoZWV0c1JlZ2lzdHJ5Jyk7XG5cbnZhciBfU2hlZXRzUmVnaXN0cnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2hlZXRzUmVnaXN0cnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogVGhpcyBpcyBhIGdsb2JhbCBzaGVldHMgcmVnaXN0cnkuIE9ubHkgRG9tUmVuZGVyZXIgd2lsbCBhZGQgc2hlZXRzIHRvIGl0LlxuICogT24gdGhlIHNlcnZlciBvbmUgc2hvdWxkIHVzZSBhbiBvd24gU2hlZXRzUmVnaXN0cnkgaW5zdGFuY2UgYW5kIGFkZCB0aGVcbiAqIHNoZWV0cyB0byBpdCwgYmVjYXVzZSB5b3UgbmVlZCB0byBtYWtlIHN1cmUgdG8gY3JlYXRlIGEgbmV3IHJlZ2lzdHJ5IGZvclxuICogZWFjaCByZXF1ZXN0IGluIG9yZGVyIHRvIG5vdCBsZWFrIHNoZWV0cyBhY3Jvc3MgcmVxdWVzdHMuXG4gKi9cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IG5ldyBfU2hlZXRzUmVnaXN0cnkyWydkZWZhdWx0J10oKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaXNJbkJyb3dzZXIgPSByZXF1aXJlKCdpcy1pbi1icm93c2VyJyk7XG5cbnZhciBfaXNJbkJyb3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbkJyb3dzZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBqcyA9ICcnOyAvKipcbiAgICAgICAgICAgICAgKiBFeHBvcnQgamF2YXNjcmlwdCBzdHlsZSBhbmQgY3NzIHN0eWxlIHZlbmRvciBwcmVmaXhlcy5cbiAgICAgICAgICAgICAgKiBCYXNlZCBvbiBcInRyYW5zZm9ybVwiIHN1cHBvcnQgdGVzdC5cbiAgICAgICAgICAgICAgKi9cblxudmFyIGNzcyA9ICcnO1xuXG4vLyBXZSBzaG91bGQgbm90IGRvIGFueXRoaW5nIGlmIHJlcXVpcmVkIHNlcnZlcnNpZGUuXG5pZiAoX2lzSW5Ccm93c2VyMlsnZGVmYXVsdCddKSB7XG4gIC8vIE9yZGVyIG1hdHRlcnMuIFdlIG5lZWQgdG8gY2hlY2sgV2Via2l0IHRoZSBsYXN0IG9uZSBiZWNhdXNlXG4gIC8vIG90aGVyIHZlbmRvcnMgdXNlIHRvIGFkZCBXZWJraXQgcHJlZml4ZXMgdG8gc29tZSBwcm9wZXJ0aWVzXG4gIHZhciBqc0Nzc01hcCA9IHtcbiAgICBNb3o6ICctbW96LScsXG4gICAgLy8gSUUgZGlkIGl0IHdyb25nIGFnYWluIC4uLlxuICAgIG1zOiAnLW1zLScsXG4gICAgTzogJy1vLScsXG4gICAgV2Via2l0OiAnLXdlYmtpdC0nXG4gIH07XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKS5zdHlsZTtcbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG5cbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICBqcyA9IGtleTtcbiAgICAgIGNzcyA9IGpzQ3NzTWFwW2tleV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAdHlwZSB7e2pzOiBTdHJpbmcsIGNzczogU3RyaW5nfX1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHsganM6IGpzLCBjc3M6IGNzcyB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG5leHBvcnRzLmNvbnRhaW5zID0gY29udGFpbnM7XG5leHBvcnRzLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5leHBvcnRzLmNyZWF0ZUNoYWluZWRGdW5jdGlvbiA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjtcblxudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxuLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBhIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBjYXBpdGFsaXplKHN0cmluZykgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC4nKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKG9iaiwgcHJlZCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJlZCkuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvYmpba2V5XSA9PT0gcHJlZFtrZXldO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJlZCkge1xuICB2YXIgcHJlZFR5cGUgPSAoMCwgX3R5cGVvZjIuZGVmYXVsdCkocHJlZCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAocHJlZFR5cGUgPT09ICdmdW5jdGlvbicgJiYgISFwcmVkKGFycltpXSwgaSwgYXJyKSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuXG4gICAgaWYgKHByZWRUeXBlID09PSAnb2JqZWN0JyAmJiBjb250YWlucyhhcnJbaV0sIHByZWQpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG5cbiAgICBpZiAoWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXS5pbmRleE9mKHByZWRUeXBlKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuaW5kZXhPZihwcmVkKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGZpbmQoYXJyLCBwcmVkKSB7XG4gIHZhciBpbmRleCA9IGZpbmRJbmRleChhcnIsIHByZWQpO1xuICByZXR1cm4gaW5kZXggPiAtMSA/IGFycltpbmRleF0gOiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvblxuICpcbiAqIFdpbGwgb25seSBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgbmVlZGVkLFxuICogb3RoZXJ3aXNlIHdpbGwgcGFzcyBiYWNrIGV4aXN0aW5nIGZ1bmN0aW9ucyBvciBudWxsLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9ucyB0byBjaGFpblxuICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZnVuYykge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nLCAnTWF0ZXJpYWwtVUk6IGludmFsaWQgQXJndW1lbnQgVHlwZSwgbXVzdCBvbmx5IHByb3ZpZGUgZnVuY3Rpb25zLCB1bmRlZmluZWQsIG9yIG51bGwuJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIGFjYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgZnVuY3Rpb24gKCkge30pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1BhcGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1BhcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QYXBlclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQnV0dG9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0J1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQnV0dG9uXCIpKTsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zcGVjaWFsUHJvcGVydHkgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG4vLyBUaGlzIG1vZHVsZSBpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL3Byb3AtdHlwZXMtZXhhY3QgcmVwb3NpdG9yeS5cbi8vIEhvd2V2ZXIsIGluIG9yZGVyIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIGRlcGVuZGVuY2llcyBhbmQgdG8gcmVtb3ZlIHNvbWUgZXh0cmEgc2FmZSBjaGVja3Ncbi8vIHRoZSBtb2R1bGUgd2FzIGZvcmtlZC5cbi8vIE9ubHkgZXhwb3J0ZWQgZm9yIHRlc3QgcHVycG9zZXMuXG52YXIgc3BlY2lhbFByb3BlcnR5ID0gXCJleGFjdC1wcm9wOiBcXHUyMDBCXCI7XG5leHBvcnRzLnNwZWNpYWxQcm9wZXJ0eSA9IHNwZWNpYWxQcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXhhY3RQcm9wKHByb3BUeXBlcykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gcHJvcFR5cGVzO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHByb3BUeXBlcywgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIHNwZWNpYWxQcm9wZXJ0eSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIHVuc3VwcG9ydGVkUHJvcHMgPSBPYmplY3Qua2V5cyhwcm9wcykuZmlsdGVyKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICByZXR1cm4gIXByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKTtcbiAgICB9KTtcblxuICAgIGlmICh1bnN1cHBvcnRlZFByb3BzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIG5vdCBzdXBwb3J0ZWQ6IFwiLmNvbmNhdCh1bnN1cHBvcnRlZFByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gXCJgXCIuY29uY2F0KHByb3AsIFwiYFwiKTtcbiAgICAgIH0pLmpvaW4oJywgJyksIFwiLiBQbGVhc2UgcmVtb3ZlIHRoZW0uXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSkpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBleGFjdFByb3A7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0RnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25OYW1lO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuLy8gRm9yayBvZiByZWNvbXBvc2UvZ2V0RGlzcGxheU5hbWUgd2l0aCBhZGRlZCBJRSAxMSBzdXBwb3J0XG4vLyBTaW1wbGlmaWVkIHBvbHlmaWxsIGZvciBJRSAxMSBzdXBwb3J0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vSmFtZXNNR3JlZW5lL0Z1bmN0aW9uLm5hbWUvYmxvYi81OGIzMTRkNGE5ODMxMTBjMzY4MmYxMjI4Zjg0NWQzOWNjY2ExODE3L0Z1bmN0aW9uLm5hbWUuanMjTDNcbnZhciBmbk5hbWVNYXRjaFJlZ2V4ID0gL15cXHMqZnVuY3Rpb24oPzpcXHN8XFxzKlxcL1xcKi4qXFwqXFwvXFxzKikrKFteKFxccy9dKilcXHMqLztcblxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGZuKSB7XG4gIHZhciBtYXRjaCA9IFwiXCIuY29uY2F0KGZuKS5tYXRjaChmbk5hbWVNYXRjaFJlZ2V4KTtcbiAgdmFyIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgcmV0dXJuIG5hbWUgfHwgJyc7XG59XG5cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgaWYgKCFDb21wb25lbnQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCBnZXRGdW5jdGlvbk5hbWUoQ29tcG9uZW50KSB8fCAnQ29tcG9uZW50Jztcbn1cblxudmFyIF9kZWZhdWx0ID0gZ2V0RGlzcGxheU5hbWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgX2RlZmF1bHQgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZSA9IGV4cG9ydHMuY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgPSBleHBvcnRzLnNoZWV0cyA9IGV4cG9ydHMuUnVsZUxpc3QgPSBleHBvcnRzLlNoZWV0c01hbmFnZXIgPSBleHBvcnRzLlNoZWV0c1JlZ2lzdHJ5ID0gZXhwb3J0cy50b0Nzc1ZhbHVlID0gZXhwb3J0cy5nZXREeW5hbWljU3R5bGVzID0gdW5kZWZpbmVkO1xuXG52YXIgX2dldER5bmFtaWNTdHlsZXMgPSByZXF1aXJlKCcuL3V0aWxzL2dldER5bmFtaWNTdHlsZXMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdnZXREeW5hbWljU3R5bGVzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0RHluYW1pY1N0eWxlcylbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfdG9Dc3NWYWx1ZSA9IHJlcXVpcmUoJy4vdXRpbHMvdG9Dc3NWYWx1ZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3RvQ3NzVmFsdWUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzc1ZhbHVlKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9TaGVldHNSZWdpc3RyeSA9IHJlcXVpcmUoJy4vU2hlZXRzUmVnaXN0cnknKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTaGVldHNSZWdpc3RyeScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NoZWV0c1JlZ2lzdHJ5KVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9TaGVldHNNYW5hZ2VyID0gcmVxdWlyZSgnLi9TaGVldHNNYW5hZ2VyJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU2hlZXRzTWFuYWdlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NoZWV0c01hbmFnZXIpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX1J1bGVMaXN0ID0gcmVxdWlyZSgnLi9SdWxlTGlzdCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1J1bGVMaXN0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVsZUxpc3QpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX3NoZWV0cyA9IHJlcXVpcmUoJy4vc2hlZXRzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc2hlZXRzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hlZXRzKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9Kc3MgPSByZXF1aXJlKCcuL0pzcycpO1xuXG52YXIgX0pzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Kc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cbnZhciBjcmVhdGUgPSBleHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgX0pzczJbJ2RlZmF1bHQnXShvcHRpb25zKTtcbn07XG5cbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGUoKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogU2hlZXRzIHJlZ2lzdHJ5IHRvIGFjY2VzcyB0aGVtIGFsbCBhdCBvbmUgcGxhY2UuXG4gKi9cbnZhciBTaGVldHNSZWdpc3RyeSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzUmVnaXN0cnkoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNoZWV0c1JlZ2lzdHJ5KTtcblxuICAgIHRoaXMucmVnaXN0cnkgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNSZWdpc3RyeSwgW3tcbiAgICBrZXk6ICdhZGQnLFxuXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoc2hlZXQpIHtcbiAgICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgICB2YXIgaW5kZXggPSBzaGVldC5vcHRpb25zLmluZGV4O1xuXG5cbiAgICAgIGlmIChyZWdpc3RyeS5pbmRleE9mKHNoZWV0KSAhPT0gLTEpIHJldHVybjtcblxuICAgICAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCB8fCBpbmRleCA+PSB0aGlzLmluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgYSBwb3NpdGlvbi5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlZ2lzdHJ5W2ldLm9wdGlvbnMuaW5kZXggPiBpbmRleCkge1xuICAgICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIHJlZ2lzdHJ5LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMucmVnaXN0cnkuaW5kZXhPZihzaGVldCk7XG4gICAgICB0aGlzLnJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5maWx0ZXIoZnVuY3Rpb24gKHNoZWV0KSB7XG4gICAgICAgIHJldHVybiBzaGVldC5hdHRhY2hlZDtcbiAgICAgIH0pLm1hcChmdW5jdGlvbiAoc2hlZXQpIHtcbiAgICAgICAgcmV0dXJuIHNoZWV0LnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5kZXgnLFxuXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2hlZXRzUmVnaXN0cnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3N5bWJvbE9ic2VydmFibGUgPSByZXF1aXJlKCdzeW1ib2wtb2JzZXJ2YWJsZScpO1xuXG52YXIgX3N5bWJvbE9ic2VydmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sT2JzZXJ2YWJsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB2YWx1ZVtfc3ltYm9sT2JzZXJ2YWJsZTJbJ2RlZmF1bHQnXV0gJiYgdmFsdWUgPT09IHZhbHVlW19zeW1ib2xPYnNlcnZhYmxlMlsnZGVmYXVsdCddXSgpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbGlua1J1bGU7XG4vKipcbiAqIExpbmsgcnVsZSB3aXRoIENTU1N0eWxlUnVsZSBhbmQgbmVzdGVkIHJ1bGVzIHdpdGggY29ycmVzcG9uZGluZyBuZXN0ZWQgY3NzUnVsZXMgaWYgYm90aCBleGlzdHMuXG4gKi9cbmZ1bmN0aW9uIGxpbmtSdWxlKHJ1bGUsIGNzc1J1bGUpIHtcbiAgcnVsZS5yZW5kZXJhYmxlID0gY3NzUnVsZTtcbiAgaWYgKHJ1bGUucnVsZXMgJiYgY3NzUnVsZS5jc3NSdWxlcykgcnVsZS5ydWxlcy5saW5rKGNzc1J1bGUuY3NzUnVsZXMpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfU3R5bGVTaGVldCA9IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQnKTtcblxudmFyIF9TdHlsZVNoZWV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlU2hlZXQpO1xuXG52YXIgX21vZHVsZUlkID0gcmVxdWlyZSgnLi9tb2R1bGVJZCcpO1xuXG52YXIgX21vZHVsZUlkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZUlkKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgbWF4UnVsZXMgPSAxZTEwO1xuXG5cbnZhciBlbnYgPSBwcm9jZXNzLmVudi5OT0RFX0VOVjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbiAqIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXRlZC5cbiAqIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4gKi9cblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuICB2YXIgZGVmYXVsdFByZWZpeCA9IGVudiA9PT0gJ3Byb2R1Y3Rpb24nID8gJ2MnIDogJyc7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzaGVldCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocnVsZUNvdW50ZXIgPiBtYXhSdWxlcykge1xuICAgICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1tKU1NdIFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuIFJ1bGUgY291bnRlciBpcyBhdCAlcy4nLCBydWxlQ291bnRlcik7XG4gICAgfVxuXG4gICAgdmFyIHByZWZpeCA9IGRlZmF1bHRQcmVmaXg7XG4gICAgdmFyIGpzc0lkID0gJyc7XG5cbiAgICBpZiAoc2hlZXQpIHtcbiAgICAgIHByZWZpeCA9IHNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4IHx8IGRlZmF1bHRQcmVmaXg7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5qc3MuaWQgIT0gbnVsbCkganNzSWQgKz0gc2hlZXQub3B0aW9ucy5qc3MuaWQ7XG4gICAgfVxuXG4gICAgaWYgKGVudiA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gJycgKyBwcmVmaXggKyBfbW9kdWxlSWQyWydkZWZhdWx0J10gKyBqc3NJZCArIHJ1bGVDb3VudGVyO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXggKyBydWxlLmtleSArICctJyArIF9tb2R1bGVJZDJbJ2RlZmF1bHQnXSArIChqc3NJZCAmJiAnLScgKyBqc3NJZCkgKyAnLScgKyBydWxlQ291bnRlcjtcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2xpbmtSdWxlID0gcmVxdWlyZSgnLi91dGlscy9saW5rUnVsZScpO1xuXG52YXIgX2xpbmtSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmtSdWxlKTtcblxudmFyIF9SdWxlTGlzdCA9IHJlcXVpcmUoJy4vUnVsZUxpc3QnKTtcblxudmFyIF9SdWxlTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SdWxlTGlzdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG52YXIgU3R5bGVTaGVldCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlU2hlZXQpO1xuXG4gICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAobmFtZSwgZGF0YSkge1xuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBfdGhpcy5ydWxlcy51cGRhdGUobmFtZSwgZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5ydWxlcy51cGRhdGUobmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfTtcblxuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5saW5rZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNsYXNzZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXNcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IG9wdGlvbnMuUmVuZGVyZXIodGhpcyk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBfUnVsZUxpc3QyWydkZWZhdWx0J10odGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9uYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQoX25hbWUsIHN0eWxlc1tfbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaCByZW5kZXJhYmxlIHRvIHRoZSByZW5kZXIgdHJlZS5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoU3R5bGVTaGVldCwgW3tcbiAgICBrZXk6ICdhdHRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgICBpZiAoIXRoaXMuZGVwbG95ZWQpIHRoaXMuZGVwbG95KCk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgICAgaWYgKCF0aGlzLmxpbmtlZCAmJiB0aGlzLm9wdGlvbnMubGluaykgdGhpcy5saW5rKCk7XG4gICAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSByZW5kZXJhYmxlIGZyb20gcmVuZGVyIHRyZWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RldGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgICB0aGlzLnJlbmRlcmVyLmRldGFjaCgpO1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgcnVsZSB0byB0aGUgY3VycmVudCBzdHlsZXNoZWV0LlxuICAgICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7XG5cbiAgICAgIC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAgIC8vIEluIG9yZGVyIHRvIHByZXNlcnZlIHRoZSByaWdodCBvcmRlciwgd2UgbmVlZCB0byBxdWV1ZSBhbGwgYC5hZGRSdWxlYCBjYWxscyxcbiAgICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcblxuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgICBpZiAoIXRoaXMuZGVwbG95ZWQpIHJldHVybiBydWxlO1xuICAgICAgICAvLyBEb24ndCBpbnNlcnQgcnVsZSBkaXJlY3RseSBpZiB0aGVyZSBpcyBubyBzdHJpbmdpZmllZCB2ZXJzaW9uIHlldC5cbiAgICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cbiAgICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcbiAgICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgICAgdGhpcy5xdWV1ZS5mb3JFYWNoKHRoaXMuaW5zZXJ0UnVsZSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAgIC8vIFdlIHdpbGwgcmVkZXBsb3kgdGhlIHNoZWV0IG9uY2UgdXNlciB3aWxsIGF0dGFjaCBpdC5cbiAgICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcblxuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgICB2YXIgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICAgIGlmIChyZW5kZXJhYmxlICYmIHRoaXMub3B0aW9ucy5saW5rKSAoMCwgX2xpbmtSdWxlMlsnZGVmYXVsdCddKShydWxlLCByZW5kZXJhYmxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIGFkZCBydWxlcy5cbiAgICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkUnVsZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBhZGRlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgX25hbWUyIGluIHN0eWxlcykge1xuICAgICAgICBhZGRlZC5wdXNoKHRoaXMuYWRkUnVsZShfbmFtZTIsIHN0eWxlc1tfbmFtZTJdLCBvcHRpb25zKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWRkZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgcnVsZSBieSBuYW1lLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgcnVsZSBieSBuYW1lLlxuICAgICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuXG4gICAgICBpZiAoIXJ1bGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgdGhpcy5ydWxlcy5yZW1vdmUocnVsZSk7XG5cbiAgICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luZGV4T2YnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVwbG95IHB1cmUgQ1NTIHN0cmluZyB0byBhIHJlbmRlcmFibGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlcGxveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuZGVwbG95KCk7XG4gICAgICB0aGlzLmRlcGxveWVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpbmsgcmVuZGVyYWJsZSBDU1MgcnVsZXMgZnJvbSBzaGVldCB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmcgbW9kZWxzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaW5rJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGluaygpIHtcbiAgICAgIHZhciBjc3NSdWxlcyA9IHRoaXMucmVuZGVyZXIuZ2V0UnVsZXMoKTtcblxuICAgICAgLy8gSXMgdW5kZWZpbmVkIHdoZW4gVmlydHVhbFJlbmRlcmVyIGlzIHVzZWQuXG4gICAgICBpZiAoY3NzUnVsZXMpIHRoaXMucnVsZXMubGluayhjc3NSdWxlcyk7XG4gICAgICB0aGlzLmxpbmtlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcblxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTdHlsZVNoZWV0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY29udmVydEhleFRvUkdCID0gY29udmVydEhleFRvUkdCO1xuZXhwb3J0cy5yZ2JUb0hleCA9IHJnYlRvSGV4O1xuZXhwb3J0cy5kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yO1xuZXhwb3J0cy5yZWNvbXBvc2VDb2xvciA9IHJlY29tcG9zZUNvbG9yO1xuZXhwb3J0cy5nZXRDb250cmFzdFJhdGlvID0gZ2V0Q29udHJhc3RSYXRpbztcbmV4cG9ydHMuZ2V0THVtaW5hbmNlID0gZ2V0THVtaW5hbmNlO1xuZXhwb3J0cy5lbXBoYXNpemUgPSBlbXBoYXNpemU7XG5leHBvcnRzLmZhZGUgPSBmYWRlO1xuZXhwb3J0cy5kYXJrZW4gPSBkYXJrZW47XG5leHBvcnRzLmxpZ2h0ZW4gPSBsaWdodGVuO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcbiAgdmFyIG1pbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHZhbHVlID49IG1pbiAmJiB2YWx1ZSA8PSBtYXgsIFwiTWF0ZXJpYWwtVUk6IHRoZSB2YWx1ZSBwcm92aWRlZCBcIi5jb25jYXQodmFsdWUsIFwiIGlzIG91dCBvZiByYW5nZSBbXCIpLmNvbmNhdChtaW4sIFwiLCBcIikuY29uY2F0KG1heCwgXCJdLlwiKSkgOiB2b2lkIDA7XG5cbiAgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuXG4gIGlmICh2YWx1ZSA+IG1heCkge1xuICAgIHJldHVybiBtYXg7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5mdW5jdGlvbiBjb252ZXJ0SGV4VG9SR0IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSk7XG4gIHZhciByZSA9IG5ldyBSZWdFeHAoXCIuezEsXCIuY29uY2F0KGNvbG9yLmxlbmd0aCAvIDMsIFwifVwiKSwgJ2cnKTtcbiAgdmFyIGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcblxuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gbiArIG47XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29sb3JzID8gXCJyZ2IoXCIuY29uY2F0KGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gcGFyc2VJbnQobiwgMTYpO1xuICB9KS5qb2luKCcsICcpLCBcIilcIikgOiAnJztcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5cblxuZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gUGFzcyBoZXggc3RyYWlnaHQgdGhyb3VnaFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50VG9IZXgoYykge1xuICAgIHZhciBoZXggPSBjLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IFwiMFwiLmNvbmNhdChoZXgpIDogaGV4O1xuICB9XG5cbiAgdmFyIF9kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKSxcbiAgICAgIHZhbHVlcyA9IF9kZWNvbXBvc2VDb2xvci52YWx1ZXM7XG5cbiAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBpbnRUb0hleChuKTtcbiAgfSk7XG4gIHJldHVybiBcIiNcIi5jb25jYXQodmFsdWVzLmpvaW4oJycpKTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cblxuXG5mdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoY29udmVydEhleFRvUkdCKGNvbG9yKSk7XG4gIH1cblxuICB2YXIgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICB2YXIgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChbJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJ10uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbXCJNYXRlcmlhbC1VSTogdW5zdXBwb3J0ZWQgYFwiLmNvbmNhdChjb2xvciwgXCJgIGNvbG9yLlwiKSwgJ1dlIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBmb3JtYXRzOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWVzOiB2YWx1ZXNcbiAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSdcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgcmV0dXJuIGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbjtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IFwiXCIuY29uY2F0KHZhbHVlc1sxXSwgXCIlXCIpO1xuICAgIHZhbHVlc1syXSA9IFwiXCIuY29uY2F0KHZhbHVlc1syXSwgXCIlXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KGNvbG9yLnR5cGUsIFwiKFwiKS5jb25jYXQodmFsdWVzLmpvaW4oJywgJyksIFwiKVwiKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICB2YXIgbHVtQSA9IGdldEx1bWluYW5jZShmb3JlZ3JvdW5kKTtcbiAgdmFyIGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgdmFyIGRlY29tcG9zZWRDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcblxuICBpZiAoZGVjb21wb3NlZENvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgdmFyIHJnYiA9IGRlY29tcG9zZWRDb2xvci52YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcblxuICAgICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgfSk7IC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG5cbiAgICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xuICB9IC8vIGVsc2UgaWYgKGRlY29tcG9zZWRDb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSlcblxuXG4gIHJldHVybiBkZWNvbXBvc2VkQ29sb3IudmFsdWVzWzJdIC8gMTAwO1xufVxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG91ciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuXG5mdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gZmFkZShjb2xvciwgdmFsdWUpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNvbG9yLCBcIk1hdGVyaWFsLVVJOiBtaXNzaW5nIGNvbG9yIGFyZ3VtZW50IGluIGZhZGUoXCIuY29uY2F0KGNvbG9yLCBcIiwgXCIpLmNvbmNhdCh2YWx1ZSwgXCIpLlwiKSkgOiB2b2lkIDA7XG4gIGlmICghY29sb3IpIHJldHVybiBjb2xvcjtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUpO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG5cbiAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5cbmZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNvbG9yLCBcIk1hdGVyaWFsLVVJOiBtaXNzaW5nIGNvbG9yIGFyZ3VtZW50IGluIGRhcmtlbihcIi5jb25jYXQoY29sb3IsIFwiLCBcIikuY29uY2F0KGNvZWZmaWNpZW50LCBcIikuXCIpKSA6IHZvaWQgMDtcbiAgaWYgKCFjb2xvcikgcmV0dXJuIGNvbG9yO1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuXG5mdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoY29sb3IsIFwiTWF0ZXJpYWwtVUk6IG1pc3NpbmcgY29sb3IgYXJndW1lbnQgaW4gbGlnaHRlbihcIi5jb25jYXQoY29sb3IsIFwiLCBcIikuY29uY2F0KGNvZWZmaWNpZW50LCBcIikuXCIpKSA6IHZvaWQgMDtcbiAgaWYgKCFjb2xvcikgcmV0dXJuIGNvbG9yO1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuZnVuY3Rpb24gY2hhaW5Qcm9wVHlwZXMocHJvcFR5cGUxLCBwcm9wVHlwZTIpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gICAgcmV0dXJuIHByb3BUeXBlMS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykgfHwgcHJvcFR5cGUyLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gY2hhaW5Qcm9wVHlwZXM7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvLyBTb3VyY2U6IGh0dHA6Ly9qc2ZpZGRsZS5uZXQvdld4OFYvXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU2MDMxOTUvZnVsbC1saXN0LW9mLWphdmFzY3JpcHQta2V5Y29kZXNcblxuLyoqXG4gKiBDb25lbmllbmNlIG1ldGhvZCByZXR1cm5zIGNvcnJlc3BvbmRpbmcgdmFsdWUgZm9yIGdpdmVuIGtleU5hbWUgb3Iga2V5Q29kZS5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBrZXlDb2RlIHtOdW1iZXJ9IG9yIGtleU5hbWUge1N0cmluZ31cbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBrZXlDb2RlKHNlYXJjaElucHV0KSB7XG4gIC8vIEtleWJvYXJkIEV2ZW50c1xuICBpZiAoc2VhcmNoSW5wdXQgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBzZWFyY2hJbnB1dCkge1xuICAgIHZhciBoYXNLZXlDb2RlID0gc2VhcmNoSW5wdXQud2hpY2ggfHwgc2VhcmNoSW5wdXQua2V5Q29kZSB8fCBzZWFyY2hJbnB1dC5jaGFyQ29kZVxuICAgIGlmIChoYXNLZXlDb2RlKSBzZWFyY2hJbnB1dCA9IGhhc0tleUNvZGVcbiAgfVxuXG4gIC8vIE51bWJlcnNcbiAgaWYgKCdudW1iZXInID09PSB0eXBlb2Ygc2VhcmNoSW5wdXQpIHJldHVybiBuYW1lc1tzZWFyY2hJbnB1dF1cblxuICAvLyBFdmVyeXRoaW5nIGVsc2UgKGNhc3QgdG8gc3RyaW5nKVxuICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaElucHV0KVxuXG4gIC8vIGNoZWNrIGNvZGVzXG4gIHZhciBmb3VuZE5hbWVkS2V5ID0gY29kZXNbc2VhcmNoLnRvTG93ZXJDYXNlKCldXG4gIGlmIChmb3VuZE5hbWVkS2V5KSByZXR1cm4gZm91bmROYW1lZEtleVxuXG4gIC8vIGNoZWNrIGFsaWFzZXNcbiAgdmFyIGZvdW5kTmFtZWRLZXkgPSBhbGlhc2VzW3NlYXJjaC50b0xvd2VyQ2FzZSgpXVxuICBpZiAoZm91bmROYW1lZEtleSkgcmV0dXJuIGZvdW5kTmFtZWRLZXlcblxuICAvLyB3ZWlyZCBjaGFyYWN0ZXI/XG4gIGlmIChzZWFyY2gubGVuZ3RoID09PSAxKSByZXR1cm4gc2VhcmNoLmNoYXJDb2RlQXQoMClcblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbi8qKlxuICogQ29tcGFyZXMgYSBrZXlib2FyZCBldmVudCB3aXRoIGEgZ2l2ZW4ga2V5Q29kZSBvciBrZXlOYW1lLlxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEtleWJvYXJkIGV2ZW50IHRoYXQgc2hvdWxkIGJlIHRlc3RlZFxuICogQHBhcmFtIHtNaXhlZH0ga2V5Q29kZSB7TnVtYmVyfSBvciBrZXlOYW1lIHtTdHJpbmd9XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xua2V5Q29kZS5pc0V2ZW50S2V5ID0gZnVuY3Rpb24gaXNFdmVudEtleShldmVudCwgbmFtZU9yQ29kZSkge1xuICBpZiAoZXZlbnQgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBldmVudCkge1xuICAgIHZhciBrZXlDb2RlID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZSB8fCBldmVudC5jaGFyQ29kZVxuICAgIGlmIChrZXlDb2RlID09PSBudWxsIHx8IGtleUNvZGUgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodHlwZW9mIG5hbWVPckNvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBjaGVjayBjb2Rlc1xuICAgICAgdmFyIGZvdW5kTmFtZWRLZXkgPSBjb2Rlc1tuYW1lT3JDb2RlLnRvTG93ZXJDYXNlKCldXG4gICAgICBpZiAoZm91bmROYW1lZEtleSkgeyByZXR1cm4gZm91bmROYW1lZEtleSA9PT0ga2V5Q29kZTsgfVxuICAgIFxuICAgICAgLy8gY2hlY2sgYWxpYXNlc1xuICAgICAgdmFyIGZvdW5kTmFtZWRLZXkgPSBhbGlhc2VzW25hbWVPckNvZGUudG9Mb3dlckNhc2UoKV1cbiAgICAgIGlmIChmb3VuZE5hbWVkS2V5KSB7IHJldHVybiBmb3VuZE5hbWVkS2V5ID09PSBrZXlDb2RlOyB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZU9yQ29kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBuYW1lT3JDb2RlID09PSBrZXlDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ga2V5Q29kZTtcblxuLyoqXG4gKiBHZXQgYnkgbmFtZVxuICpcbiAqICAgZXhwb3J0cy5jb2RlWydlbnRlciddIC8vID0+IDEzXG4gKi9cblxudmFyIGNvZGVzID0gZXhwb3J0cy5jb2RlID0gZXhwb3J0cy5jb2RlcyA9IHtcbiAgJ2JhY2tzcGFjZSc6IDgsXG4gICd0YWInOiA5LFxuICAnZW50ZXInOiAxMyxcbiAgJ3NoaWZ0JzogMTYsXG4gICdjdHJsJzogMTcsXG4gICdhbHQnOiAxOCxcbiAgJ3BhdXNlL2JyZWFrJzogMTksXG4gICdjYXBzIGxvY2snOiAyMCxcbiAgJ2VzYyc6IDI3LFxuICAnc3BhY2UnOiAzMixcbiAgJ3BhZ2UgdXAnOiAzMyxcbiAgJ3BhZ2UgZG93bic6IDM0LFxuICAnZW5kJzogMzUsXG4gICdob21lJzogMzYsXG4gICdsZWZ0JzogMzcsXG4gICd1cCc6IDM4LFxuICAncmlnaHQnOiAzOSxcbiAgJ2Rvd24nOiA0MCxcbiAgJ2luc2VydCc6IDQ1LFxuICAnZGVsZXRlJzogNDYsXG4gICdjb21tYW5kJzogOTEsXG4gICdsZWZ0IGNvbW1hbmQnOiA5MSxcbiAgJ3JpZ2h0IGNvbW1hbmQnOiA5MyxcbiAgJ251bXBhZCAqJzogMTA2LFxuICAnbnVtcGFkICsnOiAxMDcsXG4gICdudW1wYWQgLSc6IDEwOSxcbiAgJ251bXBhZCAuJzogMTEwLFxuICAnbnVtcGFkIC8nOiAxMTEsXG4gICdudW0gbG9jayc6IDE0NCxcbiAgJ3Njcm9sbCBsb2NrJzogMTQ1LFxuICAnbXkgY29tcHV0ZXInOiAxODIsXG4gICdteSBjYWxjdWxhdG9yJzogMTgzLFxuICAnOyc6IDE4NixcbiAgJz0nOiAxODcsXG4gICcsJzogMTg4LFxuICAnLSc6IDE4OSxcbiAgJy4nOiAxOTAsXG4gICcvJzogMTkxLFxuICAnYCc6IDE5MixcbiAgJ1snOiAyMTksXG4gICdcXFxcJzogMjIwLFxuICAnXSc6IDIyMSxcbiAgXCInXCI6IDIyMlxufVxuXG4vLyBIZWxwZXIgYWxpYXNlc1xuXG52YXIgYWxpYXNlcyA9IGV4cG9ydHMuYWxpYXNlcyA9IHtcbiAgJ3dpbmRvd3MnOiA5MSxcbiAgJ+KHpyc6IDE2LFxuICAn4oylJzogMTgsXG4gICfijIMnOiAxNyxcbiAgJ+KMmCc6IDkxLFxuICAnY3RsJzogMTcsXG4gICdjb250cm9sJzogMTcsXG4gICdvcHRpb24nOiAxOCxcbiAgJ3BhdXNlJzogMTksXG4gICdicmVhayc6IDE5LFxuICAnY2Fwcyc6IDIwLFxuICAncmV0dXJuJzogMTMsXG4gICdlc2NhcGUnOiAyNyxcbiAgJ3NwYyc6IDMyLFxuICAnc3BhY2ViYXInOiAzMixcbiAgJ3BndXAnOiAzMyxcbiAgJ3BnZG4nOiAzNCxcbiAgJ2lucyc6IDQ1LFxuICAnZGVsJzogNDYsXG4gICdjbWQnOiA5MVxufVxuXG4vKiFcbiAqIFByb2dyYW1hdGljYWxseSBhZGQgdGhlIGZvbGxvd2luZ1xuICovXG5cbi8vIGxvd2VyIGNhc2UgY2hhcnNcbmZvciAoaSA9IDk3OyBpIDwgMTIzOyBpKyspIGNvZGVzW1N0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaSAtIDMyXG5cbi8vIG51bWJlcnNcbmZvciAodmFyIGkgPSA0ODsgaSA8IDU4OyBpKyspIGNvZGVzW2kgLSA0OF0gPSBpXG5cbi8vIGZ1bmN0aW9uIGtleXNcbmZvciAoaSA9IDE7IGkgPCAxMzsgaSsrKSBjb2Rlc1snZicraV0gPSBpICsgMTExXG5cbi8vIG51bXBhZCBrZXlzXG5mb3IgKGkgPSAwOyBpIDwgMTA7IGkrKykgY29kZXNbJ251bXBhZCAnK2ldID0gaSArIDk2XG5cbi8qKlxuICogR2V0IGJ5IGNvZGVcbiAqXG4gKiAgIGV4cG9ydHMubmFtZVsxM10gLy8gPT4gJ0VudGVyJ1xuICovXG5cbnZhciBuYW1lcyA9IGV4cG9ydHMubmFtZXMgPSBleHBvcnRzLnRpdGxlID0ge30gLy8gdGl0bGUgZm9yIGJhY2t3YXJkIGNvbXBhdFxuXG4vLyBDcmVhdGUgcmV2ZXJzZSBtYXBwaW5nXG5mb3IgKGkgaW4gY29kZXMpIG5hbWVzW2NvZGVzW2ldXSA9IGlcblxuLy8gQWRkIGFsaWFzZXNcbmZvciAodmFyIGFsaWFzIGluIGFsaWFzZXMpIHtcbiAgY29kZXNbYWxpYXNdID0gYWxpYXNlc1thbGlhc11cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBvd25lckRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xufVxuXG52YXIgX2RlZmF1bHQgPSBvd25lckRvY3VtZW50O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgaWYgKHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy5cbiAgZnVuY3Rpb24gdXBkYXRlcihwcmV2U3RhdGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7XG4gIH1cbiAgLy8gQmluZGluZyBcInRoaXNcIiBpcyBpbXBvcnRhbnQgZm9yIHNoYWxsb3cgcmVuZGVyZXIgc3VwcG9ydC5cbiAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5wcm9wcyA9IHByZXZQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlO1xuICB9XG59XG5cbi8vIFJlYWN0IG1heSB3YXJuIGFib3V0IGNXTS9jV1JQL2NXVSBtZXRob2RzIGJlaW5nIGRlcHJlY2F0ZWQuXG4vLyBBZGQgYSBmbGFnIHRvIHN1cHByZXNzIHRoZXNlIHdhcm5pbmdzIGZvciB0aGlzIHNwZWNpYWwgY2FzZS5cbmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuXG5mdW5jdGlvbiBwb2x5ZmlsbChDb21wb25lbnQpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgaWYgKCFwcm90b3R5cGUgfHwgIXByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBwb2x5ZmlsbCBjbGFzcyBjb21wb25lbnRzJyk7XG4gIH1cblxuICBpZiAoXG4gICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LFxuICAvLyBCZWNhdXNlIHRoZXkgd291bGQgd29yayBkaWZmZXJlbnRseSBiZXR3ZWVuIG9sZGVyIGFuZCBuZXdlciAoMTYuMyspIHZlcnNpb25zIG9mIFJlYWN0LlxuICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9XG4gIGlmIChcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbFxuICApIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcbiAgICB2YXIgbmV3QXBpTmFtZSA9XG4gICAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSdcbiAgICAgICAgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG5cbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICtcbiAgICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgbmV3QXBpTmFtZSArXG4gICAgICAgICcgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczonICtcbiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbFxuICAgICAgICAgID8gJ1xcbiAgJyArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWVcbiAgICAgICAgICA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJykgK1xuICAgICAgICAnXFxuXFxuVGhlIGFib3ZlIGxpZmVjeWNsZXMgc2hvdWxkIGJlIHJlbW92ZWQuIExlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV00gYW5kIGNXUlAgdG8gaW52b2tlIHRoZSBuZXcgc3RhdGljIGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBjb21wb25lbnRXaWxsTW91bnQ7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV1UgdG8gaW52b2tlIHRoZSBuZXcgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGF0IGxpZmVjeWNsZSBpZiBnU0JVIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGNvbXBvbmVudFdpbGxVcGRhdGU7XG5cbiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTtcblxuICAgIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQb2x5ZmlsbChcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIG1heWJlU25hcHNob3RcbiAgICApIHtcbiAgICAgIC8vIDE2LjMrIHdpbGwgbm90IGV4ZWN1dGUgb3VyIHdpbGwtdXBkYXRlIG1ldGhvZDtcbiAgICAgIC8vIEl0IHdpbGwgcGFzcyBhIHNuYXBzaG90IHZhbHVlIHRvIGRpZC11cGRhdGUgdGhvdWdoLlxuICAgICAgLy8gT2xkZXIgdmVyc2lvbnMgd2lsbCByZXF1aXJlIG91ciBwb2x5ZmlsbGVkIHdpbGwtdXBkYXRlIHZhbHVlLlxuICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBcIm1heWJlU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhIFwicHJldkNvbnRleHRcIiBvYmplY3QuXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgXCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgdmFsdWUuXG4gICAgICAvLyBTbyBjaGVjayBmb3IgdGhlIGV4cGxpY2l0IF9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyBmbGFnIHRvIGRldGVybWluZSBiZWhhdmlvci5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnXG4gICAgICAgID8gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFxuICAgICAgICA6IG1heWJlU25hcHNob3Q7XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZS5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBzbmFwc2hvdCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59XG5cbmV4cG9ydCB7IHBvbHlmaWxsIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9BcHBCYXIuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQXBwQmFyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9BcHBCYXJcIikpOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UeXBvZ3JhcGh5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1R5cG9ncmFwaHkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1R5cG9ncmFwaHlcIikpOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNi4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaz1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLHk9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxBPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxCPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gYWEoYSxiLGUsYyxkLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bZSxjLGQsZyxoLGZdLG09MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW20rK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZSs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7YWEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX12YXIgRT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRj17fTtcbmZ1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Rjt0aGlzLnVwZGF0ZXI9ZXx8RX1HLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0cucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9EKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ry5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gSCgpe31ILnByb3RvdHlwZT1HLnByb3RvdHlwZTtmdW5jdGlvbiBJKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUY7dGhpcy51cGRhdGVyPWV8fEV9dmFyIEo9SS5wcm90b3R5cGU9bmV3IEg7XG5KLmNvbnN0cnVjdG9yPUk7ayhKLEcucHJvdG90eXBlKTtKLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBLPXtjdXJyZW50Om51bGwsY3VycmVudERpc3BhdGNoZXI6bnVsbH0sTD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LE09e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE4oYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUwuY2FsbChiLGMpJiYhTS5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIGJhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGUsYyl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitVKGQsaCk7Zys9VChkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUMmJmFbQ118fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaD1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxoKyspLGcrPVQoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsZSl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGUpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGNhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGRhKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1coYSxjLGUsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9YmEoYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStlKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsYyxkKTtWKGEsZGEsYik7UyhiKX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1coYSxjLG51bGwsYixlKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsZSk7VihhLGNhLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VyhhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe08oYSk/dm9pZCAwOkQoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkcsUHVyZUNvbXBvbmVudDpJLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnkscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpCLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOkEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSxGcmFnbWVudDpyLFN0cmljdE1vZGU6dCxTdXNwZW5zZTp6LGNyZWF0ZUVsZW1lbnQ6TixjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0QoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9ayh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtcbmlmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpTC5jYWxsKGIsYykmJiFNLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9Ti5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok8sdmVyc2lvbjpcIjE2LjYuM1wiLFxuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkssYXNzaWduOmt9fTtYLnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlPXg7WC51bnN0YWJsZV9Qcm9maWxlcj11O3ZhciBZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjYuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLGJhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gY2EoYSxiLGMsZCxlLGYsZyxoKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgaz1bYyxkLGUsZixnLGhdLGw9MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBrW2wrK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiB0KGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7Y2EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1hYT92b2lkIDA6dChcIjIyN1wiKTtmdW5jdGlvbiBkYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX1cbnZhciBlYT0hMSxmYT1udWxsLGhhPSExLGlhPW51bGwsamE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZWE9ITA7ZmE9YX19O2Z1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtlYT0hMTtmYT1udWxsO2RhLmFwcGx5KGphLGFyZ3VtZW50cyl9ZnVuY3Rpb24gbGEoYSxiLGMsZCxlLGYsZyxoLGspe2thLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihlYSl7aWYoZWEpe3ZhciBsPWZhO2VhPSExO2ZhPW51bGx9ZWxzZSB0KFwiMTk4XCIpLGw9dm9pZCAwO2hhfHwoaGE9ITAsaWE9bCl9fXZhciBtYT1udWxsLG5hPXt9O1xuZnVuY3Rpb24gb2EoKXtpZihtYSlmb3IodmFyIGEgaW4gbmEpe3ZhciBiPW5hW2FdLGM9bWEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDp0KFwiOTZcIixhKTtpZighcGFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6dChcIjk3XCIsYSk7cGFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtxYS5oYXNPd25Qcm9wZXJ0eShoKT90KFwiOTlcIixoKTp2b2lkIDA7cWFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmcmEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHJhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7ZT92b2lkIDA6dChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHJhKGEsYixjKXtzYVthXT90KFwiMTAwXCIsYSk6dm9pZCAwO3NhW2FdPWI7dGFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcGE9W10scWE9e30sc2E9e30sdGE9e30sdWE9bnVsbCx2YT1udWxsLHdhPW51bGw7ZnVuY3Rpb24geGEoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXdhKGMpO2xhKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geWEoYSxiKXtudWxsPT1iP3QoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24gemEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIEFhPW51bGw7ZnVuY3Rpb24gQmEoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKXhhKGEsYltkXSxjW2RdKTtlbHNlIGImJnhhKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1cbnZhciBDYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXttYT90KFwiMTAxXCIpOnZvaWQgMDttYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtvYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bmEuaGFzT3duUHJvcGVydHkoYykmJm5hW2NdPT09ZHx8KG5hW2NdP3QoXCIxMDJcIixjKTp2b2lkIDAsbmFbY109ZCxiPSEwKX1iJiZvYSgpfX07XG5mdW5jdGlvbiBEYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXVhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3QoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBFYShhKXtudWxsIT09YSYmKEFhPXlhKEFhLGEpKTthPUFhO0FhPW51bGw7aWYoYSYmKHphKGEsQmEpLEFhP3QoXCI5NVwiKTp2b2lkIDAsaGEpKXRocm93IGE9aWEsaGE9ITEsaWE9bnVsbCxhO312YXIgRmE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksR2E9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitGYSxIYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0ZhO2Z1bmN0aW9uIElhKGEpe2lmKGFbR2FdKXJldHVybiBhW0dhXTtmb3IoOyFhW0dhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0dhXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIEphKGEpe2E9YVtHYV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX1cbmZ1bmN0aW9uIEthKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0KFwiMzNcIil9ZnVuY3Rpb24gTGEoYSl7cmV0dXJuIGFbSGFdfHxudWxsfWZ1bmN0aW9uIE1hKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gTmEoYSxiLGMpe2lmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz15YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz15YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIE9hKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9TWEoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KU5hKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspTmEoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gUGEoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXlhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXlhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBRYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlBhKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFJhKGEpe3phKGEsT2EpfXZhciBTYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2Z1bmN0aW9uIFRhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFVhPXthbmltYXRpb25lbmQ6VGEoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VGEoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpUYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpUYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFZhPXt9LFdhPXt9O1xuU2EmJihXYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBVYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBVYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBVYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBVYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFhhKGEpe2lmKFZhW2FdKXJldHVybiBWYVthXTtpZighVWFbYV0pcmV0dXJuIGE7dmFyIGI9VWFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gV2EpcmV0dXJuIFZhW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWWE9WGEoXCJhbmltYXRpb25lbmRcIiksWmE9WGEoXCJhbmltYXRpb25pdGVyYXRpb25cIiksJGE9WGEoXCJhbmltYXRpb25zdGFydFwiKSxhYj1YYShcInRyYW5zaXRpb25lbmRcIiksYmI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGNiPW51bGwsZWI9bnVsbCxmYj1udWxsO1xuZnVuY3Rpb24gZ2IoKXtpZihmYilyZXR1cm4gZmI7dmFyIGEsYj1lYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBjYj9jYi52YWx1ZTpjYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBmYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGhiKCl7cmV0dXJuITB9ZnVuY3Rpb24gaWIoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEEoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2hiOmliO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9aWI7cmV0dXJuIHRoaXN9XG5uKEEucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9aGIpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9aGIpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9aGJ9LGlzUGVyc2lzdGVudDppYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1pYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0EuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuQS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtqYihjKTtyZXR1cm4gY307amIoQSk7ZnVuY3Rpb24ga2IoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gbGIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOnQoXCIyNzlcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfVxuZnVuY3Rpb24gamIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9a2I7YS5yZWxlYXNlPWxifXZhciBtYj1BLmV4dGVuZCh7ZGF0YTpudWxsfSksbmI9QS5leHRlbmQoe2RhdGE6bnVsbH0pLG9iPVs5LDEzLDI3LDMyXSxwYj1TYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cscWI9bnVsbDtTYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYocWI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciByYj1TYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXFiLHNiPVNhJiYoIXBifHxxYiYmODxxYiYmMTE+PXFiKSx0Yj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSx1Yj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSx2Yj0hMTtcbmZ1bmN0aW9uIHdiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09b2IuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB4YihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciB5Yj0hMTtmdW5jdGlvbiB6YihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4geGIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3ZiPSEwO3JldHVybiB0YjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT10YiYmdmI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gQWIoYSxiKXtpZih5YilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhcGImJndiKGEsYik/KGE9Z2IoKSxmYj1lYj1jYj1udWxsLHliPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBzYiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgQmI9e2V2ZW50VHlwZXM6dWIsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHBiKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9dWIuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9dWIuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPXViLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSB5Yj93YihhLGMpJiYoZT11Yi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPXViLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHNiJiZcImtvXCIhPT1jLmxvY2FsZSYmKHlifHxlIT09dWIuY29tcG9zaXRpb25TdGFydD9lPT09dWIuY29tcG9zaXRpb25FbmQmJnliJiYoZj1nYigpKTooY2I9ZCxlYj1cInZhbHVlXCJpbiBjYj9jYi52YWx1ZTpjYi50ZXh0Q29udGVudCx5Yj1cbiEwKSksZT1tYi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj14YihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksUmEoZSksZj1lKTpmPW51bGw7KGE9cmI/emIoYSxjKTpBYihhLGMpKT8oYj1uYi5nZXRQb29sZWQodWIuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFJhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LENiPW51bGwsRGI9bnVsbCxFYj1udWxsO2Z1bmN0aW9uIEhiKGEpe2lmKGE9dmEoYSkpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBDYj90KFwiMjgwXCIpOnZvaWQgMDt2YXIgYj11YShhLnN0YXRlTm9kZSk7Q2IoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBJYihhKXtEYj9FYj9FYi5wdXNoKGEpOkViPVthXTpEYj1hfWZ1bmN0aW9uIEpiKCl7aWYoRGIpe3ZhciBhPURiLGI9RWI7RWI9RGI9bnVsbDtIYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspSGIoYlthXSl9fVxuZnVuY3Rpb24gS2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBMYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBNYigpe312YXIgTmI9ITE7ZnVuY3Rpb24gT2IoYSxiKXtpZihOYilyZXR1cm4gYShiKTtOYj0hMDt0cnl7cmV0dXJuIEtiKGEsYil9ZmluYWxseXtpZihOYj0hMSxudWxsIT09RGJ8fG51bGwhPT1FYilNYigpLEpiKCl9fXZhciBQYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBRYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVBiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIFJiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBTYihhKXtpZighU2EpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gVGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFViKGEpe3ZhciBiPVRiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWIoYSkpfWZ1bmN0aW9uIFdiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIFhiPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELFliPS9eKC4qKVtcXFxcXFwvXS8sRD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFpiPUQ/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGI9RD9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJjPUQ/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNjPUQ/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRjPUQ/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGVjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmM9RD9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhjPUQ/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOlxuNjAxMTMsaWM9RD9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxqYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGtjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBsYyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9a2MmJmFba2NdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBtYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGZjOnJldHVyblwiQ29uY3VycmVudE1vZGVcIjtjYXNlIGFjOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlICRiOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBjYzpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBiYzpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGhjOnJldHVyblwiU3VzcGVuc2VcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYzpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdjOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXG5cIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBpYzpyZXR1cm4gbWMoYS50eXBlKTtjYXNlIGpjOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gbWMoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gbmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAwOmNhc2UgMTpjYXNlIDU6Y2FzZSA4OmNhc2UgMTM6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlLGU9bWMoYS50eXBlKTt2YXIgZj1udWxsO2MmJihmPW1jKGMudHlwZSkpO2M9ZTtlPVwiXCI7ZD9lPVwiIChhdCBcIitkLmZpbGVOYW1lLnJlcGxhY2UoWWIsXCJcIikrXCI6XCIrZC5saW5lTnVtYmVyK1wiKVwiOmYmJihlPVwiIChjcmVhdGVkIGJ5IFwiK2YrXCIpXCIpO2Y9XCJcXG4gICAgaW4gXCIrKGN8fFwiVW5rbm93blwiKStlO2JyZWFrIGE7ZGVmYXVsdDpmPVwiXCJ9Yis9ZjthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIG9jPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxwYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHFjPXt9LHJjPXt9O1xuZnVuY3Rpb24gc2MoYSl7aWYocGMuY2FsbChyYyxhKSlyZXR1cm4hMDtpZihwYy5jYWxsKHFjLGEpKXJldHVybiExO2lmKG9jLnRlc3QoYSkpcmV0dXJuIHJjW2FdPSEwO3FjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHRjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gdWMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dGMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBFKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgRj17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDAsITEsYSxudWxsKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtGW2JdPW5ldyBFKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDIsITEsYSxudWxsKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSwzLCEwLGEsbnVsbCl9KTtcbltcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDQsITEsYSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsNiwhMSxhLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgdmM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB4YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2YyxcbnhjKTtGW2JdPW5ldyBFKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx4Yyk7RltiXT1uZXcgRShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh2Yyx4Yyk7RltiXT1uZXcgRShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO0YudGFiSW5kZXg9bmV3IEUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9Ri5oYXNPd25Qcm9wZXJ0eShiKT9GW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwodWMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3NjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB6YyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gQWMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9emMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBDYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnljKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBEYyhhLGIpe0NjKGEsYik7dmFyIGM9emMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RWMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRWMoYSxiLnR5cGUsemMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBGYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBFYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIEdjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIEhjKGEsYixjKXthPUEuZ2V0UG9vbGVkKEdjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7SWIoYyk7UmEoYSk7cmV0dXJuIGF9dmFyIEpjPW51bGwsS2M9bnVsbDtmdW5jdGlvbiBMYyhhKXtFYShhKX1cbmZ1bmN0aW9uIE1jKGEpe3ZhciBiPUthKGEpO2lmKFdiKGIpKXJldHVybiBhfWZ1bmN0aW9uIE5jKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIE9jPSExO1NhJiYoT2M9U2IoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gUGMoKXtKYyYmKEpjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFFjKSxLYz1KYz1udWxsKX1mdW5jdGlvbiBRYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmTWMoS2MpJiYoYT1IYyhLYyxhLFJiKGEpKSxPYihMYyxhKSl9ZnVuY3Rpb24gUmMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFBjKCksSmM9YixLYz1jLEpjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFFjKSk6XCJibHVyXCI9PT1hJiZQYygpfWZ1bmN0aW9uIFNjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIE1jKEtjKX1cbmZ1bmN0aW9uIFRjKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gTWMoYil9ZnVuY3Rpb24gVWMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gTWMoYil9XG52YXIgVmM9e2V2ZW50VHlwZXM6R2MsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpPYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/S2EoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPU5jOlFiKGUpP09jP2Y9VWM6KGY9U2MsZz1SYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9VGMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIEhjKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRWMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sV2M9QS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFhjPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFljKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9WGNbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBaYygpe3JldHVybiBZY31cbnZhciAkYz0wLGFkPTAsYmQ9ITEsY2Q9ITEsZGQ9V2MuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPSRjOyRjPWEuc2NyZWVuWDtyZXR1cm4gYmQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihiZD0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPWFkO2FkPWEuc2NyZWVuWTtyZXR1cm4gY2Q/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihjZD0hMCwwKX19KSxlZD1kZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksZmQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGdkPXtldmVudFR5cGVzOmZkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0lhKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgZz12b2lkIDAsaD12b2lkIDAsaz12b2lkIDAsbD12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpZz1kZCxoPWZkLm1vdXNlTGVhdmUsaz1mZC5tb3VzZUVudGVyLGw9XCJtb3VzZVwiO1xuZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1lZCxoPWZkLnBvaW50ZXJMZWF2ZSxrPWZkLnBvaW50ZXJFbnRlcixsPVwicG9pbnRlclwiO3ZhciBtPW51bGw9PWY/ZTpLYShmKTtlPW51bGw9PWI/ZTpLYShiKTthPWcuZ2V0UG9vbGVkKGgsZixjLGQpO2EudHlwZT1sK1wibGVhdmVcIjthLnRhcmdldD1tO2EucmVsYXRlZFRhcmdldD1lO2M9Zy5nZXRQb29sZWQoayxiLGMsZCk7Yy50eXBlPWwrXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PW07ZD1iO2lmKGYmJmQpYTp7Yj1mO2U9ZDtsPTA7Zm9yKGc9YjtnO2c9TWEoZykpbCsrO2c9MDtmb3Ioaz1lO2s7az1NYShrKSlnKys7Zm9yKDswPGwtZzspYj1NYShiKSxsLS07Zm9yKDswPGctbDspZT1NYShlKSxnLS07Zm9yKDtsLS07KXtpZihiPT09ZXx8Yj09PWUuYWx0ZXJuYXRlKWJyZWFrIGE7Yj1NYShiKTtlPU1hKGUpfWI9bnVsbH1lbHNlIGI9bnVsbDtlPWI7Zm9yKGI9W107ZiYmZiE9PWU7KXtsPVxuZi5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2IucHVzaChmKTtmPU1hKGYpfWZvcihmPVtdO2QmJmQhPT1lOyl7bD1kLmFsdGVybmF0ZTtpZihudWxsIT09bCYmbD09PWUpYnJlYWs7Zi5wdXNoKGQpO2Q9TWEoZCl9Zm9yKGQ9MDtkPGIubGVuZ3RoO2QrKylQYShiW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihkPWYubGVuZ3RoOzA8ZC0tOylQYShmW2RdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm5bYSxjXX19LGhkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gaWQoYSxiKXtyZXR1cm4gYT09PWI/MCE9PWF8fDAhPT1ifHwxL2E9PT0xL2I6YSE9PWEmJmIhPT1ifVxuZnVuY3Rpb24gamQoYSxiKXtpZihpZChhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWhkLmNhbGwoYixjW2RdKXx8IWlkKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24ga2QoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gbGQoYSl7MiE9PWtkKGEpP3QoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gbWQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9a2QoYSksMz09PWI/dChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gbGQoZSksYTtpZihnPT09ZClyZXR1cm4gbGQoZSksYjtnPWcuc2libGluZ310KFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6dChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP3QoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz90KFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIG5kKGEpe2E9bWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgb2Q9QS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHBkPUEuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSkscWQ9V2MuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiByZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBzZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sdGQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHVkPVdjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1zZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1yZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/dGRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP3JkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP3JkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksdmQ9ZGQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHdkPVdjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjfSkseGQ9QS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSkseWQ9ZGQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx6ZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtZYSxcImFuaW1hdGlvbkVuZFwiXSxbWmEsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sWyRhLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbYWIsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSxBZD17fSxCZD17fTtmdW5jdGlvbiBDZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O0FkW2FdPWI7QmRbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFxuW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXtDZChhLCEwKX0pO3pkLmZvckVhY2goZnVuY3Rpb24oYSl7Q2QoYSwhMSl9KTtcbnZhciBEZD17ZXZlbnRUeXBlczpBZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1CZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9QmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1yZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9dWQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPXFkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9ZGQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnZkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9d2Q7YnJlYWs7Y2FzZSBZYTpjYXNlIFphOmNhc2UgJGE6YT1vZDticmVhaztjYXNlIGFiOmE9eGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9V2M7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT15ZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPXBkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9ZWQ7YnJlYWs7ZGVmYXVsdDphPUF9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtSYShiKTtyZXR1cm4gYn19LEVkPURkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbkZkPVtdO2Z1bmN0aW9uIEdkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUlhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPVJiKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1udWxsLGg9MDtoPHBhLmxlbmd0aDtoKyspe3ZhciBrPXBhW2hdO2smJihrPWsuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihnPXlhKGcsaykpfUVhKGcpfX12YXIgSGQ9ITA7XG5mdW5jdGlvbiBHKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEVkKGEpP0lkOkpkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9ZnVuY3Rpb24gS2QoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRWQoYSk/SWQ6SmQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBJZChhLGIpe0xiKEpkLGEsYil9XG5mdW5jdGlvbiBKZChhLGIpe2lmKEhkKXt2YXIgYz1SYihiKTtjPUlhKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09a2QoYyl8fChjPW51bGwpO2lmKEZkLmxlbmd0aCl7dmFyIGQ9RmQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7T2IoR2QsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5GZC5sZW5ndGgmJkZkLnB1c2goYSl9fX12YXIgTGQ9e30sTWQ9MCxOZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5mdW5jdGlvbiBPZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxOZCl8fChhW05kXT1NZCsrLExkW2FbTmRdXT17fSk7cmV0dXJuIExkW2FbTmRdXX1mdW5jdGlvbiBQZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gUWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gUmQoYSxiKXt2YXIgYz1RZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1RZChjKX19ZnVuY3Rpb24gU2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9TZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBUZCgpe2Zvcih2YXIgYT13aW5kb3csYj1QZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e2E9Yi5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXd9Y2F0Y2goYyl7YnJlYWt9Yj1QZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBVZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFZkPVNhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsV2Q9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFhkPW51bGwsWWQ9bnVsbCxaZD1udWxsLCRkPSExO1xuZnVuY3Rpb24gYWUoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZigkZHx8bnVsbD09WGR8fFhkIT09UGQoYykpcmV0dXJuIG51bGw7Yz1YZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZVZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBaZCYmamQoWmQsYyk/bnVsbDooWmQ9YyxhPUEuZ2V0UG9vbGVkKFdkLnNlbGVjdCxZZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVhkLFJhKGEpLGEpfVxudmFyIGJlPXtldmVudFR5cGVzOldkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPU9kKGUpO2Y9dGEub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9LYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKFFiKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVhkPWUsWWQ9YixaZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6WmQ9WWQ9WGQ9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6JGQ9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiAkZD0hMSxhZShjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihWZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGFlKGMsZCl9cmV0dXJuIG51bGx9fTtDYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3VhPUxhO3ZhPUphO3dhPUthO0NhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46RGQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmdkLENoYW5nZUV2ZW50UGx1Z2luOlZjLFNlbGVjdEV2ZW50UGx1Z2luOmJlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46QmJ9KTtmdW5jdGlvbiBkZShhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGVlKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGUoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIGZlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit6YyhjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2UoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3QoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz90KFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6dChcIjkzXCIpLGI9YlswXSksYz1iKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6emMoYyl9fVxuZnVuY3Rpb24gaWUoYSxiKXt2YXIgYz16YyhiLnZhbHVlKSxkPXpjKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIGtlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5lPXZvaWQgMCxvZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuZT1uZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1uZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJlPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxZSkuZm9yRWFjaChmdW5jdGlvbihhKXtyZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FlW2JdPXFlW2FdfSl9KTtmdW5jdGlvbiBzZShhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWUuaGFzT3duUHJvcGVydHkoYSkmJnFlW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRlKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNlKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHVlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2ZShhLGIpe2ImJih1ZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dChcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj90KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOnQoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3QoXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiB3ZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiB4ZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1PZChhKTtiPXRhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpLZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6S2QoXCJmb2N1c1wiLGEpO0tkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpTYihlKSYmS2QoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YmIuaW5kZXhPZihlKSYmRyhlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB5ZSgpe312YXIgemU9bnVsbCxBZT1udWxsO1xuZnVuY3Rpb24gQmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIENlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgRGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsRWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO1xuZnVuY3Rpb24gRmUoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBHZShhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgSGU9W10sSWU9LTE7ZnVuY3Rpb24gSChhKXswPkllfHwoYS5jdXJyZW50PUhlW0llXSxIZVtJZV09bnVsbCxJZS0tKX1mdW5jdGlvbiBJKGEsYil7SWUrKztIZVtJZV09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBKZT17fSxKPXtjdXJyZW50OkplfSxLPXtjdXJyZW50OiExfSxLZT1KZTtcbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gSmU7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIE1lKGEpe0goSyxhKTtIKEosYSl9ZnVuY3Rpb24gTmUoYSl7SChLLGEpO0goSixhKX1cbmZ1bmN0aW9uIE9lKGEsYixjKXtKLmN1cnJlbnQhPT1KZT90KFwiMTY4XCIpOnZvaWQgMDtJKEosYixhKTtJKEssYyxhKX1mdW5jdGlvbiBQZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpZSBpbiBhP3ZvaWQgMDp0KFwiMTA4XCIsbWMoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBuKHt9LGMsZCl9ZnVuY3Rpb24gUWUoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxKZTtLZT1KLmN1cnJlbnQ7SShKLGIsYSk7SShLLEsuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFJlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtkP3ZvaWQgMDp0KFwiMTY5XCIpO2M/KGI9UGUoYSxiLEtlKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsSChLLGEpLEgoSixhKSxJKEosYixhKSk6SChLLGEpO0koSyxjLGEpfXZhciBTZT1udWxsLFRlPW51bGw7ZnVuY3Rpb24gVWUoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIFZlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1NlPVVlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtUZT1VZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gV2UoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gTShhLGIsYyxkKXtyZXR1cm4gbmV3IFdlKGEsYixjLGQpfVxuZnVuY3Rpb24gWGUoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBZZShhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gWGUoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdjKXJldHVybiAxMTtpZihhPT09aWMpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gWmUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1NKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtjLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5O2Muc2libGluZz1hLnNpYmxpbmc7XG5jLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiAkZShhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpWGUoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWM6cmV0dXJuIGFmKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmM6cmV0dXJuIGJmKGMsZXwzLGYsYik7Y2FzZSBiYzpyZXR1cm4gYmYoYyxlfDIsZixiKTtjYXNlIGNjOnJldHVybiBhPU0oMTIsYyxiLGV8NCksYS5lbGVtZW50VHlwZT1jYyxhLnR5cGU9Y2MsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYzpyZXR1cm4gYT1NKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPWhjLGEudHlwZT1oYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGM6Zz0xMDticmVhayBhO2Nhc2UgZWM6Zz05O2JyZWFrIGE7Y2FzZSBnYzpnPTExO2JyZWFrIGE7Y2FzZSBpYzpnPVxuMTQ7YnJlYWsgYTtjYXNlIGpjOmc9MTY7ZD1udWxsO2JyZWFrIGF9dChcIjEzMFwiLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKX1iPU0oZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBhZihhLGIsYyxkKXthPU0oNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGJmKGEsYixjLGQpe2E9TSg4LGEsZCxiKTtiPTA9PT0oYiYxKT9iYzpmYzthLmVsZW1lbnRUeXBlPWI7YS50eXBlPWI7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGNmKGEsYixjKXthPU0oNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gZGYoYSxiLGMpe2I9TSg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1mdW5jdGlvbiBlZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6YzxiP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU+YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7ZmYoYixhKX1cbmZ1bmN0aW9uIGdmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmxhdGVzdFBpbmdlZFRpbWU7MCE9PWMmJmM+PWImJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7Yz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7dmFyIGQ9YS5sYXRlc3RQZW5kaW5nVGltZTtjPT09Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9ZD09PWI/YS5sYXRlc3RQZW5kaW5nVGltZT0wOmQ6ZD09PWImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWMpO2M9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7ZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7MD09PWM/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YS5sYXRlc3RTdXNwZW5kZWRUaW1lPWI6YzxiP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWI6ZD5iJiYoYS5sYXRlc3RTdXNwZW5kZWRUaW1lPWIpO2ZmKGIsYSl9XG5mdW5jdGlvbiBoZihhLGIpe3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTthPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2M+YiYmKGI9Yyk7YT5iJiYoYj1hKTtyZXR1cm4gYn1mdW5jdGlvbiBmZihhLGIpe3ZhciBjPWIuZWFybGllc3RTdXNwZW5kZWRUaW1lLGQ9Yi5sYXRlc3RTdXNwZW5kZWRUaW1lLGU9Yi5lYXJsaWVzdFBlbmRpbmdUaW1lLGY9Yi5sYXRlc3RQaW5nZWRUaW1lO2U9MCE9PWU/ZTpmOzA9PT1lJiYoMD09PWF8fGQ8YSkmJihlPWQpO2E9ZTswIT09YSYmYz5hJiYoYT1jKTtiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWU7Yi5leHBpcmF0aW9uVGltZT1hfXZhciBqZj0hMTtcbmZ1bmN0aW9uIGtmKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBsZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBtZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBuZihhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBvZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9a2YoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9a2YoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9a2YoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPWxmKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPWxmKGQpKTtudWxsPT09ZXx8ZD09PWU/bmYoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhuZihkLGIpLG5mKGUsYikpOihuZihkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIHBmKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9a2YoYS5tZW1vaXplZFN0YXRlKTpxZihhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIHFmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPWxmKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHJmKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMjA0OXw2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIDI6amY9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBzZihhLGIsYyxkLGUpe2pmPSExO2I9cWYoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxrPWIuZmlyc3RVcGRhdGUsbD1mO251bGwhPT1rOyl7dmFyIG09ay5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1rLGY9bCksaDxtJiYoaD1tKSk6KGw9cmYoYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpKTtrPWsubmV4dH1tPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIHE9ay5leHBpcmF0aW9uVGltZTtxPGU/KG51bGw9PT1tJiYobT1rLG51bGw9PT1nJiYoZj1sKSksaDxxJiYoaD1xKSk6KGw9cmYoYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PVxuMzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpKTtrPWsubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIHRmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTt1ZihiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7dWYoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIHVmKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3QoXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIHZmKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6bmMoYil9fXZhciB3Zj17Y3VycmVudDpudWxsfSx4Zj1udWxsLHlmPW51bGwsemY9bnVsbDtmdW5jdGlvbiBBZihhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtJKHdmLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBCZihhKXt2YXIgYj13Zi5jdXJyZW50O0god2YsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBDZihhKXt4Zj1hO3pmPXlmPW51bGw7YS5maXJzdENvbnRleHREZXBlbmRlbmN5PW51bGx9XG5mdW5jdGlvbiBEZihhLGIpe2lmKHpmIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09Yil6Zj1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09eWY/KG51bGw9PT14Zj90KFwiMjkzXCIpOnZvaWQgMCx4Zi5maXJzdENvbnRleHREZXBlbmRlbmN5PXlmPWIpOnlmPXlmLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBFZj17fSxOPXtjdXJyZW50OkVmfSxGZj17Y3VycmVudDpFZn0sR2Y9e2N1cnJlbnQ6RWZ9O2Z1bmN0aW9uIEhmKGEpe2E9PT1FZj90KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIElmKGEsYil7SShHZixiLGEpO0koRmYsYSxhKTtJKE4sRWYsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPW1lKGIsYyl9SChOLGEpO0koTixiLGEpfWZ1bmN0aW9uIEpmKGEpe0goTixhKTtIKEZmLGEpO0goR2YsYSl9ZnVuY3Rpb24gS2YoYSl7SGYoR2YuY3VycmVudCk7dmFyIGI9SGYoTi5jdXJyZW50KTt2YXIgYz1tZShiLGEudHlwZSk7YiE9PWMmJihJKEZmLGEsYSksSShOLGMsYSkpfWZ1bmN0aW9uIExmKGEpe0ZmLmN1cnJlbnQ9PT1hJiYoSChOLGEpLEgoRmYsYSkpfVxuZnVuY3Rpb24gTyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1mdW5jdGlvbiBNZihhKXt2YXIgYj1hLl9yZXN1bHQ7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBiO2Nhc2UgMjp0aHJvdyBiO2Nhc2UgMDp0aHJvdyBiO2RlZmF1bHQ6dGhyb3cgYS5fc3RhdHVzPTAsYj1hLl9jdG9yLGI9YigpLGIudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSksYS5fcmVzdWx0PWIsYjt9fXZhciBOZj1YYi5SZWFjdEN1cnJlbnRPd25lcixPZj0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIFBmKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIFVmPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09a2QoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9UWYoKTtkPVJmKGQsYSk7dmFyIGU9bWYoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1NmKCk7b2YoYSxlKTtUZihhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1RZigpO2Q9UmYoZCxhKTt2YXIgZT1tZihkKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtTZigpO29mKGEsZSk7VGYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9UWYoKTtjPVJmKGMsYSk7dmFyIGQ9bWYoYyk7ZC50YWc9XG4yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtTZigpO29mKGEsZCk7VGYoYSxjKX19O2Z1bmN0aW9uIFZmKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWpkKGMsZCl8fCFqZChlLGYpOiEwfVxuZnVuY3Rpb24gV2YoYSxiLGMpe3ZhciBkPSExLGU9SmU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TmYuY3VycmVudERpc3BhdGNoZXIucmVhZENvbnRleHQoZik6KGU9TChiKT9LZTpKLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9MZShhLGUpOkplKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9VWY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gWGYoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJlVmLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gWWYoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1PZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU5mLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGYpOihmPUwoYik/S2U6Si5jdXJyZW50LGUuY29udGV4dD1MZShhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihzZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoUGYoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmVWYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoc2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBaZj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gJGYoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMSE9PWMudGFnP3QoXCIyODlcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOnQoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PU9mJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP3QoXCIyODRcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDp0KFwiMjkwXCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBhZyhhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmdChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gYmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1aZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPWNmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj0kZihhLGIsYyksZC5yZXR1cm49YSxkO2Q9JGUoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9JGYoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1kZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZyl7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1hZihjLGEubW9kZSxkLGcpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9Y2YoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGM9JGUoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9JGYoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRiOnJldHVybiBiPWRmKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihaZihiKXx8XG5sYyhiKSlyZXR1cm4gYj1hZihiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjthZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYz9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGI6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoWmYoYyl8fGxjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTthZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWM/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoWmYoZCl8fGxjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTthZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIEIoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwscj1udWxsLG09Zyx1PWc9MCxwPW51bGw7bnVsbCE9PW0mJnU8aC5sZW5ndGg7dSsrKXttLmluZGV4PnU/KHA9bSxtPW51bGwpOnA9bS5zaWJsaW5nO3ZhciB2PXgoZSxtLGhbdV0sayk7aWYobnVsbD09PXYpe251bGw9PT1tJiYobT1wKTticmVha31hJiZcbm0mJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih2LGcsdSk7bnVsbD09PXI/bD12OnIuc2libGluZz12O3I9djttPXB9aWYodT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt1PGgubGVuZ3RoO3UrKylpZihtPXEoZSxoW3VdLGspKWc9ZihtLGcsdSksbnVsbD09PXI/bD1tOnIuc2libGluZz1tLHI9bTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7dTxoLmxlbmd0aDt1KyspaWYocD16KG0sZSx1LGhbdV0saykpYSYmbnVsbCE9PXAuYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09cC5rZXk/dTpwLmtleSksZz1mKHAsZyx1KSxudWxsPT09cj9sPXA6ci5zaWJsaW5nPXAscj1wO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gUShlLGcsaCxrKXt2YXIgbD1sYyhoKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgbD90KFwiMTUwXCIpOnZvaWQgMDtoPWwuY2FsbChoKTtudWxsPT1oP3QoXCIxNTFcIik6dm9pZCAwO1xuZm9yKHZhciBtPWw9bnVsbCxyPWcsdT1nPTAscD1udWxsLHY9aC5uZXh0KCk7bnVsbCE9PXImJiF2LmRvbmU7dSsrLHY9aC5uZXh0KCkpe3IuaW5kZXg+dT8ocD1yLHI9bnVsbCk6cD1yLnNpYmxpbmc7dmFyIHk9eChlLHIsdi52YWx1ZSxrKTtpZihudWxsPT09eSl7cnx8KHI9cCk7YnJlYWt9YSYmciYmbnVsbD09PXkuYWx0ZXJuYXRlJiZiKGUscik7Zz1mKHksZyx1KTtudWxsPT09bT9sPXk6bS5zaWJsaW5nPXk7bT15O3I9cH1pZih2LmRvbmUpcmV0dXJuIGMoZSxyKSxsO2lmKG51bGw9PT1yKXtmb3IoOyF2LmRvbmU7dSsrLHY9aC5uZXh0KCkpdj1xKGUsdi52YWx1ZSxrKSxudWxsIT09diYmKGc9Zih2LGcsdSksbnVsbD09PW0/bD12Om0uc2libGluZz12LG09dik7cmV0dXJuIGx9Zm9yKHI9ZChlLHIpOyF2LmRvbmU7dSsrLHY9aC5uZXh0KCkpdj16KHIsZSx1LHYudmFsdWUsayksbnVsbCE9PXYmJihhJiZudWxsIT09di5hbHRlcm5hdGUmJnIuZGVsZXRlKG51bGw9PT12LmtleT91Olxudi5rZXkpLGc9Zih2LGcsdSksbnVsbD09PW0/bD12Om0uc2libGluZz12LG09dik7YSYmci5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09YWMmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgWmI6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKWlmKDc9PT1rLnRhZz9mLnR5cGU9PT1hYzprLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1hYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9JGYoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1cbmsuc2libGluZ31mLnR5cGU9PT1hYz8oZD1hZihmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9JGUoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9JGYoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlICRiOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9ZGYoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XG5cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPWNmKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFpmKGYpKXJldHVybiBCKGEsZCxmLGgpO2lmKGxjKGYpKXJldHVybiBRKGEsZCxmLGgpO2wmJmFnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6aD1hLnR5cGUsdChcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIGNnPWJnKCEwKSxkZz1iZyghMSksZWc9bnVsbCxmZz1udWxsLGdnPSExO1xuZnVuY3Rpb24gaGcoYSxiKXt2YXIgYz1NKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gaWcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBqZyhhKXtpZihnZyl7dmFyIGI9Zmc7aWYoYil7dmFyIGM9YjtpZighaWcoYSxiKSl7Yj1GZShjKTtpZighYnx8IWlnKGEsYikpe2EuZWZmZWN0VGFnfD0yO2dnPSExO2VnPWE7cmV0dXJufWhnKGVnLGMpfWVnPWE7Zmc9R2UoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9MixnZz0hMSxlZz1hfX1mdW5jdGlvbiBrZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YS5yZXR1cm47ZWc9YX1mdW5jdGlvbiBsZyhhKXtpZihhIT09ZWcpcmV0dXJuITE7aWYoIWdnKXJldHVybiBrZyhhKSxnZz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUNlKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1mZztiOyloZyhhLGIpLGI9RmUoYik7a2coYSk7Zmc9ZWc/RmUoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gbWcoKXtmZz1lZz1udWxsO2dnPSExfXZhciBuZz1YYi5SZWFjdEN1cnJlbnRPd25lcjtcbmZ1bmN0aW9uIFAoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9kZyhiLG51bGwsYyxkKTpjZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBvZyhhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7Q2YoYixlKTtkPWMoZCxmKTtiLmVmZmVjdFRhZ3w9MTtQKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGcoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFYZShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLHFnKGEsYixnLGQsZSxmKTthPSRlKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6amQsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gcmcoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9WmUoZyxkLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIHFnKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmU8ZiYmamQoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmP3JnKGEsYixmKTpzZyhhLGIsYyxkLGYpfWZ1bmN0aW9uIHRnKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gc2coYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0tlOkouY3VycmVudDtmPUxlKGIsZik7Q2YoYixlKTtjPWMoZCxmKTtiLmVmZmVjdFRhZ3w9MTtQKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gdWcoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtRZShiKX1lbHNlIGY9ITE7Q2YoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLFdmKGIsYyxkLGUpLFlmKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPU5mLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGwpOihsPUwoYyk/S2U6Si5jdXJyZW50LGw9TGUoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJlhmKGIsZyxkLGwpO2pmPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtrPWcuc3RhdGU9eDt2YXIgej1iLnVwZGF0ZVF1ZXVlO251bGwhPT16JiYoc2YoYix6LGQsZyxlKSxrPWIubWVtb2l6ZWRTdGF0ZSk7aCE9PWR8fHghPT1rfHxLLmN1cnJlbnR8fGpmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKFBmKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD1qZnx8VmYoYixjLGgsZCx4LGssbCkpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1OZi5jdXJyZW50RGlzcGF0Y2hlci5yZWFkQ29udGV4dChsKToobD1MKGMpP0tlOkouY3VycmVudCxsPUxlKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4ocT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJlhmKGIsZyxkLGwpLGpmPSExLGs9Yi5tZW1vaXplZFN0YXRlLHg9Zy5zdGF0ZT1rLHo9Yi51cGRhdGVRdWV1ZSxudWxsIT09eiYmKHNmKGIseixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUpLGghPT1kfHxrIT09eHx8Sy5jdXJyZW50fHxqZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihQZihiLGMsbSxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG09amZ8fFZmKGIsYyxoLGQsayx4LGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fFxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIHZnKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHZnKGEsYixjLGQsZSxmKXt0ZyhhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmUmUoYixjLCExKSxyZyhhLGIsZik7ZD1iLnN0YXRlTm9kZTtuZy5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1jZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPWNnKGIsbnVsbCxoLGYpKTpQKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlJlKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gd2coYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9PZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZPZShhLGIuY29udGV4dCwhMSk7SWYoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24geGcoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFN0YXRlO2lmKDA9PT0oYi5lZmZlY3RUYWcmNjQpKXtmPW51bGw7dmFyIGc9ITF9ZWxzZSBmPXt0aW1lZE91dEF0Om51bGwhPT1mP2YudGltZWRPdXRBdDowfSxnPSEwLGIuZWZmZWN0VGFnJj0tNjU7bnVsbD09PWE/Zz8oZz1lLmZhbGxiYWNrLGU9YWYobnVsbCxkLDAsbnVsbCksMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWFmKGcsZCxjLG51bGwpLGUuc2libGluZz1kLGM9ZSxjLnJldHVybj1kLnJldHVybj1iKTpjPWQ9ZGcoYixudWxsLGUuY2hpbGRyZW4sYyk6bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZT8oZD1hLmNoaWxkLGE9ZC5zaWJsaW5nLGc/KGM9ZS5mYWxsYmFjayxlPVplKGQsZC5wZW5kaW5nUHJvcHMsMCksMD09PShiLm1vZGUmMSkmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/XG5iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWQuY2hpbGQmJihlLmNoaWxkPWcpKSxkPWUuc2libGluZz1aZShhLGMsYS5leHBpcmF0aW9uVGltZSksYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1jZyhiLGQuY2hpbGQsZS5jaGlsZHJlbixjKSk6KGE9YS5jaGlsZCxnPyhnPWUuZmFsbGJhY2ssZT1hZihudWxsLGQsMCxudWxsKSxlLmNoaWxkPWEsMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWUuc2libGluZz1hZihnLGQsYyxudWxsKSxkLmVmZmVjdFRhZ3w9MixjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6ZD1jPWNnKGIsYSxlLmNoaWxkcmVuLGMpKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmNoaWxkPWM7cmV0dXJuIGR9XG5mdW5jdGlvbiByZyhhLGIsYyl7bnVsbCE9PWEmJihiLmZpcnN0Q29udGV4dERlcGVuZGVuY3k9YS5maXJzdENvbnRleHREZXBlbmRlbmN5KTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/dChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHlnKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hJiZhLm1lbW9pemVkUHJvcHM9PT1iLnBlbmRpbmdQcm9wcyYmIUsuY3VycmVudCYmZDxjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzp3ZyhiKTttZygpO2JyZWFrO2Nhc2UgNTpLZihiKTticmVhaztjYXNlIDE6TChiLnR5cGUpJiZRZShiKTticmVhaztjYXNlIDQ6SWYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOkFmKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiB4ZyhhLGIsYyk7Yj1yZyhhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfX1yZXR1cm4gcmcoYSxiLGMpfWIuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIuZWxlbWVudFR5cGU7bnVsbCE9PVxuYSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1MZShiLEouY3VycmVudCk7Q2YoYixjKTtlPWQoYSxlKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7aWYoTChkKSl7dmFyIGY9ITA7UWUoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJlBmKGIsZCxnLGEpO2UudXBkYXRlcj1VZjtiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO1lmKGIsZCxhLGMpO2I9dmcobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUChudWxsLGIsZSxjKSxiPWIuY2hpbGQ7XG5yZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7Zj1iLnBlbmRpbmdQcm9wczthPU1mKGUpO2IudHlwZT1hO2U9Yi50YWc9WWUoYSk7Zj1PKGEsZik7Zz12b2lkIDA7c3dpdGNoKGUpe2Nhc2UgMDpnPXNnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxOmc9dWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDExOmc9b2cobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE0Omc9cGcobnVsbCxiLGEsTyhhLnR5cGUsZiksZCxjKTticmVhaztkZWZhdWx0OnQoXCIyODNcIixhKX1yZXR1cm4gZztjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOk8oZCxlKSxzZyhhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TyhkLGUpLHVnKGEsYixkLFxuZSxjKTtjYXNlIDM6d2coYik7ZD1iLnVwZGF0ZVF1ZXVlO251bGw9PT1kP3QoXCIyODJcIik6dm9pZCAwO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7c2YoYixkLGIucGVuZGluZ1Byb3BzLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSltZygpLGI9cmcoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpZmc9R2UoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZWc9YixlPWdnPSEwO2U/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9ZGcoYixudWxsLGQsYykpOihQKGEsYixkLGMpLG1nKCkpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEtmKGIpLG51bGw9PT1hJiZqZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLENlKGQsZSk/Zz1udWxsOm51bGwhPT1cbmYmJkNlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLHRnKGEsYiksMSE9PWMmJmIubW9kZSYxJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFAoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJmpnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4geGcoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSWYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9Y2coYixudWxsLGQsYyk6UChhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOk8oZCxlKSxvZyhhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUChhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFAoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUChhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7QWYoYixmKTtpZihudWxsIT09Zyl7dmFyIGg9Zy52YWx1ZTtmPWg9PT1mJiYoMCE9PWh8fDEvaD09PTEvZil8fGghPT1oJiZmIT09Zj8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj1yZyhhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZz1iLmNoaWxkLG51bGwhPT1nJiYoZy5yZXR1cm49Yik7bnVsbCE9PWc7KXtoPWcuZmlyc3RDb250ZXh0RGVwZW5kZW5jeTtpZihudWxsIT09aCl7ZG97aWYoaC5jb250ZXh0PT09ZCYmMCE9PShoLm9ic2VydmVkQml0cyZmKSl7aWYoMT09PWcudGFnKXt2YXIgaz1tZihjKTtrLnRhZz0yO29mKGcsayl9Zy5leHBpcmF0aW9uVGltZTxcbmMmJihnLmV4cGlyYXRpb25UaW1lPWMpO2s9Zy5hbHRlcm5hdGU7bnVsbCE9PWsmJmsuZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7Zm9yKHZhciBsPWcucmV0dXJuO251bGwhPT1sOyl7az1sLmFsdGVybmF0ZTtpZihsLmNoaWxkRXhwaXJhdGlvblRpbWU8YylsLmNoaWxkRXhwaXJhdGlvblRpbWU9YyxudWxsIT09ayYmay5jaGlsZEV4cGlyYXRpb25UaW1lPGMmJihrLmNoaWxkRXhwaXJhdGlvblRpbWU9Yyk7ZWxzZSBpZihudWxsIT09ayYmay5jaGlsZEV4cGlyYXRpb25UaW1lPGMpay5jaGlsZEV4cGlyYXRpb25UaW1lPWM7ZWxzZSBicmVhaztsPWwucmV0dXJufX1rPWcuY2hpbGQ7aD1oLm5leHR9d2hpbGUobnVsbCE9PWgpfWVsc2Ugaz0xMD09PWcudGFnP2cudHlwZT09PWIudHlwZT9udWxsOmcuY2hpbGQ6Zy5jaGlsZDtpZihudWxsIT09aylrLnJldHVybj1nO2Vsc2UgZm9yKGs9ZztudWxsIT09azspe2lmKGs9PT1iKXtrPW51bGw7YnJlYWt9Zz1rLnNpYmxpbmc7XG5pZihudWxsIT09Zyl7Zy5yZXR1cm49ay5yZXR1cm47az1nO2JyZWFrfWs9ay5yZXR1cm59Zz1rfX1QKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLENmKGIsYyksZT1EZihlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUChhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9TyhlLnR5cGUsYi5wZW5kaW5nUHJvcHMpLHBnKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBxZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsUWUoYikpOlxuYT0hMSxDZihiLGMpLFdmKGIsZCxlLGMpLFlmKGIsZCxlLGMpLHZnKG51bGwsYixkLCEwLGEsYyk7ZGVmYXVsdDp0KFwiMTU2XCIpfX1mdW5jdGlvbiB6ZyhhKXthLmVmZmVjdFRhZ3w9NH12YXIgQWc9dm9pZCAwLEJnPXZvaWQgMCxGZz12b2lkIDAsR2c9dm9pZCAwO0FnPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCZz1mdW5jdGlvbigpe307XG5GZz1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7SGYoTi5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9QWMoZyxmKTtkPUFjKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1lZShnLGYpO2Q9ZWUoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1nZShnLGYpO2Q9Z2UoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz15ZSl9dmUoYyxkKTtnPWM9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBrPWZbY107Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiYoaHx8KGg9e30pLGhbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJihzYS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGw9ZFtjXTtrPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmbCE9PWsmJihudWxsIT1sfHxudWxsIT1rKSlpZihcInN0eWxlXCI9PT1jKWlmKGspe2ZvcihnIGluIGspIWsuaGFzT3duUHJvcGVydHkoZyl8fGwmJmwuaGFzT3duUHJvcGVydHkoZyl8fChofHwoaD17fSksaFtnXT1cIlwiKTtmb3IoZyBpbiBsKWwuaGFzT3duUHJvcGVydHkoZykmJmtbZ10hPT1sW2ddJiYoaHx8XG4oaD17fSksaFtnXT1sW2ddKX1lbHNlIGh8fChhfHwoYT1bXSksYS5wdXNoKGMsaCkpLGg9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8obD1sP2wuX19odG1sOnZvaWQgMCxrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmshPT1sJiYoYT1hfHxbXSkucHVzaChjLFwiXCIrbCkpOlwiY2hpbGRyZW5cIj09PWM/az09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYoc2EuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWwmJnhlKGUsYyksYXx8az09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxsKSl9aCYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGgpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYmemcoYil9fTtHZz1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmemcoYil9O1xuZnVuY3Rpb24gSGcoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1uYyhjKSk7bnVsbCE9PWMmJm1jKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJm1jKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIElnKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0pnKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEtnKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBUZSYmVGUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5sYXN0RWZmZWN0LG51bGwhPT1iKSl7dmFyIGM9Yj1iLm5leHQ7ZG97dmFyIGQ9Yy5kZXN0cm95O2lmKG51bGwhPT1kKXt2YXIgZT1hO3RyeXtkKCl9Y2F0Y2goZil7SmcoZSxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWIpfWJyZWFrO2Nhc2UgMTpJZyhhKTtiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7SmcoYSxmKX1icmVhaztjYXNlIDU6SWcoYSk7YnJlYWs7Y2FzZSA0OkxnKGEpfX1cbmZ1bmN0aW9uIE1nKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gTmcoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoTWcoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXQoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0KFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYocGUoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fE1nKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhnPWIsaD1lLnN0YXRlTm9kZSw4PT09Zy5ub2RlVHlwZT8oZj1nLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoaCxnKSk6KGY9ZyxmLmFwcGVuZENoaWxkKGgpKSxnPWcuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09ZyYmdm9pZCAwIT09Z3x8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz15ZSkpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIExnKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP3QoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZihLZyhnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWc/KGQ9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxlPSEwKTpLZyhiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiBPZyhhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmJyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbSGFdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkNjKGMsZCk7d2UoYSxlKTtiPXdlKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90ZShjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2UoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BlKGMsaCk6eWMoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkRjKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWUoYyxcbmQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP2ZlKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mZShjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmUoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP3QoXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjPWIubWVtb2l6ZWRTdGF0ZTthPWI7bnVsbD09PWM/ZD0hMTooZD0hMCxhPWIuY2hpbGQsMD09PWMudGltZWRPdXRBdCYmKGMudGltZWRPdXRBdD1RZigpKSk7aWYobnVsbCE9PWEpYTpmb3IoYj1jPWE7Oyl7aWYoNT09PVxuYi50YWcpYT1iLnN0YXRlTm9kZSxkP2Euc3R5bGUuZGlzcGxheT1cIm5vbmVcIjooYT1iLnN0YXRlTm9kZSxmPWIubWVtb2l6ZWRQcm9wcy5zdHlsZSxmPXZvaWQgMCE9PWYmJm51bGwhPT1mJiZmLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9mLmRpc3BsYXk6bnVsbCxhLnN0eWxlLmRpc3BsYXk9c2UoXCJkaXNwbGF5XCIsZikpO2Vsc2UgaWYoNj09PWIudGFnKWIuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6Yi5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1iLnRhZyYmbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7YT1iLmNoaWxkLnNpYmxpbmc7YS5yZXR1cm49YjtiPWE7Y29udGludWV9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWMpYnJlYWsgYTtmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YylicmVhayBhO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1cbmIucmV0dXJuO2I9Yi5zaWJsaW5nfWJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0KFwiMTYzXCIpfX1mdW5jdGlvbiBQZyhhLGIsYyl7Yz1tZihjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRZyhkKTtIZyhhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFJnKGEsYixjKXtjPW1mKGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVNnP1NnPW5ldyBTZXQoW3RoaXNdKTpTZy5hZGQodGhpcykpO3ZhciBjPWIudmFsdWUsZT1iLnN0YWNrO0hnKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZT9lOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gVGcoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TChhLnR5cGUpJiZNZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBKZihhKSxOZShhKSxiPWEuZWZmZWN0VGFnLDAhPT0oYiY2NCk/dChcIjI4NVwiKTp2b2lkIDAsYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhO2Nhc2UgNTpyZXR1cm4gTGYoYSksbnVsbDtjYXNlIDEzOnJldHVybiBiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgNDpyZXR1cm4gSmYoYSksbnVsbDtjYXNlIDEwOnJldHVybiBCZihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFVnPXtyZWFkQ29udGV4dDpEZn0sVmc9WGIuUmVhY3RDdXJyZW50T3duZXIsV2c9MTA3Mzc0MTgyMixYZz0wLFlnPSExLFI9bnVsbCxTPW51bGwsVD0wLFpnPS0xLCRnPSExLFU9bnVsbCxhaD0hMSxiaD1udWxsLGNoPW51bGwsU2c9bnVsbDtmdW5jdGlvbiBkaCgpe2lmKG51bGwhPT1SKWZvcih2YXIgYT1SLnJldHVybjtudWxsIT09YTspe3ZhciBiPWE7c3dpdGNoKGIudGFnKXtjYXNlIDE6dmFyIGM9Yi50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1jJiZ2b2lkIDAhPT1jJiZNZShiKTticmVhaztjYXNlIDM6SmYoYik7TmUoYik7YnJlYWs7Y2FzZSA1OkxmKGIpO2JyZWFrO2Nhc2UgNDpKZihiKTticmVhaztjYXNlIDEwOkJmKGIpfWE9YS5yZXR1cm59Uz1udWxsO1Q9MDtaZz0tMTskZz0hMTtSPW51bGx9ZnVuY3Rpb24gU2YoKXtudWxsIT09Y2gmJihiYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayhiaCksY2goKSl9XG5mdW5jdGlvbiBlaChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyYxMDI0KSl7Uj1hO2E6e3ZhciBlPWI7Yj1hO3ZhciBmPVQ7dmFyIGc9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6TChiLnR5cGUpJiZNZShiKTticmVhaztjYXNlIDM6SmYoYik7TmUoYik7Zz1iLnN0YXRlTm9kZTtnLnBlbmRpbmdDb250ZXh0JiYoZy5jb250ZXh0PWcucGVuZGluZ0NvbnRleHQsZy5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09ZXx8bnVsbD09PWUuY2hpbGQpbGcoYiksYi5lZmZlY3RUYWcmPS0zO0JnKGIpO2JyZWFrO2Nhc2UgNTpMZihiKTt2YXIgaD1IZihHZi5jdXJyZW50KTtmPWIudHlwZTtpZihudWxsIT09ZSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRmcoZSxiLGYsZyxoKSxlLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PVxuMTI4KTtlbHNlIGlmKGcpe3ZhciBrPUhmKE4uY3VycmVudCk7aWYobGcoYikpe2c9YjtlPWcuc3RhdGVOb2RlO3ZhciBsPWcudHlwZSxtPWcubWVtb2l6ZWRQcm9wcyxxPWg7ZVtHYV09ZztlW0hhXT1tO2Y9dm9pZCAwO2g9bDtzd2l0Y2goaCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpHKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihsPTA7bDxiYi5sZW5ndGg7bCsrKUcoYmJbbF0sZSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGUpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGUpO0coXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpHKFwicmVzZXRcIixlKTtHKFwic3VibWl0XCIsZSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QmMoZSxtKTtHKFwiaW52YWxpZFwiLGUpO3hlKHEsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZS5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07RyhcImludmFsaWRcIixlKTt4ZShxLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGUoZSxtKSxHKFwiaW52YWxpZFwiLGUpLHhlKHEsXCJvbkNoYW5nZVwiKX12ZShoLG0pO2w9bnVsbDtmb3IoZiBpbiBtKW0uaGFzT3duUHJvcGVydHkoZikmJihrPW1bZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/ZS50ZXh0Q29udGVudCE9PWsmJihsPVtcImNoaWxkcmVuXCIsa10pOlwibnVtYmVyXCI9PT10eXBlb2YgayYmZS50ZXh0Q29udGVudCE9PVwiXCIrayYmKGw9W1wiY2hpbGRyZW5cIixcIlwiK2tdKTpzYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ayYmeGUocSxmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOlZiKGUpO0ZjKGUsbSwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIoZSk7amUoZSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIG0ub25DbGljayYmXG4oZS5vbmNsaWNrPXllKX1mPWw7Zy51cGRhdGVRdWV1ZT1mO2c9bnVsbCE9PWY/ITA6ITE7ZyYmemcoYil9ZWxzZXttPWI7ZT1mO3E9ZztsPTk9PT1oLm5vZGVUeXBlP2g6aC5vd25lckRvY3VtZW50O2s9PT1rZS5odG1sJiYoaz1sZShlKSk7az09PWtlLmh0bWw/XCJzY3JpcHRcIj09PWU/KGU9bC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsbD1lLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgcS5pcz9sPWwuY3JlYXRlRWxlbWVudChlLHtpczpxLmlzfSk6KGw9bC5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiZxLm11bHRpcGxlJiYobC5tdWx0aXBsZT0hMCkpOmw9bC5jcmVhdGVFbGVtZW50TlMoayxlKTtlPWw7ZVtHYV09bTtlW0hhXT1nO0FnKGUsYiwhMSwhMSk7cT1lO2w9ZjttPWc7dmFyIHg9aCx6PXdlKGwsbSk7c3dpdGNoKGwpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RyhcImxvYWRcIixcbnEpO2g9bTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YmIubGVuZ3RoO2grKylHKGJiW2hdLHEpO2g9bTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIscSk7aD1tO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLHEpO0coXCJsb2FkXCIscSk7aD1tO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RyhcInJlc2V0XCIscSk7RyhcInN1Ym1pdFwiLHEpO2g9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixxKTtoPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6QmMocSxtKTtoPUFjKHEsbSk7RyhcImludmFsaWRcIixxKTt4ZSh4LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9ZWUocSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6cS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2g9bih7fSxtLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLHEpO3hlKHgsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoZShxLFxubSk7aD1nZShxLG0pO0coXCJpbnZhbGlkXCIscSk7eGUoeCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1tfXZlKGwsaCk7az12b2lkIDA7dmFyIEI9bCxRPXEsdj1oO2ZvcihrIGluIHYpaWYodi5oYXNPd25Qcm9wZXJ0eShrKSl7dmFyIHI9dltrXTtcInN0eWxlXCI9PT1rP3RlKFEscik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09az8ocj1yP3IuX19odG1sOnZvaWQgMCxudWxsIT1yJiZvZShRLHIpKTpcImNoaWxkcmVuXCI9PT1rP1wic3RyaW5nXCI9PT10eXBlb2Ygcj8oXCJ0ZXh0YXJlYVwiIT09Qnx8XCJcIiE9PXIpJiZwZShRLHIpOlwibnVtYmVyXCI9PT10eXBlb2YgciYmcGUoUSxcIlwiK3IpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1rJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ayYmXCJhdXRvRm9jdXNcIiE9PWsmJihzYS5oYXNPd25Qcm9wZXJ0eShrKT9udWxsIT1yJiZ4ZSh4LGspOm51bGwhPXImJnljKFEsayxyLHopKX1zd2l0Y2gobCl7Y2FzZSBcImlucHV0XCI6VmIocSk7XG5GYyhxLG0sITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKHEpO2plKHEsbSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPW0udmFsdWUmJnEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3pjKG0udmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6aD1xO2gubXVsdGlwbGU9ISFtLm11bHRpcGxlO3E9bS52YWx1ZTtudWxsIT1xP2ZlKGgsISFtLm11bHRpcGxlLHEsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZmZShoLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYocS5vbmNsaWNrPXllKX0oZz1CZShmLGcpKSYmemcoYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDY6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/R2coZSxiLGUubWVtb2l6ZWRQcm9wcyxnKTooXCJzdHJpbmdcIiE9PVxudHlwZW9mIGcmJihudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2NlwiKTp2b2lkIDApLGU9SGYoR2YuY3VycmVudCksSGYoTi5jdXJyZW50KSxsZyhiKT8oZz1iLGY9Zy5zdGF0ZU5vZGUsZT1nLm1lbW9pemVkUHJvcHMsZltHYV09ZywoZz1mLm5vZGVWYWx1ZSE9PWUpJiZ6ZyhiKSk6KGY9YixnPSg5PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZyksZ1tHYV09YixmLnN0YXRlTm9kZT1nKSk7YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOmc9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWY7Uj1iO2JyZWFrIGF9Zz1udWxsIT09ZztmPW51bGwhPT1lJiZudWxsIT09ZS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYhZyYmZiYmKGU9ZS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoaD1iLmZpcnN0RWZmZWN0LG51bGwhPT1oPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWgpOihiLmZpcnN0RWZmZWN0PVxuYi5sYXN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKTtpZihnIT09Znx8MD09PShiLmVmZmVjdFRhZyYxKSYmZyliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OkpmKGIpO0JnKGIpO2JyZWFrO2Nhc2UgMTA6QmYoYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpMKGIudHlwZSkmJk1lKGIpO2JyZWFrO2RlZmF1bHQ6dChcIjE1NlwiKX1SPW51bGx9Yj1hO2lmKDE9PT1UfHwxIT09Yi5jaGlsZEV4cGlyYXRpb25UaW1lKXtnPTA7Zm9yKGY9Yi5jaGlsZDtudWxsIT09ZjspZT1mLmV4cGlyYXRpb25UaW1lLGg9Zi5jaGlsZEV4cGlyYXRpb25UaW1lLGU+ZyYmKGc9ZSksaD5nJiYoZz1oKSxmPWYuc2libGluZztiLmNoaWxkRXhwaXJhdGlvblRpbWU9Z31pZihudWxsIT09UilyZXR1cm4gUjtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyYxMDI0KSYmKG51bGw9PT1cbmMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9VGcoYSxUKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTEwMjMsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTEwMjQpfWlmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfXJldHVybiBudWxsfVxuZnVuY3Rpb24gZmgoYSl7dmFyIGI9eWcoYS5hbHRlcm5hdGUsYSxUKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWVoKGEpKTtWZy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBnaChhLGIpe1lnP3QoXCIyNDNcIik6dm9pZCAwO1NmKCk7WWc9ITA7VmcuY3VycmVudERpc3BhdGNoZXI9VWc7dmFyIGM9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtpZihjIT09VHx8YSE9PVN8fG51bGw9PT1SKWRoKCksUz1hLFQ9YyxSPVplKFMuY3VycmVudCxudWxsLFQpLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9ITE7ZG97dHJ5e2lmKGIpZm9yKDtudWxsIT09UiYmIWhoKCk7KVI9ZmgoUik7ZWxzZSBmb3IoO251bGwhPT1SOylSPWZoKFIpfWNhdGNoKEIpe2lmKHpmPXlmPXhmPW51bGwsbnVsbD09PVIpZD0hMCxRZyhCKTtlbHNle251bGw9PT1SP3QoXCIyNzFcIik6dm9pZCAwO3ZhciBlPVIsZj1lLnJldHVybjtpZihudWxsPT09ZilkPSEwLFFnKEIpO2Vsc2V7YTp7dmFyIGc9YSxoPWYsaz1lLGw9QjtmPVQ7ay5lZmZlY3RUYWd8PTEwMjQ7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09bCYmXCJvYmplY3RcIj09PVxudHlwZW9mIGwmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsLnRoZW4pe3ZhciBtPWw7bD1oO3ZhciBxPS0xLHg9LTE7ZG97aWYoMTM9PT1sLnRhZyl7dmFyIHo9bC5hbHRlcm5hdGU7aWYobnVsbCE9PXomJih6PXoubWVtb2l6ZWRTdGF0ZSxudWxsIT09eikpe3g9MTAqKDEwNzM3NDE4MjItei50aW1lZE91dEF0KTticmVha316PWwucGVuZGluZ1Byb3BzLm1heER1cmF0aW9uO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgeilpZigwPj16KXE9MDtlbHNlIGlmKC0xPT09cXx8ejxxKXE9en1sPWwucmV0dXJufXdoaWxlKG51bGwhPT1sKTtsPWg7ZG97aWYoej0xMz09PWwudGFnKXo9dm9pZCAwPT09bC5tZW1vaXplZFByb3BzLmZhbGxiYWNrPyExOm51bGw9PT1sLm1lbW9pemVkU3RhdGU7aWYoeil7aD1paC5iaW5kKG51bGwsZyxsLGssMD09PShsLm1vZGUmMSk/MTA3Mzc0MTgyMzpmKTttLnRoZW4oaCxoKTtpZigwPT09KGwubW9kZSYxKSl7bC5lZmZlY3RUYWd8PTY0O2suZWZmZWN0VGFnJj0tMTk1NztcbjE9PT1rLnRhZyYmbnVsbD09PWsuYWx0ZXJuYXRlJiYoay50YWc9MTcpO2suZXhwaXJhdGlvblRpbWU9ZjticmVhayBhfS0xPT09cT9nPTEwNzM3NDE4MjM6KC0xPT09eCYmKHg9MTAqKDEwNzM3NDE4MjItaGYoZyxmKSktNUUzKSxnPXgrcSk7MDw9ZyYmWmc8ZyYmKFpnPWcpO2wuZWZmZWN0VGFnfD0yMDQ4O2wuZXhwaXJhdGlvblRpbWU9ZjticmVhayBhfWw9bC5yZXR1cm59d2hpbGUobnVsbCE9PWwpO2w9RXJyb3IoKG1jKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIituYyhrKSl9JGc9ITA7bD12ZihsLGspO2c9aDtkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzprPVxubDtnLmVmZmVjdFRhZ3w9MjA0ODtnLmV4cGlyYXRpb25UaW1lPWY7Zj1QZyhnLGssZik7cGYoZyxmKTticmVhayBhO2Nhc2UgMTppZihrPWwsaD1nLnR5cGUsbT1nLnN0YXRlTm9kZSwwPT09KGcuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PW0mJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNnfHwhU2cuaGFzKG0pKSkpe2cuZWZmZWN0VGFnfD0yMDQ4O2cuZXhwaXJhdGlvblRpbWU9ZjtmPVJnKGcsayxmKTtwZihnLGYpO2JyZWFrIGF9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpfVI9ZWgoZSk7Y29udGludWV9fX1icmVha313aGlsZSgxKTtZZz0hMTt6Zj15Zj14Zj1WZy5jdXJyZW50RGlzcGF0Y2hlcj1udWxsO2lmKGQpUz1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09UilhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7ZD1hLmN1cnJlbnQuYWx0ZXJuYXRlO1xubnVsbD09PWQ/dChcIjI4MVwiKTp2b2lkIDA7Uz1udWxsO2lmKCRnKXtlPWEubGF0ZXN0UGVuZGluZ1RpbWU7Zj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7Zz1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMCE9PWUmJmU8Y3x8MCE9PWYmJmY8Y3x8MCE9PWcmJmc8Yyl7Z2YoYSxjKTtqaChhLGQsYyxhLmV4cGlyYXRpb25UaW1lLC0xKTtyZXR1cm59aWYoIWEuZGlkRXJyb3ImJmIpe2EuZGlkRXJyb3I9ITA7Yz1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWM7Yj1hLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7amgoYSxkLGMsYiwtMSk7cmV0dXJufX1iJiYtMSE9PVpnPyhnZihhLGMpLGI9MTAqKDEwNzM3NDE4MjItaGYoYSxjKSksYjxaZyYmKFpnPWIpLGI9MTAqKDEwNzM3NDE4MjItUWYoKSksYj1aZy1iLGpoKGEsZCxjLGEuZXhwaXJhdGlvblRpbWUsMD5iPzA6YikpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuZmluaXNoZWRXb3JrPWQpfX1cbmZ1bmN0aW9uIEpnKGEsYil7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7c3dpdGNoKGMudGFnKXtjYXNlIDE6dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNnfHwhU2cuaGFzKGQpKSl7YT12ZihiLGEpO2E9UmcoYyxhLDEwNzM3NDE4MjMpO29mKGMsYSk7VGYoYywxMDczNzQxODIzKTtyZXR1cm59YnJlYWs7Y2FzZSAzOmE9dmYoYixhKTthPVBnKGMsYSwxMDczNzQxODIzKTtvZihjLGEpO1RmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWM9Yy5yZXR1cm59Mz09PWEudGFnJiYoYz12ZihiLGEpLGM9UGcoYSxjLDEwNzM3NDE4MjMpLG9mKGEsYyksVGYoYSwxMDczNzQxODIzKSl9XG5mdW5jdGlvbiBSZihhLGIpezAhPT1YZz9hPVhnOllnP2E9YWg/MTA3Mzc0MTgyMzpUOmIubW9kZSYxPyhhPWtoPzEwNzM3NDE4MjItMTAqKCgoMTA3Mzc0MTgyMi1hKzE1KS8xMHwwKSsxKToxMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItYSs1MDApLzI1fDApKzEpLG51bGwhPT1TJiZhPT09VCYmLS1hKTphPTEwNzM3NDE4MjM7a2gmJigwPT09bGh8fGE8bGgpJiYobGg9YSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBpaChhLGIsYyxkKXt2YXIgZT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTt2YXIgZj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7aWYoMCE9PWUmJmQ8PWUmJmQ+PWYpe2Y9ZT1kO2EuZGlkRXJyb3I9ITE7dmFyIGc9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDA9PT1nfHxnPmYpYS5sYXRlc3RQaW5nZWRUaW1lPWY7ZmYoZixhKX1lbHNlIGU9UWYoKSxlPVJmKGUsYiksZWYoYSxlKTswIT09KGIubW9kZSYxKSYmYT09PVMmJlQ9PT1kJiYoUz1udWxsKTttaChiLGUpOzA9PT0oYi5tb2RlJjEpJiYobWgoYyxlKSwxPT09Yy50YWcmJm51bGwhPT1jLnN0YXRlTm9kZSYmKGI9bWYoZSksYi50YWc9MixvZihjLGIpKSk7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZuaChhLGMpfVxuZnVuY3Rpb24gbWgoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1yZXR1cm4gZX1cbmZ1bmN0aW9uIFRmKGEsYil7YT1taChhLGIpO251bGwhPT1hJiYoIVlnJiYwIT09VCYmYj5UJiZkaCgpLGVmKGEsYiksWWcmJiFhaCYmUz09PWF8fG5oKGEsYS5leHBpcmF0aW9uVGltZSksb2g+cGgmJihvaD0wLHQoXCIxODVcIikpKX1mdW5jdGlvbiBxaChhLGIsYyxkLGUpe3ZhciBmPVhnO1hnPTEwNzM3NDE4MjM7dHJ5e3JldHVybiBhKGIsYyxkLGUpfWZpbmFsbHl7WGc9Zn19dmFyIHJoPW51bGwsVj1udWxsLHNoPTAsdGg9dm9pZCAwLFc9ITEsdWg9bnVsbCxYPTAsbGg9MCx2aD0hMSx3aD1udWxsLFo9ITEseGg9ITEsa2g9ITEseWg9bnVsbCx6aD1iYS51bnN0YWJsZV9ub3coKSxBaD0xMDczNzQxODIyLSh6aC8xMHwwKSxCaD1BaCxwaD01MCxvaD0wLENoPW51bGw7ZnVuY3Rpb24gRGgoKXtBaD0xMDczNzQxODIyLSgoYmEudW5zdGFibGVfbm93KCktemgpLzEwfDApfVxuZnVuY3Rpb24gRWgoYSxiKXtpZigwIT09c2gpe2lmKGI8c2gpcmV0dXJuO251bGwhPT10aCYmYmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sodGgpfXNoPWI7YT1iYS51bnN0YWJsZV9ub3coKS16aDt0aD1iYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKEZoLHt0aW1lb3V0OjEwKigxMDczNzQxODIyLWIpLWF9KX1mdW5jdGlvbiBqaChhLGIsYyxkLGUpe2EuZXhwaXJhdGlvblRpbWU9ZDswIT09ZXx8aGgoKT8wPGUmJihhLnRpbWVvdXRIYW5kbGU9RGUoR2guYmluZChudWxsLGEsYixjKSxlKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5maW5pc2hlZFdvcms9Yil9ZnVuY3Rpb24gR2goYSxiLGMpe2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWM7YS5maW5pc2hlZFdvcms9YjtEaCgpO0JoPUFoO0hoKGEsYyl9ZnVuY3Rpb24gUWYoKXtpZihXKXJldHVybiBCaDtJaCgpO2lmKDA9PT1YfHwxPT09WClEaCgpLEJoPUFoO3JldHVybiBCaH1cbmZ1bmN0aW9uIG5oKGEsYil7bnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3Q/KGEuZXhwaXJhdGlvblRpbWU9YixudWxsPT09Vj8ocmg9Vj1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KFY9Vi5uZXh0U2NoZWR1bGVkUm9vdD1hLFYubmV4dFNjaGVkdWxlZFJvb3Q9cmgpKTpiPmEuZXhwaXJhdGlvblRpbWUmJihhLmV4cGlyYXRpb25UaW1lPWIpO1d8fChaP3hoJiYodWg9YSxYPTEwNzM3NDE4MjMsSmgoYSwxMDczNzQxODIzLCExKSk6MTA3Mzc0MTgyMz09PWI/S2goMTA3Mzc0MTgyMywhMSk6RWgoYSxiKSl9XG5mdW5jdGlvbiBJaCgpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1WKWZvcih2YXIgYz1WLGQ9cmg7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PVY/dChcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe3JoPVY9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PXJoKXJoPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxWLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PVYpe1Y9YztWLm5leHRTY2hlZHVsZWRSb290PXJoO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7ZT5hJiYoYT1lLGI9ZCk7aWYoZD09PVYpYnJlYWs7aWYoMTA3Mzc0MTgyMz09PVxuYSlicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX11aD1iO1g9YX12YXIgTGg9ITE7ZnVuY3Rpb24gaGgoKXtyZXR1cm4gTGg/ITA6YmEudW5zdGFibGVfc2hvdWxkWWllbGQoKT9MaD0hMDohMX1mdW5jdGlvbiBGaCgpe3RyeXtpZighaGgoKSYmbnVsbCE9PXJoKXtEaCgpO3ZhciBhPXJoO2Rve3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7MCE9PWImJkFoPD1iJiYoYS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1BaCk7YT1hLm5leHRTY2hlZHVsZWRSb290fXdoaWxlKGEhPT1yaCl9S2goMCwhMCl9ZmluYWxseXtMaD0hMX19XG5mdW5jdGlvbiBLaChhLGIpe0loKCk7aWYoYilmb3IoRGgoKSxCaD1BaDtudWxsIT09dWgmJjAhPT1YJiZhPD1YJiYhKExoJiZBaD5YKTspSmgodWgsWCxBaD5YKSxJaCgpLERoKCksQmg9QWg7ZWxzZSBmb3IoO251bGwhPT11aCYmMCE9PVgmJmE8PVg7KUpoKHVoLFgsITEpLEloKCk7YiYmKHNoPTAsdGg9bnVsbCk7MCE9PVgmJkVoKHVoLFgpO29oPTA7Q2g9bnVsbDtpZihudWxsIT09eWgpZm9yKGE9eWgseWg9bnVsbCxiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXt2aHx8KHZoPSEwLHdoPWQpfX1pZih2aCl0aHJvdyBhPXdoLHdoPW51bGwsdmg9ITEsYTt9ZnVuY3Rpb24gSGgoYSxiKXtXP3QoXCIyNTNcIik6dm9pZCAwO3VoPWE7WD1iO0poKGEsYiwhMSk7S2goMTA3Mzc0MTgyMywhMSl9XG5mdW5jdGlvbiBKaChhLGIsYyl7Vz90KFwiMjQ1XCIpOnZvaWQgMDtXPSEwO2lmKGMpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kP01oKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsRWUoZCkpLGdoKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmKGhoKCk/YS5maW5pc2hlZFdvcms9ZDpNaChhLGQsYikpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/TWgoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSxFZShkKSksZ2goYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiZNaChhLGQsYikpO1c9ITF9XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YyYmKG51bGw9PT15aD95aD1bZF06eWgucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5leHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO2E9PT1DaD9vaCsrOihDaD1hLG9oPTApO2FoPVlnPSEwO2EuY3VycmVudD09PWI/dChcIjE3N1wiKTp2b2lkIDA7Yz1hLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09Yz90KFwiMjYxXCIpOnZvaWQgMDthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO2Q9Yi5leHBpcmF0aW9uVGltZTt2YXIgZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU7ZD1lPmQ/ZTpkO2EuZGlkRXJyb3I9ITE7MD09PWQ/KGEuZWFybGllc3RQZW5kaW5nVGltZT0wLGEubGF0ZXN0UGVuZGluZ1RpbWU9MCxhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT1cbjApOihlPWEubGF0ZXN0UGVuZGluZ1RpbWUsMCE9PWUmJihlPmQ/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9MDphLmVhcmxpZXN0UGVuZGluZ1RpbWU+ZCYmKGEuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lKSksZT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZSwwPT09ZT9lZihhLGQpOmQ8YS5sYXRlc3RTdXNwZW5kZWRUaW1lPyhhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wLGVmKGEsZCkpOmQ+ZSYmZWYoYSxkKSk7ZmYoMCxhKTtWZy5jdXJyZW50PW51bGw7MTxiLmVmZmVjdFRhZz9udWxsIT09Yi5sYXN0RWZmZWN0PyhiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLGQ9Yi5maXJzdEVmZmVjdCk6ZD1iOmQ9Yi5maXJzdEVmZmVjdDt6ZT1IZDtlPVRkKCk7aWYoVWQoZSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGUpdmFyIGY9e3N0YXJ0OmUuc2VsZWN0aW9uU3RhcnQsXG5lbmQ6ZS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Zj0oZj1lLm93bmVyRG9jdW1lbnQpJiZmLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGc9Zi5nZXRTZWxlY3Rpb24mJmYuZ2V0U2VsZWN0aW9uKCk7aWYoZyYmMCE9PWcucmFuZ2VDb3VudCl7Zj1nLmFuY2hvck5vZGU7dmFyIGg9Zy5hbmNob3JPZmZzZXQsaz1nLmZvY3VzTm9kZTtnPWcuZm9jdXNPZmZzZXQ7dHJ5e2Yubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaChkYil7Zj1udWxsO2JyZWFrIGF9dmFyIGw9MCxtPS0xLHE9LTEseD0wLHo9MCxCPWUsUT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHY7Oyl7QiE9PWZ8fDAhPT1oJiYzIT09Qi5ub2RlVHlwZXx8KG09bCtoKTtCIT09a3x8MCE9PWcmJjMhPT1CLm5vZGVUeXBlfHwocT1sK2cpOzM9PT1CLm5vZGVUeXBlJiYobCs9Qi5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHY9Qi5maXJzdENoaWxkKSlicmVhaztRPUI7Qj12fWZvcig7Oyl7aWYoQj09PWUpYnJlYWsgYjtRPT09ZiYmXG4rK3g9PT1oJiYobT1sKTtRPT09ayYmKyt6PT09ZyYmKHE9bCk7aWYobnVsbCE9PSh2PUIubmV4dFNpYmxpbmcpKWJyZWFrO0I9UTtRPUIucGFyZW50Tm9kZX1CPXZ9Zj0tMT09PW18fC0xPT09cT9udWxsOntzdGFydDptLGVuZDpxfX1lbHNlIGY9bnVsbH1mPWZ8fHtzdGFydDowLGVuZDowfX1lbHNlIGY9bnVsbDtBZT17Zm9jdXNlZEVsZW06ZSxzZWxlY3Rpb25SYW5nZTpmfTtIZD0hMTtmb3IoVT1kO251bGwhPT1VOyl7ZT0hMTtmPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09VTspe2lmKFUuZWZmZWN0VGFnJjI1NilhOnt2YXIgcj1VLmFsdGVybmF0ZTtoPVU7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrIGE7Y2FzZSAxOmlmKGguZWZmZWN0VGFnJjI1NiYmbnVsbCE9PXIpe3ZhciB1PXIubWVtb2l6ZWRQcm9wcyx5PXIubWVtb2l6ZWRTdGF0ZSxZPWguc3RhdGVOb2RlLFRoPVkuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoaC5lbGVtZW50VHlwZT09PWgudHlwZT9cbnU6TyhoLnR5cGUsdSkseSk7WS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1UaH1icmVhayBhO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrIGE7ZGVmYXVsdDp0KFwiMTYzXCIpfX1VPVUubmV4dEVmZmVjdH19Y2F0Y2goZGIpe2U9ITAsZj1kYn1lJiYobnVsbD09PVU/dChcIjE3OFwiKTp2b2lkIDAsSmcoVSxmKSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9Zm9yKFU9ZDtudWxsIT09VTspe3I9ITE7dT12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXt2YXIgdz1VLmVmZmVjdFRhZzt3JjE2JiZwZShVLnN0YXRlTm9kZSxcIlwiKTtpZih3JjEyOCl7dmFyIEM9VS5hbHRlcm5hdGU7aWYobnVsbCE9PUMpe3ZhciBwPUMucmVmO251bGwhPT1wJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHA/cChudWxsKTpwLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh3JjE0KXtjYXNlIDI6TmcoVSk7VS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpOZyhVKTtVLmVmZmVjdFRhZyY9XG4tMztPZyhVLmFsdGVybmF0ZSxVKTticmVhaztjYXNlIDQ6T2coVS5hbHRlcm5hdGUsVSk7YnJlYWs7Y2FzZSA4Onk9VSxMZyh5KSx5LnJldHVybj1udWxsLHkuY2hpbGQ9bnVsbCx5LmFsdGVybmF0ZSYmKHkuYWx0ZXJuYXRlLmNoaWxkPW51bGwseS5hbHRlcm5hdGUucmV0dXJuPW51bGwpfVU9VS5uZXh0RWZmZWN0fX1jYXRjaChkYil7cj0hMCx1PWRifXImJihudWxsPT09VT90KFwiMTc4XCIpOnZvaWQgMCxKZyhVLHUpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1wPUFlO0M9VGQoKTt3PXAuZm9jdXNlZEVsZW07dT1wLnNlbGVjdGlvblJhbmdlO2lmKEMhPT13JiZ3JiZ3Lm93bmVyRG9jdW1lbnQmJlNkKHcub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdykpe251bGwhPT11JiZVZCh3KSYmKEM9dS5zdGFydCxwPXUuZW5kLHZvaWQgMD09PXAmJihwPUMpLFwic2VsZWN0aW9uU3RhcnRcImluIHc/KHcuc2VsZWN0aW9uU3RhcnQ9Qyx3LnNlbGVjdGlvbkVuZD1NYXRoLm1pbihwLFxudy52YWx1ZS5sZW5ndGgpKToocD0oQz13Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmQy5kZWZhdWx0Vmlld3x8d2luZG93LHAuZ2V0U2VsZWN0aW9uJiYocD1wLmdldFNlbGVjdGlvbigpLHk9dy50ZXh0Q29udGVudC5sZW5ndGgscj1NYXRoLm1pbih1LnN0YXJ0LHkpLHU9dm9pZCAwPT09dS5lbmQ/cjpNYXRoLm1pbih1LmVuZCx5KSwhcC5leHRlbmQmJnI+dSYmKHk9dSx1PXIscj15KSx5PVJkKHcsciksWT1SZCh3LHUpLHkmJlkmJigxIT09cC5yYW5nZUNvdW50fHxwLmFuY2hvck5vZGUhPT15Lm5vZGV8fHAuYW5jaG9yT2Zmc2V0IT09eS5vZmZzZXR8fHAuZm9jdXNOb2RlIT09WS5ub2RlfHxwLmZvY3VzT2Zmc2V0IT09WS5vZmZzZXQpJiYoQz1DLmNyZWF0ZVJhbmdlKCksQy5zZXRTdGFydCh5Lm5vZGUseS5vZmZzZXQpLHAucmVtb3ZlQWxsUmFuZ2VzKCkscj51PyhwLmFkZFJhbmdlKEMpLHAuZXh0ZW5kKFkubm9kZSxZLm9mZnNldCkpOihDLnNldEVuZChZLm5vZGUsWS5vZmZzZXQpLFxucC5hZGRSYW5nZShDKSkpKSkpO0M9W107Zm9yKHA9dztwPXAucGFyZW50Tm9kZTspMT09PXAubm9kZVR5cGUmJkMucHVzaCh7ZWxlbWVudDpwLGxlZnQ6cC5zY3JvbGxMZWZ0LHRvcDpwLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmZvY3VzJiZ3LmZvY3VzKCk7Zm9yKHc9MDt3PEMubGVuZ3RoO3crKylwPUNbd10scC5lbGVtZW50LnNjcm9sbExlZnQ9cC5sZWZ0LHAuZWxlbWVudC5zY3JvbGxUb3A9cC50b3B9QWU9bnVsbDtIZD0hIXplO3plPW51bGw7YS5jdXJyZW50PWI7Zm9yKFU9ZDtudWxsIT09VTspe2Q9ITE7dz12b2lkIDA7dHJ5e2ZvcihDPWM7bnVsbCE9PVU7KXt2YXIgRmI9VS5lZmZlY3RUYWc7aWYoRmImMzYpe3ZhciBHYj1VLmFsdGVybmF0ZTtwPVU7cj1DO3N3aXRjaChwLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztjYXNlIDE6dmFyIHdjPXAuc3RhdGVOb2RlO2lmKHAuZWZmZWN0VGFnJjQpaWYobnVsbD09PUdiKXdjLmNvbXBvbmVudERpZE1vdW50KCk7XG5lbHNle3ZhciBjaT1wLmVsZW1lbnRUeXBlPT09cC50eXBlP0diLm1lbW9pemVkUHJvcHM6TyhwLnR5cGUsR2IubWVtb2l6ZWRQcm9wcyk7d2MuY29tcG9uZW50RGlkVXBkYXRlKGNpLEdiLm1lbW9pemVkU3RhdGUsd2MuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBDZz1wLnVwZGF0ZVF1ZXVlO251bGwhPT1DZyYmdGYocCxDZyx3YyxyKTticmVhaztjYXNlIDM6dmFyIERnPXAudXBkYXRlUXVldWU7aWYobnVsbCE9PURnKXt1PW51bGw7aWYobnVsbCE9PXAuY2hpbGQpc3dpdGNoKHAuY2hpbGQudGFnKXtjYXNlIDU6dT1wLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6dT1wLmNoaWxkLnN0YXRlTm9kZX10ZihwLERnLHUscil9YnJlYWs7Y2FzZSA1OnZhciBkaT1wLnN0YXRlTm9kZTtudWxsPT09R2ImJnAuZWZmZWN0VGFnJjQmJkJlKHAudHlwZSxwLm1lbW9pemVkUHJvcHMpJiZkaS5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7XG5jYXNlIDEyOmJyZWFrO2Nhc2UgMTM6YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OnQoXCIxNjNcIil9fWlmKEZiJjEyOCl7dmFyIEljPVUucmVmO2lmKG51bGwhPT1JYyl7dmFyIEVnPVUuc3RhdGVOb2RlO3N3aXRjaChVLnRhZyl7Y2FzZSA1OnZhciBjZT1FZzticmVhaztkZWZhdWx0OmNlPUVnfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBJYz9JYyhjZSk6SWMuY3VycmVudD1jZX19VT1VLm5leHRFZmZlY3R9fWNhdGNoKGRiKXtkPSEwLHc9ZGJ9ZCYmKG51bGw9PT1VP3QoXCIxNzhcIik6dm9pZCAwLEpnKFUsdyksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfVlnPWFoPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBTZSYmU2UoYi5zdGF0ZU5vZGUpO0ZiPWIuZXhwaXJhdGlvblRpbWU7Yj1iLmNoaWxkRXhwaXJhdGlvblRpbWU7Yj1iPkZiP2I6RmI7MD09PWImJihTZz1udWxsKTthLmV4cGlyYXRpb25UaW1lPWI7YS5maW5pc2hlZFdvcms9bnVsbH1cbmZ1bmN0aW9uIFFnKGEpe251bGw9PT11aD90KFwiMjQ2XCIpOnZvaWQgMDt1aC5leHBpcmF0aW9uVGltZT0wO3ZofHwodmg9ITAsd2g9YSl9ZnVuY3Rpb24gTmgoYSxiKXt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFo9Yyl8fFd8fEtoKDEwNzM3NDE4MjMsITEpfX1mdW5jdGlvbiBPaChhLGIpe2lmKFomJiF4aCl7eGg9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7eGg9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uIFBoKGEsYixjKXtpZihraClyZXR1cm4gYShiLGMpO1p8fFd8fDA9PT1saHx8KEtoKGxoLCExKSxsaD0wKTt2YXIgZD1raCxlPVo7Wj1raD0hMDt0cnl7cmV0dXJuIGEoYixjKX1maW5hbGx5e2toPWQsKFo9ZSl8fFd8fEtoKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIFFoKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7Mj09PWtkKGMpJiYxPT09Yy50YWc/dm9pZCAwOnQoXCIxNzBcIik7dmFyIGc9Yztkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzpnPWcuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChnLnR5cGUpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpO3QoXCIxNzFcIik7Zz12b2lkIDB9aWYoMT09PWMudGFnKXt2YXIgaD1jLnR5cGU7aWYoTChoKSl7Yz1QZShjLGgsZyk7YnJlYWsgYX19Yz1nfWVsc2UgYz1KZTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1tZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7XG5TZigpO29mKGYsZSk7VGYoZixkKTtyZXR1cm4gZH1mdW5jdGlvbiBSaChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1RZigpO2U9UmYoZixlKTtyZXR1cm4gUWgoYSxiLGMsZSxkKX1mdW5jdGlvbiBTaChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIFVoKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGIsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5DYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkRjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1MYShkKTtlP3ZvaWQgMDp0KFwiOTBcIik7V2IoZCk7RGMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmllKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gVmgoYSl7dmFyIGI9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLVFmKCkrNTAwKS8yNXwwKSsxKTtiPj1XZyYmKGI9V2ctMSk7dGhpcy5fZXhwaXJhdGlvblRpbWU9V2c9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfVZoLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOnQoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBXaDtRaChhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5WaC5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5WaC5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6dChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD90KFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO0hoKGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O1ZoLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBXaCgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfVdoLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5XaC5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtcbmZ1bmN0aW9uIFhoKGEsYixjKXtiPU0oMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxkaWRFcnJvcjohMSxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCx0aW1lb3V0SGFuZGxlOi0xLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjowLGV4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3RoaXMuX2ludGVybmFsUm9vdD1iLnN0YXRlTm9kZT1hfVxuWGgucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBXaDtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7UmgoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtYaC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgV2g7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1JoKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307WGgucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IFdoO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtSaChiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuWGgucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFZoKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gWWgoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUtiPU5oO0xiPVBoO01iPWZ1bmN0aW9uKCl7V3x8MD09PWxofHwoS2gobGgsITEpLGxoPTApfTtcbmZ1bmN0aW9uIFpoKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgWGgoYSwhMSxiKX1cbmZ1bmN0aW9uICRoKGEsYixjLGQsZSl7WWgoYyk/dm9pZCAwOnQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1TaChmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPVpoKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVNoKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1PaChmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gU2goZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIGFpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7WWgoYik/dm9pZCAwOnQoXCIyMDBcIik7cmV0dXJuIFVoKGEsYixudWxsLGMpfVxudmFyIGJpPXtjcmVhdGVQb3J0YWw6YWksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj90KFwiMTg4XCIpOnQoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9bmQoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gJGgobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuICRoKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/dChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gJGgoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7WWgoYSk/XG52b2lkIDA6dChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KE9oKGZ1bmN0aW9uKCl7JGgobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gYWkuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOk5oLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpQaCxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtXP3QoXCIxODdcIik6dm9pZCAwO3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIHFoKGEsYil9ZmluYWxseXtaPWMsS2goMTA3Mzc0MTgyMywhMSl9fSx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9WjtaPSEwO3RyeXtxaChhKX1maW5hbGx5eyhaPWIpfHxXfHxLaCgxMDczNzQxODIzLCExKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0phLFxuS2EsTGEsQ2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLHFhLFJhLGZ1bmN0aW9uKGEpe3phKGEsUWEpfSxJYixKYixKZCxFYV19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtZaChhKT92b2lkIDA6dChcIjI5OVwiLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IFhoKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07KGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFZlKG4oe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1uZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpJYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjYuM1wiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO1xudmFyIGVpPXtkZWZhdWx0OmJpfSxmaT1laSYmYml8fGVpO21vZHVsZS5leHBvcnRzPWZpLmRlZmF1bHR8fGZpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xMS4zXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9bnVsbCxmPSExLGg9MyxrPS0xLGw9LTEsbT0hMSxuPSExO2Z1bmN0aW9uIHAoKXtpZighbSl7dmFyIGE9ZC5leHBpcmF0aW9uVGltZTtuP3EoKTpuPSEwO3IodCxhKX19XG5mdW5jdGlvbiB1KCl7dmFyIGE9ZCxiPWQubmV4dDtpZihkPT09YilkPW51bGw7ZWxzZXt2YXIgYz1kLnByZXZpb3VzO2Q9Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGw7Yz1hLmNhbGxiYWNrO2I9YS5leHBpcmF0aW9uVGltZTthPWEucHJpb3JpdHlMZXZlbDt2YXIgZT1oLFE9bDtoPWE7bD1iO3RyeXt2YXIgZz1jKCl9ZmluYWxseXtoPWUsbD1RfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKWlmKGc9e2NhbGxiYWNrOmcscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1kKWQ9Zy5uZXh0PWcucHJldmlvdXM9ZztlbHNle2M9bnVsbDthPWQ7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7Yz1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1kKTtudWxsPT09Yz9jPWQ6Yz09PWQmJihkPWcscCgpKTtiPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9ZztnLm5leHQ9YztnLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24gdigpe2lmKC0xPT09ayYmbnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpe209ITA7dHJ5e2RvIHUoKTt3aGlsZShudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl9ZmluYWxseXttPSExLG51bGwhPT1kP3AoKTpuPSExfX19ZnVuY3Rpb24gdChhKXttPSEwO3ZhciBiPWY7Zj1hO3RyeXtpZihhKWZvcig7bnVsbCE9PWQ7KXt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKGQuZXhwaXJhdGlvblRpbWU8PWMpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTw9Yyl9ZWxzZSBicmVha31lbHNlIGlmKG51bGwhPT1kKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJiF3KCkpfX1maW5hbGx5e209ITEsZj1iLG51bGwhPT1kP3AoKTpuPSExLHYoKX19XG52YXIgeD1EYXRlLHk9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEMsRDtmdW5jdGlvbiBFKGEpe0M9QShmdW5jdGlvbihiKXt6KEQpO2EoYil9KTtEPXkoZnVuY3Rpb24oKXtCKEMpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgRj1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBGLm5vdygpfX1lbHNlIGV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCl9O3ZhciByLHEsdyxHPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3c/Rz13aW5kb3c6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBnbG9iYWwmJihHPWdsb2JhbCk7XG5pZihHJiZHLl9zY2hlZE1vY2spe3ZhciBIPUcuX3NjaGVkTW9jaztyPUhbMF07cT1IWzFdO3c9SFsyXTtleHBvcnRzLnVuc3RhYmxlX25vdz1IWzNdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIEk9bnVsbCxKPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1JKXRyeXtJKGEpfWZpbmFsbHl7ST1udWxsfX07cj1mdW5jdGlvbihhKXtudWxsIT09ST9zZXRUaW1lb3V0KHIsMCxhKTooST1hLHNldFRpbWVvdXQoSiwwLCExKSl9O3E9ZnVuY3Rpb24oKXtJPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBLPW51bGwsTD0hMSxNPS0xLE49ITEsTz0hMSxQPTAsUj0zMyxTPTMzO3c9ZnVuY3Rpb24oKXtyZXR1cm4gUDw9ZXhwb3J0cy51bnN0YWJsZV9ub3coKX07dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe0w9ITE7dmFyIGE9SyxiPU07Sz1udWxsO009LTE7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxlPSExO2lmKDA+PVAtYylpZigtMSE9PWImJmI8PWMpZT0hMDtlbHNle058fChOPSEwLEUoVikpO0s9YTtNPWI7cmV0dXJufWlmKG51bGwhPT1hKXtPPSEwO3RyeXthKGUpfWZpbmFsbHl7Tz0hMX19fTtcbnZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1LKXtFKFYpO3ZhciBiPWEtUCtTO2I8UyYmUjxTPyg4PmImJihiPTgpLFM9YjxSP1I6Yik6Uj1iO1A9YStTO0x8fChMPSEwLFUucG9zdE1lc3NhZ2Uodm9pZCAwKSl9ZWxzZSBOPSExfTtyPWZ1bmN0aW9uKGEsYil7Sz1hO009YjtPfHwwPmI/VS5wb3N0TWVzc2FnZSh2b2lkIDApOk58fChOPSEwLEUoVikpfTtxPWZ1bmN0aW9uKCl7Sz1udWxsO0w9ITE7TT0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPWgsZT1rO2g9YTtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtoPWMsaz1lLHYoKX19O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTEhPT1rP2s6ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCliPWMrYi50aW1lb3V0O2Vsc2Ugc3dpdGNoKGgpe2Nhc2UgMTpiPWMrLTE7YnJlYWs7Y2FzZSAyOmI9YysyNTA7YnJlYWs7Y2FzZSA1OmI9YysxMDczNzQxODIzO2JyZWFrO2Nhc2UgNDpiPWMrMUU0O2JyZWFrO2RlZmF1bHQ6Yj1jKzVFM31hPXtjYWxsYmFjazphLHByaW9yaXR5TGV2ZWw6aCxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfTtpZihudWxsPT09ZClkPWEubmV4dD1hLnByZXZpb3VzPWEscCgpO2Vsc2V7Yz1udWxsO3ZhciBlPWQ7ZG97aWYoZS5leHBpcmF0aW9uVGltZT5iKXtjPWU7YnJlYWt9ZT1lLm5leHR9d2hpbGUoZSE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9YSxwKCkpO1xuYj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifXJldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYj09PWEpZD1udWxsO2Vsc2V7YT09PWQmJihkPWIpO3ZhciBjPWEucHJldmlvdXM7Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGx9fTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1oO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPWgsZT1rO2g9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e2g9YyxrPWUsdigpfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gaH07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIWYmJihudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTxsfHx3KCkpfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0hlYWRlci5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0hlYWRlci5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9IZWFkZXIuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkhlYWRlciBoZWFkZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBhbGlnbi1pdGVtczogY2VudGVyOyB9XFxuICAuSGVhZGVyIGhlYWRlciBoNiB7XFxuICAgIG1hcmdpbjogMTBweCAyMHB4OyB9XFxuXCIsIFwiXCJdKTtcblxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgX1BhcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUGFwZXJcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IFBhcGVyXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzEwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbOTAwXTtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggdGhlIE1vZGFsIGFuZCBmaXhlZCBwb3NpdGlvbmVkIEFwcEJhci5cbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4LmFwcEJhcixcbiAgICAgIGZsZXhTaHJpbms6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJmaXhlZFwiYC4gKi9cbiAgICBwb3NpdGlvbkZpeGVkOiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiYWJzb2x1dGVcImAuICovXG4gICAgcG9zaXRpb25BYnNvbHV0ZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0aWNreVwiYC4gKi9cbiAgICBwb3NpdGlvblN0aWNreToge1xuICAgICAgcG9zaXRpb246ICdzdGlja3knLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJzdGF0aWNcImAuICovXG4gICAgcG9zaXRpb25TdGF0aWM6IHtcbiAgICAgIHBvc2l0aW9uOiAnc3RhdGljJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInJlbGF0aXZlXCJgLiAqL1xuICAgIHBvc2l0aW9uUmVsYXRpdmU6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGVmYXVsdFwiYC4gKi9cbiAgICBjb2xvckRlZmF1bHQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yRGVmYXVsdCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHRcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gQXBwQmFyKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBwb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJwb3NpdGlvblwiXSk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wicG9zaXRpb25cIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKHBvc2l0aW9uKSldLCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoY29sb3IpKV0sIGNvbG9yICE9PSAnaW5oZXJpdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgJ211aS1maXhlZCcsIHBvc2l0aW9uID09PSAnZml4ZWQnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BhcGVyLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBjb21wb25lbnQ6IFwiaGVhZGVyXCIsXG4gICAgZWxldmF0aW9uOiA0LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufVxuXG5BcHBCYXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZGVmYXVsdCddKSxcblxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uaW5nIHR5cGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkXG4gICAqIFtoZXJlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0xlYXJuL0NTUy9DU1NfbGF5b3V0L1Bvc2l0aW9uaW5nKS5cbiAgICogTm90ZTogYHN0aWNreWAgaXMgbm90IHVuaXZlcnNhbGx5IHN1cHBvcnRlZCBhbmQgd2lsbCBmYWxsIGJhY2sgdG8gYHN0YXRpY2Agd2hlbiB1bmF2YWlsYWJsZS5cbiAgICovXG4gIHBvc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydmaXhlZCcsICdhYnNvbHV0ZScsICdzdGlja3knLCAnc3RhdGljJywgJ3JlbGF0aXZlJ10pXG59IDoge307XG5BcHBCYXIuZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ3ByaW1hcnknLFxuICBwb3NpdGlvbjogJ2ZpeGVkJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQXBwQmFyJ1xufSkoQXBwQmFyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2Y7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbUmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IFRZUEVfU1RBVElDU1t0YXJnZXRDb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG4gICAgICAgIHZhciBzb3VyY2VTdGF0aWNzID0gVFlQRV9TVEFUSUNTW3NvdXJjZUNvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNi4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O2Z1bmN0aW9uIHUoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHE9YS4kJHR5cGVvZjtzd2l0Y2gocSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiBxfX1jYXNlIGQ6cmV0dXJuIHF9fX1mdW5jdGlvbiB2KGEpe3JldHVybiB1KGEpPT09bX1leHBvcnRzLnR5cGVPZj11O2V4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5Qb3J0YWw9ZDtleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx1KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PWV9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PWd9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk9PT1kfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT09PWZ9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGdldER5bmFtaWNTdHlsZXM7XG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKTtcblxuICAgIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoIXRvKSB0byA9IHt9O1xuICAgICAgdG9ba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YXIgZXh0cmFjdGVkID0gZ2V0RHluYW1pY1N0eWxlcyh2YWx1ZSk7XG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBTaGVldHNNYW5hZ2VyIGlzIGxpa2UgYSBXZWFrTWFwIHdoaWNoIGlzIGRlc2lnbmVkIHRvIGNvdW50IFN0eWxlU2hlZXRcbiAqIGluc3RhbmNlcyBhbmQgYXR0YWNoL2RldGFjaCBhdXRvbWF0aWNhbGx5LlxuICovXG52YXIgU2hlZXRzTWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2hlZXRzTWFuYWdlcik7XG5cbiAgICB0aGlzLnNoZWV0cyA9IFtdO1xuICAgIHRoaXMucmVmcyA9IFtdO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiAnZ2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgIHJldHVybiB0aGlzLnNoZWV0c1tpbmRleF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWRkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKGtleSwgc2hlZXQpIHtcbiAgICAgIHZhciBzaGVldHMgPSB0aGlzLnNoZWV0cyxcbiAgICAgICAgICByZWZzID0gdGhpcy5yZWZzLFxuICAgICAgICAgIGtleXMgPSB0aGlzLmtleXM7XG5cbiAgICAgIHZhciBpbmRleCA9IHNoZWV0cy5pbmRleE9mKHNoZWV0KTtcblxuICAgICAgaWYgKGluZGV4ICE9PSAtMSkgcmV0dXJuIGluZGV4O1xuXG4gICAgICBzaGVldHMucHVzaChzaGVldCk7XG4gICAgICByZWZzLnB1c2goMCk7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcblxuICAgICAgcmV0dXJuIHNoZWV0cy5sZW5ndGggLSAxO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ21hbmFnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hbmFnZShrZXkpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLnNoZWV0c1tpbmRleF07XG4gICAgICBpZiAodGhpcy5yZWZzW2luZGV4XSA9PT0gMCkgc2hlZXQuYXR0YWNoKCk7XG4gICAgICB0aGlzLnJlZnNbaW5kZXhdKys7XG4gICAgICBpZiAoIXRoaXMua2V5c1tpbmRleF0pIHRoaXMua2V5cy5zcGxpY2UoaW5kZXgsIDAsIGtleSk7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndW5tYW5hZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bm1hbmFnZShrZXkpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIC8vIGVzbGludC1pZ25vcmUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgXCJTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIHVubWFuYWdlXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5yZWZzW2luZGV4XSA+IDApIHtcbiAgICAgICAgdGhpcy5yZWZzW2luZGV4XS0tO1xuICAgICAgICBpZiAodGhpcy5yZWZzW2luZGV4XSA9PT0gMCkgdGhpcy5zaGVldHNbaW5kZXhdLmRldGFjaCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NpemUnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMua2V5cy5sZW5ndGg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c01hbmFnZXI7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNoZWV0c01hbmFnZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNsb25lU3R5bGU7XG5cbnZhciBfaXNPYnNlcnZhYmxlID0gcmVxdWlyZSgnLi9pc09ic2VydmFibGUnKTtcblxudmFyIF9pc09ic2VydmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNPYnNlcnZhYmxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjbG9uZVN0eWxlKHN0eWxlKSB7XG4gIC8vIFN1cHBvcnQgZW1wdHkgdmFsdWVzIGluIGNhc2UgdXNlciBlbmRzIHVwIHdpdGggdGhlbSBieSBhY2NpZGVudC5cbiAgaWYgKHN0eWxlID09IG51bGwpIHJldHVybiBzdHlsZTtcblxuICAvLyBTdXBwb3J0IHN0cmluZyB2YWx1ZSBmb3IgU2ltcGxlUnVsZS5cbiAgdmFyIHR5cGVPZlN0eWxlID0gdHlwZW9mIHN0eWxlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzdHlsZSk7XG5cbiAgaWYgKHR5cGVPZlN0eWxlID09PSAnc3RyaW5nJyB8fCB0eXBlT2ZTdHlsZSA9PT0gJ251bWJlcicgfHwgdHlwZU9mU3R5bGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICAvLyBTdXBwb3J0IGFycmF5IGZvciBGb250RmFjZVJ1bGUuXG4gIGlmIChpc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcblxuICAvLyBTdXBwb3J0IE9ic2VydmFibGUgc3R5bGVzLiAgT2JzZXJ2YWJsZXMgYXJlIGltbXV0YWJsZSwgc28gd2UgZG9uJ3QgbmVlZCB0b1xuICAvLyBjb3B5IHRoZW0uXG4gIGlmICgoMCwgX2lzT2JzZXJ2YWJsZTJbJ2RlZmF1bHQnXSkoc3R5bGUpKSByZXR1cm4gc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0ge307XG4gIGZvciAodmFyIG5hbWUgaW4gc3R5bGUpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVtuYW1lXTtcbiAgICBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG5ld1N0eWxlW25hbWVdID0gY2xvbmVTdHlsZSh2YWx1ZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbmV3U3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn0iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgQ1NTID0gZ2xvYmFsLkNTUztcblxudmFyIGVudiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WO1xuXG52YXIgZXNjYXBlUmVnZXggPSAvKFtbXFxdLiMqJD48K349fF46KCksXCInYF0pL2c7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgLy8gV2UgZG9uJ3QgbmVlZCB0byBlc2NhcGUgaXQgaW4gcHJvZHVjdGlvbiwgYmVjYXVzZSB3ZSBhcmUgbm90IHVzaW5nIHVzZXInc1xuICAvLyBpbnB1dCBmb3Igc2VsZWN0b3JzLCB3ZSBhcmUgZ2VuZXJhdGluZyBhIHZhbGlkIHNlbGVjdG9yLlxuICBpZiAoZW52ID09PSAncHJvZHVjdGlvbicpIHJldHVybiBzdHI7XG5cbiAgaWYgKCFDU1MgfHwgIUNTUy5lc2NhcGUpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoZXNjYXBlUmVnZXgsICdcXFxcJDEnKTtcbiAgfVxuXG4gIHJldHVybiBDU1MuZXNjYXBlKHN0cik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBucyA9ICcyZjFhY2M2YzNhNjA2YjA4MmU1ZWVmNWU1NDQxNGZmYic7XG5pZiAoZ2xvYmFsW25zXSA9PSBudWxsKSBnbG9iYWxbbnNdID0gMDtcblxuLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuZXhwb3J0c1snZGVmYXVsdCddID0gZ2xvYmFsW25zXSsrOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2lzSW5Ccm93c2VyID0gcmVxdWlyZSgnaXMtaW4tYnJvd3NlcicpO1xuXG52YXIgX2lzSW5Ccm93c2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSW5Ccm93c2VyKTtcblxudmFyIF9TdHlsZVNoZWV0ID0gcmVxdWlyZSgnLi9TdHlsZVNoZWV0Jyk7XG5cbnZhciBfU3R5bGVTaGVldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVNoZWV0KTtcblxudmFyIF9QbHVnaW5zUmVnaXN0cnkgPSByZXF1aXJlKCcuL1BsdWdpbnNSZWdpc3RyeScpO1xuXG52YXIgX1BsdWdpbnNSZWdpc3RyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QbHVnaW5zUmVnaXN0cnkpO1xuXG52YXIgX3J1bGVzID0gcmVxdWlyZSgnLi9wbHVnaW5zL3J1bGVzJyk7XG5cbnZhciBfcnVsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnVsZXMpO1xuXG52YXIgX29ic2VydmFibGVzID0gcmVxdWlyZSgnLi9wbHVnaW5zL29ic2VydmFibGVzJyk7XG5cbnZhciBfb2JzZXJ2YWJsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JzZXJ2YWJsZXMpO1xuXG52YXIgX2Z1bmN0aW9ucyA9IHJlcXVpcmUoJy4vcGx1Z2lucy9mdW5jdGlvbnMnKTtcblxudmFyIF9mdW5jdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnVuY3Rpb25zKTtcblxudmFyIF9zaGVldHMgPSByZXF1aXJlKCcuL3NoZWV0cycpO1xuXG52YXIgX3NoZWV0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGVldHMpO1xuXG52YXIgX1N0eWxlUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvU3R5bGVSdWxlJyk7XG5cbnZhciBfU3R5bGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlUnVsZSk7XG5cbnZhciBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lJyk7XG5cbnZhciBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUpO1xuXG52YXIgX2NyZWF0ZVJ1bGUyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVSdWxlJyk7XG5cbnZhciBfY3JlYXRlUnVsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSdWxlMik7XG5cbnZhciBfRG9tUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVycy9Eb21SZW5kZXJlcicpO1xuXG52YXIgX0RvbVJlbmRlcmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RvbVJlbmRlcmVyKTtcblxudmFyIF9WaXJ0dWFsUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVycy9WaXJ0dWFsUmVuZGVyZXInKTtcblxudmFyIF9WaXJ0dWFsUmVuZGVyZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVmlydHVhbFJlbmRlcmVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgZGVmYXVsdFBsdWdpbnMgPSBfcnVsZXMyWydkZWZhdWx0J10uY29uY2F0KFtfb2JzZXJ2YWJsZXMyWydkZWZhdWx0J10sIF9mdW5jdGlvbnMyWydkZWZhdWx0J11dKTtcblxudmFyIGluc3RhbmNlQ291bnRlciA9IDA7XG5cbnZhciBKc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEpzcyhvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpzcyk7XG5cbiAgICB0aGlzLmlkID0gaW5zdGFuY2VDb3VudGVyKys7XG4gICAgdGhpcy52ZXJzaW9uID0gXCI5LjguN1wiO1xuICAgIHRoaXMucGx1Z2lucyA9IG5ldyBfUGx1Z2luc1JlZ2lzdHJ5MlsnZGVmYXVsdCddKCk7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgY3JlYXRlR2VuZXJhdGVDbGFzc05hbWU6IF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZTJbJ2RlZmF1bHQnXSxcbiAgICAgIFJlbmRlcmVyOiBfaXNJbkJyb3dzZXIyWydkZWZhdWx0J10gPyBfRG9tUmVuZGVyZXIyWydkZWZhdWx0J10gOiBfVmlydHVhbFJlbmRlcmVyMlsnZGVmYXVsdCddLFxuICAgICAgcGx1Z2luczogW11cbiAgICB9O1xuICAgIHRoaXMuZ2VuZXJhdGVDbGFzc05hbWUgPSAoMCwgX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lMlsnZGVmYXVsdCddKSgpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgICB0aGlzLnVzZS5hcHBseSh0aGlzLCBkZWZhdWx0UGx1Z2lucyk7XG4gICAgdGhpcy5zZXR1cChvcHRpb25zKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhKc3MsIFt7XG4gICAga2V5OiAnc2V0dXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lID0gb3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZTtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICB0aGlzLmdlbmVyYXRlQ2xhc3NOYW1lID0gb3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5pbnNlcnRpb25Qb2ludCAhPSBudWxsKSB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICAgICAgaWYgKG9wdGlvbnMudmlydHVhbCB8fCBvcHRpb25zLlJlbmRlcmVyKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5SZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXIgfHwgKG9wdGlvbnMudmlydHVhbCA/IF9WaXJ0dWFsUmVuZGVyZXIyWydkZWZhdWx0J10gOiBfRG9tUmVuZGVyZXIyWydkZWZhdWx0J10pO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgICAgaWYgKG9wdGlvbnMucGx1Z2lucykgdGhpcy51c2UuYXBwbHkodGhpcywgb3B0aW9ucy5wbHVnaW5zKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgU3R5bGUgU2hlZXQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZVN0eWxlU2hlZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVTdHlsZVNoZWV0KHN0eWxlcykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICB2YXIgaW5kZXggPSBvcHRpb25zLmluZGV4O1xuICAgICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5kZXggPSBfc2hlZXRzMlsnZGVmYXVsdCddLmluZGV4ID09PSAwID8gMCA6IF9zaGVldHMyWydkZWZhdWx0J10uaW5kZXggKyAxO1xuICAgICAgfVxuICAgICAgdmFyIHNoZWV0ID0gbmV3IF9TdHlsZVNoZWV0MlsnZGVmYXVsdCddKHN0eWxlcywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAganNzOiB0aGlzLFxuICAgICAgICBnZW5lcmF0ZUNsYXNzTmFtZTogb3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZSB8fCB0aGlzLmdlbmVyYXRlQ2xhc3NOYW1lLFxuICAgICAgICBpbnNlcnRpb25Qb2ludDogdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50LFxuICAgICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgIH0pKTtcbiAgICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NTaGVldChzaGVldCk7XG5cbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRhY2ggdGhlIFN0eWxlIFNoZWV0IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVnaXN0cnkuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZVN0eWxlU2hlZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTdHlsZVNoZWV0KHNoZWV0KSB7XG4gICAgICBzaGVldC5kZXRhY2goKTtcbiAgICAgIF9zaGVldHMyWydkZWZhdWx0J10ucmVtb3ZlKHNoZWV0KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHJ1bGUgd2l0aG91dCBhIFN0eWxlIFNoZWV0LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUnVsZShuYW1lKSB7XG4gICAgICB2YXIgc3R5bGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgICBpZiAoKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihuYW1lKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzdHlsZTtcbiAgICAgICAgc3R5bGUgPSBuYW1lO1xuICAgICAgICBuYW1lID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICAvLyBDYXN0IGZyb20gUnVsZUZhY3RvcnlPcHRpb25zIHRvIFJ1bGVPcHRpb25zXG4gICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MTMyODcyOC9mb3JjZS1jYXN0aW5nLWluLWZsb3dcbiAgICAgIHZhciBydWxlT3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgIHJ1bGVPcHRpb25zLmpzcyA9IHRoaXM7XG4gICAgICBydWxlT3B0aW9ucy5SZW5kZXJlciA9IHRoaXMub3B0aW9ucy5SZW5kZXJlcjtcbiAgICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWUpIHJ1bGVPcHRpb25zLmdlbmVyYXRlQ2xhc3NOYW1lID0gdGhpcy5nZW5lcmF0ZUNsYXNzTmFtZTtcbiAgICAgIGlmICghcnVsZU9wdGlvbnMuY2xhc3NlcykgcnVsZU9wdGlvbnMuY2xhc3NlcyA9IHt9O1xuICAgICAgdmFyIHJ1bGUgPSAoMCwgX2NyZWF0ZVJ1bGUzWydkZWZhdWx0J10pKG5hbWUsIHN0eWxlLCBydWxlT3B0aW9ucyk7XG5cbiAgICAgIGlmICghcnVsZU9wdGlvbnMuc2VsZWN0b3IgJiYgcnVsZSBpbnN0YW5jZW9mIF9TdHlsZVJ1bGUyWydkZWZhdWx0J10pIHtcbiAgICAgICAgcnVsZS5zZWxlY3RvciA9ICcuJyArIHJ1bGVPcHRpb25zLmdlbmVyYXRlQ2xhc3NOYW1lKHJ1bGUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcblxuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1c2UoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBwbHVnaW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgICAvLyBBdm9pZHMgYXBwbHlpbmcgc2FtZSBwbHVnaW4gdHdpY2UsIGF0IGxlYXN0IGJhc2VkIG9uIHJlZi5cbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMucGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPT09IC0xKSB7XG4gICAgICAgICAgX3RoaXMub3B0aW9ucy5wbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICBfdGhpcy5wbHVnaW5zLnVzZShwbHVnaW4pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEpzcztcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gSnNzOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFBsdWdpbnNSZWdpc3RyeSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1Z2luc1JlZ2lzdHJ5KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQbHVnaW5zUmVnaXN0cnkpO1xuXG4gICAgdGhpcy5ob29rcyA9IHtcbiAgICAgIG9uQ3JlYXRlUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1N0eWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1NoZWV0OiBbXSxcbiAgICAgIG9uQ2hhbmdlVmFsdWU6IFtdLFxuICAgICAgb25VcGRhdGU6IFtdXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbCBgb25DcmVhdGVSdWxlYCBob29rcyBhbmQgcmV0dXJuIGFuIG9iamVjdCBpZiByZXR1cm5lZCBieSBhIGhvb2suXG4gICAgICAgKi9cbiAgICB9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBsdWdpbnNSZWdpc3RyeSwgW3tcbiAgICBrZXk6ICdvbkNyZWF0ZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhvb2tzLm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcnVsZSA9IHRoaXMuaG9va3Mub25DcmVhdGVSdWxlW2ldKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgICAgICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGBvblByb2Nlc3NSdWxlYCBob29rcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25Qcm9jZXNzUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgICAgaWYgKHJ1bGUuaXNQcm9jZXNzZWQpIHJldHVybjtcbiAgICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhvb2tzLm9uUHJvY2Vzc1J1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5ob29rcy5vblByb2Nlc3NSdWxlW2ldKHJ1bGUsIHNoZWV0KTtcbiAgICAgIH1cblxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgaWYgKHJ1bGUuc3R5bGUpIHRoaXMub25Qcm9jZXNzU3R5bGUocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuXG4gICAgICBydWxlLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIGBvblByb2Nlc3NTdHlsZWAgaG9va3MuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29uUHJvY2Vzc1N0eWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgICB2YXIgbmV4dFN0eWxlID0gc3R5bGU7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ob29rcy5vblByb2Nlc3NTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXh0U3R5bGUgPSB0aGlzLmhvb2tzLm9uUHJvY2Vzc1N0eWxlW2ldKG5leHRTdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHJ1bGUuc3R5bGUgPSBuZXh0U3R5bGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgb25Qcm9jZXNzU2hlZXRgIGhvb2tzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvblByb2Nlc3NTaGVldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1NoZWV0KHNoZWV0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaG9va3Mub25Qcm9jZXNzU2hlZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5ob29rcy5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgb25VcGRhdGVgIGhvb2tzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvblVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaG9va3Mub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5ob29rcy5vblVwZGF0ZVtpXShkYXRhLCBydWxlLCBzaGVldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29uQ2hhbmdlVmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSB2YWx1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ob29rcy5vbkNoYW5nZVZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHByb2Nlc3NlZFZhbHVlID0gdGhpcy5ob29rcy5vbkNoYW5nZVZhbHVlW2ldKHByb2Nlc3NlZFZhbHVlLCBwcm9wLCBydWxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIHBsdWdpbi5cbiAgICAgKiBJZiBmdW5jdGlvbiBpcyBwYXNzZWQsIGl0IGlzIGEgc2hvcnRjdXQgZm9yIGB7b25Qcm9jZXNzUnVsZX1gLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1c2UocGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAodGhpcy5ob29rc1tuYW1lXSkgdGhpcy5ob29rc1tuYW1lXS5wdXNoKHBsdWdpbltuYW1lXSk7ZWxzZSAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCAnW0pTU10gVW5rbm93biBob29rIFwiJXNcIi4nLCBuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBQbHVnaW5zUmVnaXN0cnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1NpbXBsZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9TaW1wbGVSdWxlJyk7XG5cbnZhciBfU2ltcGxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TaW1wbGVSdWxlKTtcblxudmFyIF9LZXlmcmFtZXNSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvS2V5ZnJhbWVzUnVsZScpO1xuXG52YXIgX0tleWZyYW1lc1J1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfS2V5ZnJhbWVzUnVsZSk7XG5cbnZhciBfQ29uZGl0aW9uYWxSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvQ29uZGl0aW9uYWxSdWxlJyk7XG5cbnZhciBfQ29uZGl0aW9uYWxSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbmRpdGlvbmFsUnVsZSk7XG5cbnZhciBfRm9udEZhY2VSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvRm9udEZhY2VSdWxlJyk7XG5cbnZhciBfRm9udEZhY2VSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ZvbnRGYWNlUnVsZSk7XG5cbnZhciBfVmlld3BvcnRSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvVmlld3BvcnRSdWxlJyk7XG5cbnZhciBfVmlld3BvcnRSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1ZpZXdwb3J0UnVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIGNsYXNzZXMgPSB7XG4gICdAY2hhcnNldCc6IF9TaW1wbGVSdWxlMlsnZGVmYXVsdCddLFxuICAnQGltcG9ydCc6IF9TaW1wbGVSdWxlMlsnZGVmYXVsdCddLFxuICAnQG5hbWVzcGFjZSc6IF9TaW1wbGVSdWxlMlsnZGVmYXVsdCddLFxuICAnQGtleWZyYW1lcyc6IF9LZXlmcmFtZXNSdWxlMlsnZGVmYXVsdCddLFxuICAnQG1lZGlhJzogX0NvbmRpdGlvbmFsUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0BzdXBwb3J0cyc6IF9Db25kaXRpb25hbFJ1bGUyWydkZWZhdWx0J10sXG4gICdAZm9udC1mYWNlJzogX0ZvbnRGYWNlUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0B2aWV3cG9ydCc6IF9WaWV3cG9ydFJ1bGUyWydkZWZhdWx0J10sXG4gICdALW1zLXZpZXdwb3J0JzogX1ZpZXdwb3J0UnVsZTJbJ2RlZmF1bHQnXVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBwbHVnaW5zIHdoaWNoIHdpbGwgcmVnaXN0ZXIgYWxsIHJ1bGVzLlxuICAgKi9cbn07XG52YXIgcGx1Z2lucyA9IE9iamVjdC5rZXlzKGNsYXNzZXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gIC8vIGh0dHBzOi8vanNwZXJmLmNvbS9pbmRleG9mLXZzLXN1YnN0ci12cy1yZWdleC1hdC10aGUtYmVnaW5uaW5nLTNcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnXicgKyBrZXkpO1xuICB2YXIgUnVsZUNsYXNzID0gY2xhc3Nlc1trZXldO1xuICB2YXIgb25DcmVhdGVSdWxlID0gZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcmUudGVzdChuYW1lKSA/IG5ldyBSdWxlQ2xhc3MobmFtZSwgZGVjbCwgb3B0aW9ucykgOiBudWxsO1xuICB9O1xuICByZXR1cm4geyBvbkNyZWF0ZVJ1bGU6IG9uQ3JlYXRlUnVsZSB9O1xufSk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHBsdWdpbnM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgU2ltcGxlUnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbXBsZVJ1bGUpO1xuXG4gICAgdGhpcy50eXBlID0gJ3NpbXBsZSc7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFNpbXBsZVJ1bGUsIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgICB2YXIgc3RyID0gJyc7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHN0ciArPSB0aGlzLmtleSArICcgJyArIHRoaXMudmFsdWVbaW5kZXhdICsgJzsnO1xuICAgICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5rZXkgKyAnICcgKyB0aGlzLnZhbHVlICsgJzsnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaW1wbGVSdWxlO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTaW1wbGVSdWxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9SdWxlTGlzdCA9IHJlcXVpcmUoJy4uL1J1bGVMaXN0Jyk7XG5cbnZhciBfUnVsZUxpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVsZUxpc3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogUnVsZSBmb3IgQGtleWZyYW1lc1xuICovXG52YXIgS2V5ZnJhbWVzUnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gS2V5ZnJhbWVzUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBLZXlmcmFtZXNSdWxlKTtcblxuICAgIHRoaXMudHlwZSA9ICdrZXlmcmFtZXMnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBfUnVsZUxpc3QyWydkZWZhdWx0J10oX2V4dGVuZHMoe30sIG9wdGlvbnMsIHsgcGFyZW50OiB0aGlzIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gZnJhbWVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBmcmFtZXNbbmFtZV0sIF9leHRlbmRzKHt9LCB0aGlzLm9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgICBzZWxlY3RvcjogbmFtZVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEtleWZyYW1lc1J1bGUsIFt7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7IGluZGVudDogMSB9O1xuXG4gICAgICB2YXIgaW5uZXIgPSB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgICAgaWYgKGlubmVyKSBpbm5lciArPSAnXFxuJztcbiAgICAgIHJldHVybiB0aGlzLmtleSArICcge1xcbicgKyBpbm5lciArICd9JztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gS2V5ZnJhbWVzUnVsZTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gS2V5ZnJhbWVzUnVsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUnVsZUxpc3QgPSByZXF1aXJlKCcuLi9SdWxlTGlzdCcpO1xuXG52YXIgX1J1bGVMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1J1bGVMaXN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIENvbmRpdGlvbmFsIHJ1bGUgZm9yIEBtZWRpYSwgQHN1cHBvcnRzXG4gKi9cbnZhciBDb25kaXRpb25hbFJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25kaXRpb25hbFJ1bGUpO1xuXG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgX1J1bGVMaXN0MlsnZGVmYXVsdCddKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7IHBhcmVudDogdGhpcyB9KSk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhDb25kaXRpb25hbFJ1bGUsIFt7XG4gICAga2V5OiAnZ2V0UnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luZGV4T2YnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHsgaW5kZW50OiAxIH07XG5cbiAgICAgIHZhciBpbm5lciA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgICByZXR1cm4gaW5uZXIgPyB0aGlzLmtleSArICcge1xcbicgKyBpbm5lciArICdcXG59JyA6ICcnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IENvbmRpdGlvbmFsUnVsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfdG9Dc3MgPSByZXF1aXJlKCcuLi91dGlscy90b0NzcycpO1xuXG52YXIgX3RvQ3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ3NzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRm9udEZhY2VSdWxlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb250RmFjZVJ1bGUpO1xuXG4gICAgdGhpcy50eXBlID0gJ2ZvbnQtZmFjZSc7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoRm9udEZhY2VSdWxlLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5zdHlsZSkpIHtcbiAgICAgICAgdmFyIHN0ciA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBzdHIgKz0gKDAsIF90b0NzczJbJ2RlZmF1bHQnXSkodGhpcy5rZXksIHRoaXMuc3R5bGVbaW5kZXhdKTtcbiAgICAgICAgICBpZiAodGhpcy5zdHlsZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgwLCBfdG9Dc3MyWydkZWZhdWx0J10pKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRm9udEZhY2VSdWxlO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBGb250RmFjZVJ1bGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3RvQ3NzID0gcmVxdWlyZSgnLi4vdXRpbHMvdG9Dc3MnKTtcblxudmFyIF90b0NzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFZpZXdwb3J0UnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlld3BvcnRSdWxlKTtcblxuICAgIHRoaXMudHlwZSA9ICd2aWV3cG9ydCc7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoVmlld3BvcnRSdWxlLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgcmV0dXJuICgwLCBfdG9Dc3MyWydkZWZhdWx0J10pKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmlld3BvcnRSdWxlO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBWaWV3cG9ydFJ1bGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1N0eWxlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL1N0eWxlUnVsZScpO1xuXG52YXIgX1N0eWxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVJ1bGUpO1xuXG52YXIgX2NyZWF0ZVJ1bGUgPSByZXF1aXJlKCcuLi91dGlscy9jcmVhdGVSdWxlJyk7XG5cbnZhciBfY3JlYXRlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSdWxlKTtcblxudmFyIF9pc09ic2VydmFibGUgPSByZXF1aXJlKCcuLi91dGlscy9pc09ic2VydmFibGUnKTtcblxudmFyIF9pc09ic2VydmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNPYnNlcnZhYmxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICBpZiAoISgwLCBfaXNPYnNlcnZhYmxlMlsnZGVmYXVsdCddKShkZWNsKSkgcmV0dXJuIG51bGw7XG5cbiAgICAvLyBDYXN0IGBkZWNsYCB0byBgT2JzZXJ2YWJsZWAsIHNpbmNlIGl0IHBhc3NlZCB0aGUgdHlwZSBndWFyZC5cbiAgICB2YXIgc3R5bGUkID0gZGVjbDtcblxuICAgIHZhciBydWxlID0gKDAsIF9jcmVhdGVSdWxlMlsnZGVmYXVsdCddKShuYW1lLCB7fSwgb3B0aW9ucyk7XG5cbiAgICAvLyBUT0RPXG4gICAgLy8gQ2FsbCBgc3RyZWFtLnN1YnNjcmliZSgpYCByZXR1cm5zIGEgc3Vic2NyaXB0aW9uLCB3aGljaCBzaG91bGQgYmUgZXhwbGljaXRseVxuICAgIC8vIHVuc3Vic2NyaWJlZCBmcm9tIHdoZW4gd2Uga25vdyB0aGlzIHNoZWV0IGlzIG5vIGxvbmdlciBuZWVkZWQuXG4gICAgc3R5bGUkLnN1YnNjcmliZShmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgcnVsZS5wcm9wKHByb3AsIHN0eWxlW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBydWxlO1xuICB9LFxuICBvblByb2Nlc3NSdWxlOiBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAoIShydWxlIGluc3RhbmNlb2YgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXSkpIHJldHVybjtcbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZVJ1bGUuc3R5bGU7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChwcm9wKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgIGlmICghKDAsIF9pc09ic2VydmFibGUyWydkZWZhdWx0J10pKHZhbHVlKSkgcmV0dXJuICdjb250aW51ZSc7XG4gICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICB2YWx1ZS5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KG5leHRWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKHByb3ApO1xuXG4gICAgICBpZiAoX3JldCA9PT0gJ2NvbnRpbnVlJykgY29udGludWU7XG4gICAgfVxuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9SdWxlTGlzdCA9IHJlcXVpcmUoJy4uL1J1bGVMaXN0Jyk7XG5cbnZhciBfUnVsZUxpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVsZUxpc3QpO1xuXG52YXIgX1N0eWxlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL1N0eWxlUnVsZScpO1xuXG52YXIgX1N0eWxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVJ1bGUpO1xuXG52YXIgX2NyZWF0ZVJ1bGUgPSByZXF1aXJlKCcuLi91dGlscy9jcmVhdGVSdWxlJyk7XG5cbnZhciBfY3JlYXRlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSdWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vLyBBIHN5bWJvbCByZXBsYWNlbWVudC5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xuXG52YXIgZm5WYWx1ZXNOcyA9ICdmblZhbHVlcycgKyBub3c7XG52YXIgZm5TdHlsZU5zID0gJ2ZuU3R5bGUnICsgKytub3c7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgZGVjbCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gICAgdmFyIHJ1bGUgPSAoMCwgX2NyZWF0ZVJ1bGUyWydkZWZhdWx0J10pKG5hbWUsIHt9LCBvcHRpb25zKTtcbiAgICBydWxlW2ZuU3R5bGVOc10gPSBkZWNsO1xuICAgIHJldHVybiBydWxlO1xuICB9LFxuICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICB2YXIgZm4gPSB7fTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlO1xuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgZm5bcHJvcF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcnVsZSA9IHJ1bGU7XG4gICAgcnVsZVtmblZhbHVlc05zXSA9IGZuO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUpIHtcbiAgICAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cbiAgICBpZiAocnVsZS5ydWxlcyBpbnN0YW5jZW9mIF9SdWxlTGlzdDJbJ2RlZmF1bHQnXSkge1xuICAgICAgcnVsZS5ydWxlcy51cGRhdGUoZGF0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghKHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSkgcmV0dXJuO1xuXG4gICAgcnVsZSA9IHJ1bGU7XG5cbiAgICAvLyBJZiB3ZSBoYXZlIGEgZm4gdmFsdWVzIG1hcCwgaXQgaXMgYSBydWxlIHdpdGggZnVuY3Rpb24gdmFsdWVzLlxuICAgIGlmIChydWxlW2ZuVmFsdWVzTnNdKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHJ1bGVbZm5WYWx1ZXNOc10pIHtcbiAgICAgICAgcnVsZS5wcm9wKHByb3AsIHJ1bGVbZm5WYWx1ZXNOc11bcHJvcF0oZGF0YSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJ1bGUgPSBydWxlO1xuXG4gICAgdmFyIGZuU3R5bGUgPSBydWxlW2ZuU3R5bGVOc107XG5cbiAgICAvLyBJZiB3ZSBoYXZlIGEgc3R5bGUgZnVuY3Rpb24sIHRoZSBlbnRpcmUgcnVsZSBpcyBkeW5hbWljIGFuZCBzdHlsZSBvYmplY3RcbiAgICAvLyB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhhdCBmdW5jdGlvbi5cbiAgICBpZiAoZm5TdHlsZSkge1xuICAgICAgdmFyIHN0eWxlID0gZm5TdHlsZShkYXRhKTtcbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHJ1bGUucHJvcChfcHJvcCwgc3R5bGVbX3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9zaGVldHMgPSByZXF1aXJlKCcuLi9zaGVldHMnKTtcblxudmFyIF9zaGVldHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hlZXRzKTtcblxudmFyIF9TdHlsZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9TdHlsZVJ1bGUnKTtcblxudmFyIF9TdHlsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVSdWxlKTtcblxudmFyIF90b0Nzc1ZhbHVlID0gcmVxdWlyZSgnLi4vdXRpbHMvdG9Dc3NWYWx1ZScpO1xuXG52YXIgX3RvQ3NzVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Dc3NWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBDYWNoZSB0aGUgdmFsdWUgZnJvbSB0aGUgZmlyc3QgdGltZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAqL1xudmFyIG1lbW9pemUgPSBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IGZuKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBHZXQgYSBzdHlsZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNzc1J1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qKlxuICogU2V0IGEgc3R5bGUgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIHNldFByb3BlcnR5KGNzc1J1bGUsIHByb3AsIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgdmFyIGNzc1ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGNzc1ZhbHVlID0gKDAsIF90b0Nzc1ZhbHVlMlsnZGVmYXVsdCddKSh2YWx1ZSwgdHJ1ZSk7XG5cbiAgICAgIGlmICh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlUHJvcGVydHkoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIGNzc1J1bGUuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoZmFsc2UsICdbSlNTXSBET01FeGNlcHRpb24gXCIlc1wiIHdhcyB0aHJvd24uIFRyaWVkIHRvIHJlbW92ZSBwcm9wZXJ0eSBcIiVzXCIuJywgZXJyLm1lc3NhZ2UsIHByb3ApO1xuICB9XG59XG5cbnZhciBDU1NSdWxlVHlwZXMgPSB7XG4gIFNUWUxFX1JVTEU6IDEsXG4gIEtFWUZSQU1FU19SVUxFOiA3XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgQ1NTIFJ1bGUga2V5LlxuICAgKi9cblxufTt2YXIgZ2V0S2V5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZXh0cmFjdEtleSA9IGZ1bmN0aW9uIGV4dHJhY3RLZXkoY3NzVGV4dCkge1xuICAgIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgIHJldHVybiBjc3NUZXh0LnN1YnN0cihmcm9tLCBjc3NUZXh0LmluZGV4T2YoJ3snKSAtIDEpO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoY3NzUnVsZSkge1xuICAgIGlmIChjc3NSdWxlLnR5cGUgPT09IENTU1J1bGVUeXBlcy5TVFlMRV9SVUxFKSByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQ7XG4gICAgaWYgKGNzc1J1bGUudHlwZSA9PT0gQ1NTUnVsZVR5cGVzLktFWUZSQU1FU19SVUxFKSB7XG4gICAgICB2YXIgbmFtZSA9IGNzc1J1bGUubmFtZTtcblxuICAgICAgaWYgKG5hbWUpIHJldHVybiAnQGtleWZyYW1lcyAnICsgbmFtZTtcblxuICAgICAgLy8gVGhlcmUgaXMgbm8gcnVsZS5uYW1lIGluIHRoZSBmb2xsb3dpbmcgYnJvd3NlcnM6XG4gICAgICAvLyAtIElFIDlcbiAgICAgIC8vIC0gU2FmYXJpIDcuMS44XG4gICAgICAvLyAtIE1vYmlsZSBTYWZhcmkgOS4wLjBcbiAgICAgIHZhciBjc3NUZXh0ID0gY3NzUnVsZS5jc3NUZXh0O1xuXG4gICAgICByZXR1cm4gJ0AnICsgZXh0cmFjdEtleShjc3NUZXh0LCBjc3NUZXh0LmluZGV4T2YoJ2tleWZyYW1lcycpKTtcbiAgICB9XG5cbiAgICAvLyBDb25kaXRpb25hbHMuXG4gICAgcmV0dXJuIGV4dHJhY3RLZXkoY3NzUnVsZS5jc3NUZXh0KTtcbiAgfTtcbn0oKTtcblxuLyoqXG4gKiBTZXQgdGhlIHNlbGVjdG9yLlxuICovXG5mdW5jdGlvbiBzZXRTZWxlY3Rvcihjc3NSdWxlLCBzZWxlY3RvclRleHQpIHtcbiAgY3NzUnVsZS5zZWxlY3RvclRleHQgPSBzZWxlY3RvclRleHQ7XG5cbiAgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cbiAgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID09PSBzZWxlY3RvclRleHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgYGhlYWRgIGVsZW1lbnQgdXBvbiB0aGUgZmlyc3QgY2FsbCBhbmQgY2FjaGVzIGl0LlxuICovXG52YXIgZ2V0SGVhZCA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xufSk7XG5cbi8qKlxuICogR2V0cyBhIG1hcCBvZiBydWxlIGtleXMsIHdoZXJlIHRoZSBwcm9wZXJ0eSBpcyBhbiB1bmVzY2FwZWQga2V5IGFuZCB2YWx1ZVxuICogaXMgYSBwb3RlbnRpYWxseSBlc2NhcGVkIG9uZS5cbiAqIEl0IGlzIHVzZWQgdG8gaWRlbnRpZnkgQ1NTIHJ1bGVzIGFuZCB0aGUgY29ycmVzcG9uZGluZyBKU1MgcnVsZXMuIEFzIGFuIGlkZW50aWZpZXJcbiAqIGZvciBDU1NTdHlsZVJ1bGUgd2Ugbm9ybWFsbHkgdXNlIGBzZWxlY3RvclRleHRgLiBUaG91Z2ggaWYgb3JpZ2luYWwgc2VsZWN0b3IgdGV4dFxuICogY29udGFpbnMgZXNjYXBlZCBjb2RlIHBvaW50cyBlLmcuIGA6bm90KCNcXFxcMjApYCwgQ1NTT00gd2lsbCBjb21waWxlIGl0IHRvIGA6bm90KCMgKWBcbiAqIGFuZCBzbyBDU1MgcnVsZSdzIGBzZWxlY3RvclRleHRgIHdvbid0IG1hdGNoIEpTUyBydWxlIHNlbGVjdG9yLlxuICpcbiAqIGh0dHBzOi8vd3d3LnczLm9yZy9JbnRlcm5hdGlvbmFsL3F1ZXN0aW9ucy9xYS1lc2NhcGVzI2Nzc2VzY2FwZXNcbiAqL1xudmFyIGdldFVuZXNjYXBlZEtleXNNYXAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdHlsZSA9IHZvaWQgMDtcbiAgdmFyIGlzQXR0YWNoZWQgPSBmYWxzZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgdmFyIG1hcCA9IHt9O1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gICAgaWYgKCFzdHlsZSkgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBydWxlID0gcnVsZXNbaV07XG4gICAgICBpZiAoIShydWxlIGluc3RhbmNlb2YgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXSkpIGNvbnRpbnVlO1xuICAgICAgdmFyIHNlbGVjdG9yID0gcnVsZS5zZWxlY3RvcjtcbiAgICAgIC8vIE9ubHkgdW5lc2NhcGUgc2VsZWN0b3Igb3ZlciBDU1NPTSBpZiBpdCBjb250YWlucyBhIGJhY2sgc2xhc2guXG5cbiAgICAgIGlmIChzZWxlY3RvciAmJiBzZWxlY3Rvci5pbmRleE9mKCdcXFxcJykgIT09IC0xKSB7XG4gICAgICAgIC8vIExhemlsbHkgYXR0YWNoIHdoZW4gbmVlZGVkLlxuICAgICAgICBpZiAoIWlzQXR0YWNoZWQpIHtcbiAgICAgICAgICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICAgIGlzQXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gc2VsZWN0b3IgKyAnIHt9JztcbiAgICAgICAgdmFyIF9zdHlsZSA9IHN0eWxlLFxuICAgICAgICAgICAgc2hlZXQgPSBfc3R5bGUuc2hlZXQ7XG5cbiAgICAgICAgaWYgKHNoZWV0KSB7XG4gICAgICAgICAgdmFyIGNzc1J1bGVzID0gc2hlZXQuY3NzUnVsZXM7XG5cbiAgICAgICAgICBpZiAoY3NzUnVsZXMpIG1hcFtjc3NSdWxlc1swXS5zZWxlY3RvclRleHRdID0gcnVsZS5rZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzQXR0YWNoZWQpIHtcbiAgICAgIGdldEhlYWQoKS5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgICBpc0F0dGFjaGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG4gIH07XG59KCk7XG5cbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIGFuIGluZGV4IGhpZ2hlciB0aGFuIHRoZSBwYXNzZWQgb25lLlxuICovXG5mdW5jdGlvbiBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluZGV4ID4gb3B0aW9ucy5pbmRleCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCB0aGUgaGlnaGVzdCBpbmRleC5cbiAqL1xuZnVuY3Rpb24gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gcmVnaXN0cnkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBGaW5kIGEgY29tbWVudCB3aXRoIFwianNzXCIgaW5zaWRlLlxuICovXG5mdW5jdGlvbiBmaW5kQ29tbWVudE5vZGUodGV4dCkge1xuICB2YXIgaGVhZCA9IGdldEhlYWQoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGhlYWQuY2hpbGROb2Rlc1tpXTtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZS50cmltKCkgPT09IHRleHQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBGaW5kIGEgbm9kZSBiZWZvcmUgd2hpY2ggd2UgY2FuIGluc2VydCB0aGUgc2hlZXQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRQcmV2Tm9kZShvcHRpb25zKSB7XG4gIHZhciByZWdpc3RyeSA9IF9zaGVldHMyWydkZWZhdWx0J10ucmVnaXN0cnk7XG5cblxuICBpZiAocmVnaXN0cnkubGVuZ3RoID4gMCkge1xuICAgIC8vIFRyeSB0byBpbnNlcnQgYmVmb3JlIHRoZSBuZXh0IGhpZ2hlciBzaGVldC5cbiAgICB2YXIgc2hlZXQgPSBmaW5kSGlnaGVyU2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuICAgIGlmIChzaGVldCkgcmV0dXJuIHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQ7XG5cbiAgICAvLyBPdGhlcndpc2UgaW5zZXJ0IGFmdGVyIHRoZSBsYXN0IGF0dGFjaGVkLlxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSwgb3B0aW9ucyk7XG4gICAgaWYgKHNoZWV0KSByZXR1cm4gc2hlZXQucmVuZGVyZXIuZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gIH1cblxuICAvLyBUcnkgdG8gZmluZCBhIGNvbW1lbnQgcGxhY2Vob2xkZXIgaWYgcmVnaXN0cnkgaXMgZW1wdHkuXG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgY29tbWVudCA9IGZpbmRDb21tZW50Tm9kZShpbnNlcnRpb25Qb2ludCk7XG4gICAgaWYgKGNvbW1lbnQpIHJldHVybiBjb21tZW50Lm5leHRTaWJsaW5nO1xuICAgIC8vIElmIHVzZXIgc3BlY2lmaWVzIGFuIGluc2VydGlvbiBwb2ludCBhbmQgaXQgY2FuJ3QgYmUgZm91bmQgaW4gdGhlIGRvY3VtZW50IC1cbiAgICAvLyBiYWQgc3BlY2lmaWNpdHkgaXNzdWVzIG1heSBhcHBlYXIuXG4gICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShpbnNlcnRpb25Qb2ludCA9PT0gJ2pzcycsICdbSlNTXSBJbnNlcnRpb24gcG9pbnQgXCIlc1wiIG5vdCBmb3VuZC4nLCBpbnNlcnRpb25Qb2ludCk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHRoZSBET00uXG4gKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlKHN0eWxlLCBvcHRpb25zKSB7XG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgdmFyIHByZXZOb2RlID0gZmluZFByZXZOb2RlKG9wdGlvbnMpO1xuXG4gIGlmIChwcmV2Tm9kZSkge1xuICAgIHZhciBwYXJlbnROb2RlID0gcHJldk5vZGUucGFyZW50Tm9kZTtcblxuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgcHJldk5vZGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdvcmtzIHdpdGggaWZyYW1lcyBhbmQgYW55IG5vZGUgdHlwZXMuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQubm9kZVR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDEzMjg3MjgvZm9yY2UtY2FzdGluZy1pbi1mbG93XG4gICAgdmFyIGluc2VydGlvblBvaW50RWxlbWVudCA9IGluc2VydGlvblBvaW50O1xuICAgIHZhciBfcGFyZW50Tm9kZSA9IGluc2VydGlvblBvaW50RWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKF9wYXJlbnROb2RlKSBfcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIGluc2VydGlvblBvaW50RWxlbWVudC5uZXh0U2libGluZyk7ZWxzZSAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCAnW0pTU10gSW5zZXJ0aW9uIHBvaW50IGlzIG5vdCBpbiB0aGUgRE9NLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGdldEhlYWQoKS5pbnNlcnRCZWZvcmUoc3R5bGUsIHByZXZOb2RlKTtcbn1cblxuLyoqXG4gKiBSZWFkIGpzcyBub25jZSBzZXR0aW5nIGZyb20gdGhlIHBhZ2UgaWYgdGhlIHVzZXIgaGFzIHNldCBpdC5cbiAqL1xudmFyIGdldE5vbmNlID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHZhciBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtwcm9wZXJ0eT1cImNzcC1ub25jZVwiXScpO1xuICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0QXR0cmlidXRlKCdjb250ZW50JykgOiBudWxsO1xufSk7XG5cbnZhciBEb21SZW5kZXJlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRG9tUmVuZGVyZXIoc2hlZXQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRG9tUmVuZGVyZXIpO1xuXG4gICAgdGhpcy5nZXRQcm9wZXJ0eVZhbHVlID0gZ2V0UHJvcGVydHlWYWx1ZTtcbiAgICB0aGlzLnNldFByb3BlcnR5ID0gc2V0UHJvcGVydHk7XG4gICAgdGhpcy5yZW1vdmVQcm9wZXJ0eSA9IHJlbW92ZVByb3BlcnR5O1xuICAgIHRoaXMuc2V0U2VsZWN0b3IgPSBzZXRTZWxlY3RvcjtcbiAgICB0aGlzLmdldEtleSA9IGdldEtleTtcbiAgICB0aGlzLmdldFVuZXNjYXBlZEtleXNNYXAgPSBnZXRVbmVzY2FwZWRLZXlzTWFwO1xuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuXG4gICAgLy8gVGhlcmUgaXMgbm8gc2hlZXQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgdXNlZCBmcm9tIGEgc3RhbmRhbG9uZSBTdHlsZVJ1bGUuXG4gICAgaWYgKHNoZWV0KSBfc2hlZXRzMlsnZGVmYXVsdCddLmFkZChzaGVldCk7XG5cbiAgICB0aGlzLnNoZWV0ID0gc2hlZXQ7XG5cbiAgICB2YXIgX3JlZiA9IHRoaXMuc2hlZXQgPyB0aGlzLnNoZWV0Lm9wdGlvbnMgOiB7fSxcbiAgICAgICAgbWVkaWEgPSBfcmVmLm1lZGlhLFxuICAgICAgICBtZXRhID0gX3JlZi5tZXRhLFxuICAgICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50O1xuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudCB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtanNzJywgJycpO1xuICAgIGlmIChtZWRpYSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gICAgaWYgKG1ldGEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWV0YScsIG1ldGEpO1xuICAgIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgaWYgKG5vbmNlKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdub25jZScsIG5vbmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG5cblxuICBfY3JlYXRlQ2xhc3MoRG9tUmVuZGVyZXIsIFt7XG4gICAga2V5OiAnYXR0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgICAgLy8gSW4gdGhlIGNhc2UgdGhlIGVsZW1lbnQgbm9kZSBpcyBleHRlcm5hbCBhbmQgaXQgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuICAgICAgaWYgKHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIHx8ICF0aGlzLnNoZWV0KSByZXR1cm47XG5cbiAgICAgIC8vIFdoZW4gcnVsZXMgYXJlIGluc2VydGVkIHVzaW5nIGBpbnNlcnRSdWxlYCBBUEksIGFmdGVyIGBzaGVldC5kZXRhY2goKS5hdHRhY2goKWBcbiAgICAgIC8vIGJyb3dzZXJzIHJlbW92ZSB0aG9zZSBydWxlcy5cbiAgICAgIC8vIFRPRE8gZmlndXJlIG91dCBpZiBpdHMgYSBidWcgYW5kIGlmIGl0IGlzIGtub3duLlxuICAgICAgLy8gV29ya2Fyb3VuZCBpcyB0byByZWRlcGxveSB0aGUgc2hlZXQgYmVmb3JlIGF0dGFjaGluZyBhcyBhIHN0cmluZy5cbiAgICAgIGlmICh0aGlzLmhhc0luc2VydGVkUnVsZXMpIHtcbiAgICAgICAgdGhpcy5kZXBsb3koKTtcbiAgICAgICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGluc2VydFN0eWxlKHRoaXMuZWxlbWVudCwgdGhpcy5zaGVldC5vcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgc3R5bGUgZWxlbWVudCBmcm9tIHJlbmRlciB0cmVlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZXRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGVwbG95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVwbG95KCkge1xuICAgICAgaWYgKCF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSAnXFxuJyArIHRoaXMuc2hlZXQudG9TdHJpbmcoKSArICdcXG4nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydCBhIHJ1bGUgaW50byBlbGVtZW50LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlLCBpbmRleCkge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgICAgdmFyIGNzc1J1bGVzID0gc2hlZXQuY3NzUnVsZXM7XG5cbiAgICAgIHZhciBzdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgICBpZiAoIWluZGV4KSBpbmRleCA9IGNzc1J1bGVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFzdHIpIHJldHVybiBmYWxzZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShzdHIsIGluZGV4KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCAnW0pTU10gQ2FuIG5vdCBpbnNlcnQgYW4gdW5zdXBwb3J0ZWQgcnVsZSBcXG5cXHIlcycsIHJ1bGUpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSB0cnVlO1xuXG4gICAgICByZXR1cm4gY3NzUnVsZXNbaW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMuZWxlbWVudC5zaGVldDtcblxuICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgaW5kZXggb2YgYSBDU1MgUnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5kZXhPZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluZGV4T2YoY3NzUnVsZSkge1xuICAgICAgdmFyIGNzc1J1bGVzID0gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuXG4gICAgICBmb3IgKHZhciBfaW5kZXggPSAwOyBfaW5kZXggPCBjc3NSdWxlcy5sZW5ndGg7IF9pbmRleCsrKSB7XG4gICAgICAgIGlmIChjc3NSdWxlID09PSBjc3NSdWxlc1tfaW5kZXhdKSByZXR1cm4gX2luZGV4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGEgbmV3IENTUyBydWxlIGFuZCByZXBsYWNlIHRoZSBleGlzdGluZyBvbmUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlcGxhY2VSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZVJ1bGUoY3NzUnVsZSwgcnVsZSkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgICAgdmFyIG5ld0Nzc1J1bGUgPSB0aGlzLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgICAgdGhpcy5lbGVtZW50LnNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgICAgcmV0dXJuIG5ld0Nzc1J1bGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBydWxlcyBlbGVtZW50cy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0UnVsZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERvbVJlbmRlcmVyO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBEb21SZW5kZXJlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cblxuLyoqXG4gKiBSZW5kZXJpbmcgYmFja2VuZCB0byBkbyBub3RoaW5nIGluIG5vZGVqcy5cbiAqL1xudmFyIFZpcnR1YWxSZW5kZXJlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlydHVhbFJlbmRlcmVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaXJ0dWFsUmVuZGVyZXIpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZpcnR1YWxSZW5kZXJlciwgW3tcbiAgICBrZXk6ICdzZXRQcm9wZXJ0eScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFByb3BlcnR5KCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0UHJvcGVydHlWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlUHJvcGVydHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVQcm9wZXJ0eSgpIHt9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRTZWxlY3RvcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0S2V5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0S2V5KCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2F0dGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaCgpIHt9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRhY2goKSB7fVxuICB9LCB7XG4gICAga2V5OiAnZGVwbG95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVwbG95KCkge31cbiAgfSwge1xuICAgIGtleTogJ2luc2VydFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRSdWxlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlbGV0ZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVSdWxlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVwbGFjZVJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlUnVsZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSdWxlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJ1bGVzKCkge31cbiAgfSwge1xuICAgIGtleTogJ2luZGV4T2YnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleE9mKCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBWaXJ0dWFsUmVuZGVyZXI7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFZpcnR1YWxSZW5kZXJlcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbi8vIFNoYXJlIHRoZSBzYW1lIHZhbHVlcyB0aGFuIGluXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvYmxvYi9tYXN0ZXIvcGFja2FnZXMvcmVhY3QtanNzL3NyYy9ucy5qc1xudmFyIG5zID0ge1xuICBqc3M6ICc2NGE1NWQ1NzhmODU2ZDI1OGRjMzQ1YjA5NGEyYTJiMycsXG4gIHNoZWV0c1JlZ2lzdHJ5OiAnZDRiZDBiYWFjYmM1MmJiZDQ4YmJiOWViMjQzNDRlY2QnLFxuICBzaGVldE9wdGlvbnM6ICc2ZmM1NzBkNmJkNjEzODM4MTlkMGY5ZTc0MDdjNDUyZCdcbn07XG52YXIgX2RlZmF1bHQgPSBucztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9qc3NHbG9iYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtZ2xvYmFsXCIpKTtcblxudmFyIF9qc3NOZXN0ZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtbmVzdGVkXCIpKTtcblxudmFyIF9qc3NDYW1lbENhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtY2FtZWwtY2FzZVwiKSk7XG5cbnZhciBfanNzRGVmYXVsdFVuaXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtZGVmYXVsdC11bml0XCIpKTtcblxudmFyIF9qc3NWZW5kb3JQcmVmaXhlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzcy12ZW5kb3ItcHJlZml4ZXJcIikpO1xuXG52YXIgX2pzc1Byb3BzU29ydCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzcy1wcm9wcy1zb3J0XCIpKTtcblxuLy8gU3Vic2V0IG9mIGpzcy1wcmVzZXQtZGVmYXVsdCB3aXRoIG9ubHkgdGhlIHBsdWdpbnMgdGhlIE1hdGVyaWFsLVVJIGNvbXBvbmVudHMgYXJlIHVzaW5nLlxuZnVuY3Rpb24ganNzUHJlc2V0KCkge1xuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFsoMCwgX2pzc0dsb2JhbC5kZWZhdWx0KSgpLCAoMCwgX2pzc05lc3RlZC5kZWZhdWx0KSgpLCAoMCwgX2pzc0NhbWVsQ2FzZS5kZWZhdWx0KSgpLCAoMCwgX2pzc0RlZmF1bHRVbml0LmRlZmF1bHQpKCksIC8vIERpc2FibGUgdGhlIHZlbmRvciBwcmVmaXhlciBzZXJ2ZXItc2lkZSwgaXQgZG9lcyBub3RoaW5nLlxuICAgIC8vIFRoaXMgd2F5LCB3ZSBjYW4gZ2V0IGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gICAgLy8gSW4gdGhlIGRvY3VtZW50YXRpb24sIHdlIGFyZSB1c2luZyBgYXV0b3ByZWZpeGVyYCB0byBzb2x2ZSB0aGlzIHByb2JsZW0uXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogKDAsIF9qc3NWZW5kb3JQcmVmaXhlci5kZWZhdWx0KSgpLCAoMCwgX2pzc1Byb3BzU29ydC5kZWZhdWx0KSgpXVxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBqc3NQcmVzZXQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGpzc0dsb2JhbDtcblxudmFyIF9qc3MgPSByZXF1aXJlKCdqc3MnKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIHByb3BLZXkgPSAnQGdsb2JhbCc7XG52YXIgcHJlZml4S2V5ID0gJ0BnbG9iYWwgJztcblxudmFyIEdsb2JhbENvbnRhaW5lclJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbENvbnRhaW5lclJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xvYmFsQ29udGFpbmVyUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBfanNzLlJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBzZWxlY3RvciBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKHNlbGVjdG9yLCBzdHlsZXNbc2VsZWN0b3JdLCB7IHNlbGVjdG9yOiBzZWxlY3RvciB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhHbG9iYWxDb250YWluZXJSdWxlLCBbe1xuICAgIGtleTogJ2dldFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luZGV4T2YnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdsb2JhbENvbnRhaW5lclJ1bGU7XG59KCk7XG5cbnZhciBHbG9iYWxQcmVmaXhlZFJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHbG9iYWxQcmVmaXhlZFJ1bGUpO1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHZhciBzZWxlY3RvciA9IG5hbWUuc3Vic3RyKHByZWZpeEtleS5sZW5ndGgpO1xuICAgIHRoaXMucnVsZSA9IG9wdGlvbnMuanNzLmNyZWF0ZVJ1bGUoc2VsZWN0b3IsIHN0eWxlLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgfSkpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEdsb2JhbFByZWZpeGVkUnVsZSwgW3tcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGUudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdsb2JhbFByZWZpeGVkUnVsZTtcbn0oKTtcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcblxuZnVuY3Rpb24gYWRkU2NvcGUoc2VsZWN0b3IsIHNjb3BlKSB7XG4gIHZhciBwYXJ0cyA9IHNlbGVjdG9yLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gIHZhciBzY29wZWQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHNjb3BlZCArPSBzY29wZSArICcgJyArIHBhcnRzW2ldLnRyaW0oKTtcbiAgICBpZiAocGFydHNbaSArIDFdKSBzY29wZWQgKz0gJywgJztcbiAgfVxuICByZXR1cm4gc2NvcGVkO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG5cbiAgdmFyIHJ1bGVzID0gc3R5bGVbcHJvcEtleV07XG5cbiAgaWYgKCFydWxlcykgcmV0dXJuO1xuXG4gIGZvciAodmFyIG5hbWUgaW4gcnVsZXMpIHtcbiAgICBvcHRpb25zLnNoZWV0LmFkZFJ1bGUobmFtZSwgcnVsZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3RvcjogYWRkU2NvcGUobmFtZSwgcnVsZS5zZWxlY3RvcilcbiAgICB9KSk7XG4gIH1cblxuICBkZWxldGUgc3R5bGVbcHJvcEtleV07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlKSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICBpZiAocHJvcC5zdWJzdHIoMCwgcHJvcEtleS5sZW5ndGgpICE9PSBwcm9wS2V5KSBjb250aW51ZTtcblxuICAgIHZhciBzZWxlY3RvciA9IGFkZFNjb3BlKHByb3Auc3Vic3RyKHByb3BLZXkubGVuZ3RoKSwgcnVsZS5zZWxlY3Rvcik7XG4gICAgb3B0aW9ucy5zaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgIH0pKTtcbiAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBqc3NHbG9iYWwoKSB7XG4gIGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAobmFtZSA9PT0gcHJvcEtleSkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxDb250YWluZXJSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyAmJiBuYW1lLnN1YnN0cigwLCBwcmVmaXhLZXkubGVuZ3RoKSA9PT0gcHJlZml4S2V5KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcblxuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnZ2xvYmFsJyB8fCBwYXJlbnQub3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgb3B0aW9ucy5nbG9iYWwgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdsb2JhbCkgb3B0aW9ucy5zZWxlY3RvciA9IG5hbWU7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybjtcblxuICAgIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSk7XG4gICAgaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHsgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUsIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGUgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGpzc05lc3RlZDtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG52YXIgcGFyZW50UmVnRXhwID0gLyYvZztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24ganNzTmVzdGVkKCkge1xuICAvLyBHZXQgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciAkcmVmIHJlcGxhY2VtZW50LlxuICBmdW5jdGlvbiBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xuICAgICAgdmFyIHJ1bGUgPSBjb250YWluZXIuZ2V0UnVsZShrZXkpO1xuICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlLnNlbGVjdG9yO1xuICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ1tKU1NdIENvdWxkIG5vdCBmaW5kIHRoZSByZWZlcmVuY2VkIHJ1bGUgJXMgaW4gJXMuJywga2V5LCBjb250YWluZXIub3B0aW9ucy5tZXRhIHx8IGNvbnRhaW5lcik7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gIH1cblxuICB2YXIgaGFzQW5kID0gZnVuY3Rpb24gaGFzQW5kKHN0cikge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZignJicpICE9PSAtMTtcbiAgfTtcblxuICBmdW5jdGlvbiByZXBsYWNlUGFyZW50UmVmcyhuZXN0ZWRQcm9wLCBwYXJlbnRQcm9wKSB7XG4gICAgdmFyIHBhcmVudFNlbGVjdG9ycyA9IHBhcmVudFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgbmVzdGVkU2VsZWN0b3JzID0gbmVzdGVkUHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuXG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRTZWxlY3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVzdGVkU2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBuZXN0ZWQgPSBuZXN0ZWRTZWxlY3RvcnNbal07XG4gICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnLCAnO1xuICAgICAgICAvLyBSZXBsYWNlIGFsbCAmIGJ5IHRoZSBwYXJlbnQgb3IgcHJlZml4ICYgd2l0aCB0aGUgcGFyZW50LlxuICAgICAgICByZXN1bHQgKz0gaGFzQW5kKG5lc3RlZCkgPyBuZXN0ZWQucmVwbGFjZShwYXJlbnRSZWdFeHAsIHBhcmVudCkgOiBwYXJlbnQgKyAnICcgKyBuZXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChvcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHsgaW5kZXg6IG9wdGlvbnMuaW5kZXggKyAxIH0pO1xuXG4gICAgdmFyIG5lc3RpbmdMZXZlbCA9IHJ1bGUub3B0aW9ucy5uZXN0aW5nTGV2ZWw7XG5cbiAgICBuZXN0aW5nTGV2ZWwgPSBuZXN0aW5nTGV2ZWwgPT09IHVuZGVmaW5lZCA/IDEgOiBuZXN0aW5nTGV2ZWwgKyAxO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgdmFyIGNvbnRhaW5lciA9IHJ1bGUub3B0aW9ucy5wYXJlbnQ7XG4gICAgdmFyIG9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHJlcGxhY2VSZWYgPSB2b2lkIDA7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIGlzTmVzdGVkID0gaGFzQW5kKHByb3ApO1xuICAgICAgdmFyIGlzTmVzdGVkQ29uZGl0aW9uYWwgPSBwcm9wWzBdID09PSAnQCc7XG5cbiAgICAgIGlmICghaXNOZXN0ZWQgJiYgIWlzTmVzdGVkQ29uZGl0aW9uYWwpIGNvbnRpbnVlO1xuXG4gICAgICBvcHRpb25zID0gZ2V0T3B0aW9ucyhydWxlLCBjb250YWluZXIsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVwbGFjZVBhcmVudFJlZnMocHJvcCwgcnVsZS5zZWxlY3RvclxuICAgICAgICAvLyBMYXppbHkgY3JlYXRlIHRoZSByZWYgcmVwbGFjZXIgZnVuY3Rpb24ganVzdCBvbmNlIGZvclxuICAgICAgICAvLyBhbGwgbmVzdGVkIHJ1bGVzIHdpdGhpbiB0aGUgc2hlZXQuXG4gICAgICAgICk7aWYgKCFyZXBsYWNlUmVmKSByZXBsYWNlUmVmID0gZ2V0UmVwbGFjZVJlZihjb250YWluZXJcbiAgICAgICAgLy8gUmVwbGFjZSBhbGwgJHJlZnMuXG4gICAgICAgICk7c2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKHJlZlJlZ0V4cCwgcmVwbGFjZVJlZik7XG5cbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgeyBzZWxlY3Rvcjogc2VsZWN0b3IgfSkpO1xuICAgICAgfSBlbHNlIGlmIChpc05lc3RlZENvbmRpdGlvbmFsKSB7XG4gICAgICAgIGNvbnRhaW5lclxuICAgICAgICAvLyBQbGFjZSBjb25kaXRpb25hbCByaWdodCBhZnRlciB0aGUgcGFyZW50IHJ1bGUgdG8gZW5zdXJlIHJpZ2h0IG9yZGVyaW5nLlxuICAgICAgICAuYWRkUnVsZShwcm9wLCBudWxsLCBvcHRpb25zKS5hZGRSdWxlKHJ1bGUua2V5LCBzdHlsZVtwcm9wXSwgeyBzZWxlY3RvcjogcnVsZS5zZWxlY3RvciB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7IG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNhbWVsQ2FzZTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUgPSByZXF1aXJlKCdoeXBoZW5hdGUtc3R5bGUtbmFtZScpO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVTdHlsZU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogQ29udmVydCBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBkYXNoIHNlcGFyYXRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICBjb252ZXJ0ZWRbKDAsIF9oeXBoZW5hdGVTdHlsZU5hbWUyWydkZWZhdWx0J10pKHByb3ApXSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cblxuLyoqXG4gKiBBbGxvdyBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyBieSBjb252ZXJ0aW5nIHRoZW0gYmFjayB0byBkYXNoZXJpemVkLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICovXG5mdW5jdGlvbiBjYW1lbENhc2UoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSB7XG4gICAgICAvLyBIYW5kbGUgcnVsZXMgbGlrZSBAZm9udC1mYWNlLCB3aGljaCBjYW4gaGF2ZSBtdWx0aXBsZSBzdHlsZXMgaW4gYW4gYXJyYXlcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3R5bGVbaW5kZXhdID0gY29udmVydENhc2Uoc3R5bGVbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydENhc2Uoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBoeXBoZW5hdGVkUHJvcCA9ICgwLCBfaHlwaGVuYXRlU3R5bGVOYW1lMlsnZGVmYXVsdCddKShwcm9wKTtcblxuICAgIC8vIFRoZXJlIHdhcyBubyBjYW1lbCBjYXNlIGluIHBsYWNlXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG5cbiAgICBydWxlLnByb3AoaHlwaGVuYXRlZFByb3AsIHZhbHVlKTtcblxuICAgIC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4geyBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWUgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2c7XG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xudmFyIGNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nIGluIGNhY2hlXG4gICAgPyBjYWNoZVtzdHJpbmddXG4gICAgOiBjYWNoZVtzdHJpbmddID0gc3RyaW5nXG4gICAgICAucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCAnLSQmJylcbiAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGRlZmF1bHRVbml0O1xuXG52YXIgX2RlZmF1bHRVbml0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdFVuaXRzJyk7XG5cbnZhciBfZGVmYXVsdFVuaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmF1bHRVbml0cyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLyoqXG4gKiBDbG9uZXMgdGhlIG9iamVjdCBhbmQgYWRkcyBhIGNhbWVsIGNhc2VkIHByb3BlcnR5IHZlcnNpb24uXG4gKi9cbmZ1bmN0aW9uIGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9iaikge1xuICB2YXIgcmVnRXhwID0gLygtW2Etel0pL2c7XG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG4gIHZhciBuZXdPYmogPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgbmV3T2JqW2tleS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZSldID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIG5ld09iajtcbn1cblxudmFyIHVuaXRzID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24oX2RlZmF1bHRVbml0czJbJ2RlZmF1bHQnXSk7XG5cbi8qKlxuICogUmVjdXJzaXZlIGRlZXAgc3R5bGUgcGFzc2luZyBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBjdXJyZW50IHByb3BlcnR5XG4gKiBAcGFyYW0geyhPYmplY3R8QXJyYXl8TnVtYmVyfFN0cmluZyl9IHByb3BlcnR5IHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7KE9iamVjdHxBcnJheXxOdW1iZXJ8U3RyaW5nKX0gcmVzdWx0aW5nIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGl0ZXJhdGUocHJvcCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXG4gIHZhciBjb252ZXJ0ZWRWYWx1ZSA9IHZhbHVlO1xuXG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSk7XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkgdHlwZSA9ICdhcnJheSc7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgICBmb3IgKHZhciBpbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgICB2YWx1ZVtpbm5lclByb3BdID0gaXRlcmF0ZShpbm5lclByb3AsIHZhbHVlW2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2lubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtfaW5uZXJQcm9wXSA9IGl0ZXJhdGUocHJvcCArICctJyArIF9pbm5lclByb3AsIHZhbHVlW19pbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWVbaV0gPSBpdGVyYXRlKHByb3AsIHZhbHVlW2ldLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgY29udmVydGVkVmFsdWUgPSB2YWx1ZSArIChvcHRpb25zW3Byb3BdIHx8IHVuaXRzW3Byb3BdIHx8ICcnKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0ZWRWYWx1ZTtcbn1cblxuLyoqXG4gKiBBZGQgdW5pdCB0byBudW1lcmljIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZGVmYXVsdFVuaXQoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgY2FtZWxDYXNlZE9wdGlvbnMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihvcHRpb25zKTtcblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHN0eWxlW3Byb3BdID0gaXRlcmF0ZShwcm9wLCBzdHlsZVtwcm9wXSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHsgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLCBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXG4gKiBHZW5lcmF0ZWQganNzLWRlZmF1bHQtdW5pdCBDU1MgcHJvcGVydHkgdW5pdHNcbiAqXG4gKiBAdHlwZSBvYmplY3RcbiAqL1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICAnYW5pbWF0aW9uLWRlbGF5JzogJ21zJyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6ICdtcycsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogJ3B4JyxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6ICdweCcsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXknOiAncHgnLFxuICAnYmFja2dyb3VuZC1zaXplJzogJ3B4JyxcbiAgYm9yZGVyOiAncHgnLFxuICAnYm9yZGVyLWJvdHRvbSc6ICdweCcsXG4gICdib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzJzogJ3B4JyxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogJ3B4JyxcbiAgJ2JvcmRlci1ib3R0b20td2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLWxlZnQnOiAncHgnLFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLXJhZGl1cyc6ICdweCcsXG4gICdib3JkZXItcmlnaHQnOiAncHgnLFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci1zcGFjaW5nJzogJ3B4JyxcbiAgJ2JvcmRlci10b3AnOiAncHgnLFxuICAnYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyc6ICdweCcsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6ICdweCcsXG4gICdib3JkZXItdG9wLXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci13aWR0aCc6ICdweCcsXG4gICdib3JkZXItYWZ0ZXItd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLWJlZm9yZS13aWR0aCc6ICdweCcsXG4gICdib3JkZXItZW5kLXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci1ob3Jpem9udGFsLXNwYWNpbmcnOiAncHgnLFxuICAnYm9yZGVyLXN0YXJ0LXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci12ZXJ0aWNhbC1zcGFjaW5nJzogJ3B4JyxcbiAgYm90dG9tOiAncHgnLFxuICAnYm94LXNoYWRvdyc6ICdweCcsXG4gICdjb2x1bW4tZ2FwJzogJ3B4JyxcbiAgJ2NvbHVtbi1ydWxlJzogJ3B4JyxcbiAgJ2NvbHVtbi1ydWxlLXdpZHRoJzogJ3B4JyxcbiAgJ2NvbHVtbi13aWR0aCc6ICdweCcsXG4gICdmbGV4LWJhc2lzJzogJ3B4JyxcbiAgJ2ZvbnQtc2l6ZSc6ICdweCcsXG4gICdmb250LXNpemUtZGVsdGEnOiAncHgnLFxuICBoZWlnaHQ6ICdweCcsXG4gIGxlZnQ6ICdweCcsXG4gICdsZXR0ZXItc3BhY2luZyc6ICdweCcsXG4gICdsb2dpY2FsLWhlaWdodCc6ICdweCcsXG4gICdsb2dpY2FsLXdpZHRoJzogJ3B4JyxcbiAgbWFyZ2luOiAncHgnLFxuICAnbWFyZ2luLWFmdGVyJzogJ3B4JyxcbiAgJ21hcmdpbi1iZWZvcmUnOiAncHgnLFxuICAnbWFyZ2luLWJvdHRvbSc6ICdweCcsXG4gICdtYXJnaW4tbGVmdCc6ICdweCcsXG4gICdtYXJnaW4tcmlnaHQnOiAncHgnLFxuICAnbWFyZ2luLXRvcCc6ICdweCcsXG4gICdtYXgtaGVpZ2h0JzogJ3B4JyxcbiAgJ21heC13aWR0aCc6ICdweCcsXG4gICdtYXJnaW4tZW5kJzogJ3B4JyxcbiAgJ21hcmdpbi1zdGFydCc6ICdweCcsXG4gICdtYXNrLXBvc2l0aW9uLXgnOiAncHgnLFxuICAnbWFzay1wb3NpdGlvbi15JzogJ3B4JyxcbiAgJ21hc2stc2l6ZSc6ICdweCcsXG4gICdtYXgtbG9naWNhbC1oZWlnaHQnOiAncHgnLFxuICAnbWF4LWxvZ2ljYWwtd2lkdGgnOiAncHgnLFxuICAnbWluLWhlaWdodCc6ICdweCcsXG4gICdtaW4td2lkdGgnOiAncHgnLFxuICAnbWluLWxvZ2ljYWwtaGVpZ2h0JzogJ3B4JyxcbiAgJ21pbi1sb2dpY2FsLXdpZHRoJzogJ3B4JyxcbiAgbW90aW9uOiAncHgnLFxuICAnbW90aW9uLW9mZnNldCc6ICdweCcsXG4gIG91dGxpbmU6ICdweCcsXG4gICdvdXRsaW5lLW9mZnNldCc6ICdweCcsXG4gICdvdXRsaW5lLXdpZHRoJzogJ3B4JyxcbiAgcGFkZGluZzogJ3B4JyxcbiAgJ3BhZGRpbmctYm90dG9tJzogJ3B4JyxcbiAgJ3BhZGRpbmctbGVmdCc6ICdweCcsXG4gICdwYWRkaW5nLXJpZ2h0JzogJ3B4JyxcbiAgJ3BhZGRpbmctdG9wJzogJ3B4JyxcbiAgJ3BhZGRpbmctYWZ0ZXInOiAncHgnLFxuICAncGFkZGluZy1iZWZvcmUnOiAncHgnLFxuICAncGFkZGluZy1lbmQnOiAncHgnLFxuICAncGFkZGluZy1zdGFydCc6ICdweCcsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6ICclJyxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi15JzogJyUnLFxuICBwZXJzcGVjdGl2ZTogJ3B4JyxcbiAgcmlnaHQ6ICdweCcsXG4gICdzaGFwZS1tYXJnaW4nOiAncHgnLFxuICBzaXplOiAncHgnLFxuICAndGV4dC1pbmRlbnQnOiAncHgnLFxuICAndGV4dC1zdHJva2UnOiAncHgnLFxuICAndGV4dC1zdHJva2Utd2lkdGgnOiAncHgnLFxuICB0b3A6ICdweCcsXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogJyUnLFxuICAndHJhbnNmb3JtLW9yaWdpbi14JzogJyUnLFxuICAndHJhbnNmb3JtLW9yaWdpbi15JzogJyUnLFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogJyUnLFxuICAndHJhbnNpdGlvbi1kZWxheSc6ICdtcycsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogJ21zJyxcbiAgJ3ZlcnRpY2FsLWFsaWduJzogJ3B4JyxcbiAgd2lkdGg6ICdweCcsXG4gICd3b3JkLXNwYWNpbmcnOiAncHgnLFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtZXhwYW5kIGludGVyZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6ICdweCcsXG4gICdib3gtc2hhZG93LXknOiAncHgnLFxuICAnYm94LXNoYWRvdy1ibHVyJzogJ3B4JyxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogJ3B4JyxcbiAgJ2ZvbnQtbGluZS1oZWlnaHQnOiAncHgnLFxuICAndGV4dC1zaGFkb3cteCc6ICdweCcsXG4gICd0ZXh0LXNoYWRvdy15JzogJ3B4JyxcbiAgJ3RleHQtc2hhZG93LWJsdXInOiAncHgnXG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGpzc1ZlbmRvclByZWZpeGVyO1xuXG52YXIgX2Nzc1ZlbmRvciA9IHJlcXVpcmUoJ2Nzcy12ZW5kb3InKTtcblxudmFyIHZlbmRvciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jc3NWZW5kb3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGpzc1ZlbmRvclByZWZpeGVyKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcnVsZS5rZXkgPSAnQCcgKyB2ZW5kb3IucHJlZml4LmNzcyArIHJ1bGUua2V5LnN1YnN0cigxKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICB2YXIgY2hhbmdlUHJvcCA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFByb3AgPSB2ZW5kb3Iuc3VwcG9ydGVkUHJvcGVydHkocHJvcCk7XG4gICAgICBpZiAoc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wKSBjaGFuZ2VQcm9wID0gdHJ1ZTtcblxuICAgICAgdmFyIGNoYW5nZVZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkVmFsdWUgPSB2ZW5kb3Iuc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdmFsdWUpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlICYmIHN1cHBvcnRlZFZhbHVlICE9PSB2YWx1ZSkgY2hhbmdlVmFsdWUgPSB0cnVlO1xuXG4gICAgICBpZiAoY2hhbmdlUHJvcCB8fCBjaGFuZ2VWYWx1ZSkge1xuICAgICAgICBpZiAoY2hhbmdlUHJvcCkgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBzdHlsZVtzdXBwb3J0ZWRQcm9wIHx8IHByb3BdID0gc3VwcG9ydGVkVmFsdWUgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiB2ZW5kb3Iuc3VwcG9ydGVkVmFsdWUocHJvcCwgdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHsgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZSwgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLCBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5zdXBwb3J0ZWRWYWx1ZSA9IGV4cG9ydHMuc3VwcG9ydGVkUHJvcGVydHkgPSBleHBvcnRzLnByZWZpeCA9IHVuZGVmaW5lZDtcblxudmFyIF9wcmVmaXggPSByZXF1aXJlKCcuL3ByZWZpeCcpO1xuXG52YXIgX3ByZWZpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXgpO1xuXG52YXIgX3N1cHBvcnRlZFByb3BlcnR5ID0gcmVxdWlyZSgnLi9zdXBwb3J0ZWQtcHJvcGVydHknKTtcblxudmFyIF9zdXBwb3J0ZWRQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdXBwb3J0ZWRQcm9wZXJ0eSk7XG5cbnZhciBfc3VwcG9ydGVkVmFsdWUgPSByZXF1aXJlKCcuL3N1cHBvcnRlZC12YWx1ZScpO1xuXG52YXIgX3N1cHBvcnRlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N1cHBvcnRlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIHByZWZpeDogX3ByZWZpeDJbJ2RlZmF1bHQnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IF9zdXBwb3J0ZWRQcm9wZXJ0eTJbJ2RlZmF1bHQnXSxcbiAgc3VwcG9ydGVkVmFsdWU6IF9zdXBwb3J0ZWRWYWx1ZTJbJ2RlZmF1bHQnXVxufTsgLyoqXG4gICAgKiBDU1MgVmVuZG9yIHByZWZpeCBkZXRlY3Rpb24gYW5kIHByb3BlcnR5IGZlYXR1cmUgdGVzdGluZy5cbiAgICAqXG4gICAgKiBAY29weXJpZ2h0IE9sZWcgU2xvYm9kc2tvaSAyMDE1XG4gICAgKiBAd2Vic2l0ZSBodHRwczovL2dpdGh1Yi5jb20vanNzdHlsZXMvY3NzLXZlbmRvclxuICAgICogQGxpY2Vuc2UgTUlUXG4gICAgKi9cblxuZXhwb3J0cy5wcmVmaXggPSBfcHJlZml4MlsnZGVmYXVsdCddO1xuZXhwb3J0cy5zdXBwb3J0ZWRQcm9wZXJ0eSA9IF9zdXBwb3J0ZWRQcm9wZXJ0eTJbJ2RlZmF1bHQnXTtcbmV4cG9ydHMuc3VwcG9ydGVkVmFsdWUgPSBfc3VwcG9ydGVkVmFsdWUyWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gc3VwcG9ydGVkUHJvcGVydHk7XG5cbnZhciBfaXNJbkJyb3dzZXIgPSByZXF1aXJlKCdpcy1pbi1icm93c2VyJyk7XG5cbnZhciBfaXNJbkJyb3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbkJyb3dzZXIpO1xuXG52YXIgX3ByZWZpeCA9IHJlcXVpcmUoJy4vcHJlZml4Jyk7XG5cbnZhciBfcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeCk7XG5cbnZhciBfY2FtZWxpemUgPSByZXF1aXJlKCcuL2NhbWVsaXplJyk7XG5cbnZhciBfY2FtZWxpemUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FtZWxpemUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBlbCA9IHZvaWQgMDtcbnZhciBjYWNoZSA9IHt9O1xuXG5pZiAoX2lzSW5Ccm93c2VyMlsnZGVmYXVsdCddKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG4gIC8qKlxuICAgKiBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gICAqIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgICogaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAgKlxuICAgKiBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAgKiBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gICAqIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuICAgKi9cbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnJyk7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGlmICghaXNOYU4oa2V5KSkgY2FjaGVbY29tcHV0ZWRba2V5XV0gPSBjb21wdXRlZFtrZXldO1xuICB9XG59XG5cbi8qKlxuICogVGVzdCBpZiBhIHByb3BlcnR5IGlzIHN1cHBvcnRlZCwgcmV0dXJucyBzdXBwb3J0ZWQgcHJvcGVydHkgd2l0aCB2ZW5kb3JcbiAqIHByZWZpeCBpZiByZXF1aXJlZC4gUmV0dXJucyBgZmFsc2VgIGlmIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3AgZGFzaCBzZXBhcmF0ZWRcbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDtcblxuICAvLyBXZSBoYXZlIG5vdCB0ZXN0ZWQgdGhpcyBwcm9wIHlldCwgbGV0cyBkbyB0aGUgdGVzdC5cbiAgaWYgKGNhY2hlW3Byb3BdICE9IG51bGwpIHJldHVybiBjYWNoZVtwcm9wXTtcblxuICAvLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nXG4gIC8vIGNzcyBzeW50YXggZm9yIGUuZy4gaW4gRkYuXG4gIC8vIFRlc3QgaWYgcHJvcGVydHkgaXMgc3VwcG9ydGVkIGFzIGl0IGlzLlxuICBpZiAoKDAsIF9jYW1lbGl6ZTJbJ2RlZmF1bHQnXSkocHJvcCkgaW4gZWwuc3R5bGUpIHtcbiAgICBjYWNoZVtwcm9wXSA9IHByb3A7XG4gIH1cbiAgLy8gVGVzdCBpZiBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQgd2l0aCB2ZW5kb3IgcHJlZml4LlxuICBlbHNlIGlmIChfcHJlZml4MlsnZGVmYXVsdCddLmpzICsgKDAsIF9jYW1lbGl6ZTJbJ2RlZmF1bHQnXSkoJy0nICsgcHJvcCkgaW4gZWwuc3R5bGUpIHtcbiAgICAgIGNhY2hlW3Byb3BdID0gX3ByZWZpeDJbJ2RlZmF1bHQnXS5jc3MgKyBwcm9wO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZVtwcm9wXSA9IGZhbHNlO1xuICAgIH1cblxuICByZXR1cm4gY2FjaGVbcHJvcF07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gY2FtZWxpemU7XG52YXIgcmVnRXhwID0gL1stXFxzXSsoLik/L2c7XG5cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsIGNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG5mdW5jdGlvbiB0b1VwcGVyKG1hdGNoLCBjKSB7XG4gIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gc3VwcG9ydGVkVmFsdWU7XG5cbnZhciBfaXNJbkJyb3dzZXIgPSByZXF1aXJlKCdpcy1pbi1icm93c2VyJyk7XG5cbnZhciBfaXNJbkJyb3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJbkJyb3dzZXIpO1xuXG52YXIgX3ByZWZpeCA9IHJlcXVpcmUoJy4vcHJlZml4Jyk7XG5cbnZhciBfcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIGNhY2hlID0ge307XG52YXIgZWwgPSB2b2lkIDA7XG5cbmlmIChfaXNJbkJyb3dzZXIyWydkZWZhdWx0J10pIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgaWYgbmVlZGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdmFsdWUgaXMgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBzdXBwb3J0ZWRWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgaWYgKCFlbCkgcmV0dXJuIHZhbHVlO1xuXG4gIC8vIEl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGxpa2UgJzEnLlxuICAvLyBXZSB3YW50IG9ubHkgcHJlZml4YWJsZSB2YWx1ZXMgaGVyZS5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgIWlzTmFOKHBhcnNlSW50KHZhbHVlLCAxMCkpKSByZXR1cm4gdmFsdWU7XG5cbiAgdmFyIGNhY2hlS2V5ID0gcHJvcGVydHkgKyB2YWx1ZTtcblxuICBpZiAoY2FjaGVbY2FjaGVLZXldICE9IG51bGwpIHJldHVybiBjYWNoZVtjYWNoZUtleV07XG5cbiAgLy8gSUUgY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgaW4gc29tZSBjYXNlcywgZm9yIGUuZy4gc3R5bGUuY29udGVudCA9ICdiYXInXG4gIHRyeSB7XG4gICAgLy8gVGVzdCB2YWx1ZSBhcyBpdCBpcy5cbiAgICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY2FjaGVbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVmFsdWUgaXMgc3VwcG9ydGVkIGFzIGl0IGlzLlxuICBpZiAoZWwuc3R5bGVbcHJvcGVydHldICE9PSAnJykge1xuICAgIGNhY2hlW2NhY2hlS2V5XSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIFRlc3QgdmFsdWUgd2l0aCB2ZW5kb3IgcHJlZml4LlxuICAgIHZhbHVlID0gX3ByZWZpeDJbJ2RlZmF1bHQnXS5jc3MgKyB2YWx1ZTtcblxuICAgIC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG4gICAgaWYgKHZhbHVlID09PSAnLW1zLWZsZXgnKSB2YWx1ZSA9ICctbXMtZmxleGJveCc7XG5cbiAgICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcblxuICAgIC8vIFZhbHVlIGlzIHN1cHBvcnRlZCB3aXRoIHZlbmRvciBwcmVmaXguXG4gICAgaWYgKGVsLnN0eWxlW3Byb3BlcnR5XSAhPT0gJycpIGNhY2hlW2NhY2hlS2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgaWYgKCFjYWNoZVtjYWNoZUtleV0pIGNhY2hlW2NhY2hlS2V5XSA9IGZhbHNlO1xuXG4gIC8vIFJlc2V0IHN0eWxlIHZhbHVlLlxuICBlbC5zdHlsZVtwcm9wZXJ0eV0gPSAnJztcblxuICByZXR1cm4gY2FjaGVbY2FjaGVLZXldO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGpzc1Byb3BzU29ydDtcbi8qKlxuICogU29ydCBwcm9wcyBieSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGpzc1Byb3BzU29ydCgpIHtcbiAgZnVuY3Rpb24gc29ydChwcm9wMCwgcHJvcDEpIHtcbiAgICByZXR1cm4gcHJvcDAubGVuZ3RoIC0gcHJvcDEubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChzb3J0KTtcbiAgICBmb3IgKHZhciBwcm9wIGluIHByb3BzKSB7XG4gICAgICBuZXdTdHlsZVtwcm9wc1twcm9wXV0gPSBzdHlsZVtwcm9wc1twcm9wXV07XG4gICAgfVxuICAgIHJldHVybiBuZXdTdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7IG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBiYXNlQ2xhc3NlcyA9IG9wdGlvbnMuYmFzZUNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzID0gb3B0aW9ucy5uZXdDbGFzc2VzLFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQ7XG5cbiAgaWYgKCFuZXdDbGFzc2VzKSB7XG4gICAgcmV0dXJuIGJhc2VDbGFzc2VzO1xuICB9XG5cbiAgdmFyIG5leHRDbGFzc2VzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgYmFzZUNsYXNzZXMpO1xuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoQ29tcG9uZW50KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoYmFzZUNsYXNzZXNba2V5XSB8fCAhbmV3Q2xhc3Nlc1trZXldLCBbXCJNYXRlcmlhbC1VSTogdGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcGVydHkgaXMgbm90IGltcGxlbWVudGVkIGluIFwiLmNvbmNhdCgoMCwgX3V0aWxzLmdldERpc3BsYXlOYW1lKShDb21wb25lbnQpLCBcIi5cIiksIFwiWW91IGNhbiBvbmx5IG92ZXJyaWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBcIi5jb25jYXQoT2JqZWN0LmtleXMoYmFzZUNsYXNzZXMpLmpvaW4oJywnKSwgXCIuXCIpXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoIW5ld0NsYXNzZXNba2V5XSB8fCB0eXBlb2YgbmV3Q2xhc3Nlc1trZXldID09PSAnc3RyaW5nJywgW1wiTWF0ZXJpYWwtVUk6IHRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3BlcnR5IGlzIG5vdCB2YWxpZCBmb3IgXCIuY29uY2F0KCgwLCBfdXRpbHMuZ2V0RGlzcGxheU5hbWUpKENvbXBvbmVudCksIFwiLlwiKSwgXCJZb3UgbmVlZCB0byBwcm92aWRlIGEgbm9uIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mOiBcIi5jb25jYXQobmV3Q2xhc3Nlc1trZXldLCBcIi5cIildLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICBpZiAobmV3Q2xhc3Nlc1trZXldKSB7XG4gICAgICBuZXh0Q2xhc3Nlc1trZXldID0gXCJcIi5jb25jYXQoYmFzZUNsYXNzZXNba2V5XSwgXCIgXCIpLmNvbmNhdChuZXdDbGFzc2VzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXh0Q2xhc3Nlcztcbn1cblxudmFyIF9kZWZhdWx0ID0gbWVyZ2VDbGFzc2VzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBVc2VkIGh0dHBzOi8vZ2l0aHViLmNvbS90aGlua2xvb3AvbXVsdGkta2V5LWNhY2hlIGFzIGluc3BpcmF0aW9uXG52YXIgbXVsdGlLZXlTdG9yZSA9IHtcbiAgc2V0OiBmdW5jdGlvbiBzZXQoY2FjaGUsIGtleTEsIGtleTIsIHZhbHVlKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuXG4gICAgaWYgKCFzdWJDYWNoZSkge1xuICAgICAgc3ViQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICBjYWNoZS5zZXQoa2V5MSwgc3ViQ2FjaGUpO1xuICAgIH1cblxuICAgIHN1YkNhY2hlLnNldChrZXkyLCB2YWx1ZSk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gZ2V0KGNhY2hlLCBrZXkxLCBrZXkyKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuICAgIHJldHVybiBzdWJDYWNoZSA/IHN1YkNhY2hlLmdldChrZXkyKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgZGVsZXRlOiBmdW5jdGlvbiBfZGVsZXRlKGNhY2hlLCBrZXkxLCBrZXkyKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuICAgIHN1YkNhY2hlLmRlbGV0ZShrZXkyKTtcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IG11bHRpS2V5U3RvcmU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2RlZXBtZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXBtZXJnZVwiKSk7XG5cbnZhciBfaXNQbGFpbk9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlzLXBsYWluLW9iamVjdFwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2NyZWF0ZUJyZWFrcG9pbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVCcmVha3BvaW50c1wiKSk7XG5cbnZhciBfY3JlYXRlTWl4aW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVNaXhpbnNcIikpO1xuXG52YXIgX2NyZWF0ZVBhbGV0dGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVBhbGV0dGVcIikpO1xuXG52YXIgX2NyZWF0ZVR5cG9ncmFwaHkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVR5cG9ncmFwaHlcIikpO1xuXG52YXIgX3NoYWRvd3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NoYWRvd3NcIikpO1xuXG52YXIgX3NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zaGFwZVwiKSk7XG5cbnZhciBfc3BhY2luZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3BhY2luZ1wiKSk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RyYW5zaXRpb25zXCIpKTtcblxudmFyIF96SW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3pJbmRleFwiKSk7XG5cbi8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG5mdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgX29wdGlvbnMkYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzLFxuICAgICAgYnJlYWtwb2ludHNJbnB1dCA9IF9vcHRpb25zJGJyZWFrcG9pbnRzID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJGJyZWFrcG9pbnRzLFxuICAgICAgX29wdGlvbnMkbWl4aW5zID0gb3B0aW9ucy5taXhpbnMsXG4gICAgICBtaXhpbnNJbnB1dCA9IF9vcHRpb25zJG1peGlucyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRtaXhpbnMsXG4gICAgICBfb3B0aW9ucyRwYWxldHRlID0gb3B0aW9ucy5wYWxldHRlLFxuICAgICAgcGFsZXR0ZUlucHV0ID0gX29wdGlvbnMkcGFsZXR0ZSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRwYWxldHRlLFxuICAgICAgc2hhZG93c0lucHV0ID0gb3B0aW9ucy5zaGFkb3dzLFxuICAgICAgX29wdGlvbnMkc3BhY2luZyA9IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgIHNwYWNpbmdJbnB1dCA9IF9vcHRpb25zJHNwYWNpbmcgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkc3BhY2luZyxcbiAgICAgIF9vcHRpb25zJHR5cG9ncmFwaHkgPSBvcHRpb25zLnR5cG9ncmFwaHksXG4gICAgICB0eXBvZ3JhcGh5SW5wdXQgPSBfb3B0aW9ucyR0eXBvZ3JhcGh5ID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHR5cG9ncmFwaHksXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKG9wdGlvbnMsIFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwicGFsZXR0ZVwiLCBcInNoYWRvd3NcIiwgXCJzcGFjaW5nXCIsIFwidHlwb2dyYXBoeVwiXSk7XG4gIHZhciBwYWxldHRlID0gKDAsIF9jcmVhdGVQYWxldHRlLmRlZmF1bHQpKHBhbGV0dGVJbnB1dCk7XG4gIHZhciBicmVha3BvaW50cyA9ICgwLCBfY3JlYXRlQnJlYWtwb2ludHMuZGVmYXVsdCkoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX3NwYWNpbmcuZGVmYXVsdCwgc3BhY2luZ0lucHV0KTtcbiAgdmFyIG11aVRoZW1lID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgbWl4aW5zOiAoMCwgX2NyZWF0ZU1peGlucy5kZWZhdWx0KShicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIG92ZXJyaWRlczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBzdHlsZXNcbiAgICBwYWxldHRlOiBwYWxldHRlLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBJbmplY3QgY3VzdG9tIHByb3BlcnRpZXNcbiAgICBzaGFkb3dzOiBzaGFkb3dzSW5wdXQgfHwgX3NoYWRvd3MuZGVmYXVsdCxcbiAgICB0eXBvZ3JhcGh5OiAoMCwgX2NyZWF0ZVR5cG9ncmFwaHkuZGVmYXVsdCkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KVxuICB9LCAoMCwgX2RlZXBtZXJnZS5kZWZhdWx0KSh7XG4gICAgc2hhcGU6IF9zaGFwZS5kZWZhdWx0LFxuICAgIHNwYWNpbmc6IHNwYWNpbmcsXG4gICAgdHJhbnNpdGlvbnM6IF90cmFuc2l0aW9ucy5kZWZhdWx0LFxuICAgIHpJbmRleDogX3pJbmRleC5kZWZhdWx0XG4gIH0sIG90aGVyLCB7XG4gICAgaXNNZXJnZWFibGVPYmplY3Q6IF9pc1BsYWluT2JqZWN0LmRlZmF1bHRcbiAgfSkpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkobXVpVGhlbWUuc2hhZG93cy5sZW5ndGggPT09IDI1LCAnTWF0ZXJpYWwtVUk6IHRoZSBzaGFkb3dzIGFycmF5IHByb3ZpZGVkIHRvIGNyZWF0ZU11aVRoZW1lIHNob3VsZCBzdXBwb3J0IDI1IGVsZXZhdGlvbnMuJykgOiB2b2lkIDA7XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxudmFyIF9kZWZhdWx0ID0gY3JlYXRlTXVpVGhlbWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvKiFcbiAqIGlzLXBsYWluLW9iamVjdCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtcGxhaW4tb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJ2lzb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0T2JqZWN0KG8pIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG8pID09PSB0cnVlXG4gICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG8pIHtcbiAgdmFyIGN0b3IscHJvdDtcblxuICBpZiAoaXNPYmplY3RPYmplY3QobykgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgaGFzIG1vZGlmaWVkIGNvbnN0cnVjdG9yXG4gIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuICBpZiAodHlwZW9mIGN0b3IgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiBoYXMgbW9kaWZpZWQgcHJvdG90eXBlXG4gIHByb3QgPSBjdG9yLnByb3RvdHlwZTtcbiAgaWYgKGlzT2JqZWN0T2JqZWN0KHByb3QpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW4gT2JqZWN0LXNwZWNpZmljIG1ldGhvZFxuICBpZiAocHJvdC5oYXNPd25Qcm9wZXJ0eSgnaXNQcm90b3R5cGVPZicpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIE1vc3QgbGlrZWx5IGEgcGxhaW4gT2JqZWN0XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8qIVxuICogaXNvYmplY3QgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHZhbCkgPT09IGZhbHNlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyZWFrcG9pbnRzO1xuZXhwb3J0cy5rZXlzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxudmFyIGtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5leHBvcnRzLmtleXMgPSBrZXlzO1xuXG5mdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICB2YXIgX2JyZWFrcG9pbnRzJHZhbHVlcyA9IGJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgIHZhbHVlcyA9IF9icmVha3BvaW50cyR2YWx1ZXMgPT09IHZvaWQgMCA/IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjBcbiAgfSA6IF9icmVha3BvaW50cyR2YWx1ZXMsXG4gICAgICBfYnJlYWtwb2ludHMkdW5pdCA9IGJyZWFrcG9pbnRzLnVuaXQsXG4gICAgICB1bml0ID0gX2JyZWFrcG9pbnRzJHVuaXQgPT09IHZvaWQgMCA/ICdweCcgOiBfYnJlYWtwb2ludHMkdW5pdCxcbiAgICAgIF9icmVha3BvaW50cyRzdGVwID0gYnJlYWtwb2ludHMuc3RlcCxcbiAgICAgIHN0ZXAgPSBfYnJlYWtwb2ludHMkc3RlcCA9PT0gdm9pZCAwID8gNSA6IF9icmVha3BvaW50cyRzdGVwLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShicmVha3BvaW50cywgW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl0pO1xuXG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWUpLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpICsgMTtcbiAgICB2YXIgdXBwZXJib3VuZCA9IHZhbHVlc1trZXlzW2VuZEluZGV4XV07XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICAvLyB4bCBkb3duIGFwcGxpZXMgdG8gYWxsIHNpemVzXG4gICAgICByZXR1cm4gdXAoJ3hzJyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHVwcGVyYm91bmQgPT09ICdudW1iZXInICYmIGVuZEluZGV4ID4gMCA/IHVwcGVyYm91bmQgOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtYXgtd2lkdGg6XCIuY29uY2F0KHZhbHVlIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpICsgMTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1cChzdGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlc1tzdGFydF0pLmNvbmNhdCh1bml0LCBcIikgYW5kIFwiKSArIFwiKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWVzW2tleXNbZW5kSW5kZXhdXSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpZHRoKGtleSkge1xuICAgIHJldHVybiB2YWx1ZXNba2V5XTtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBrZXlzOiBrZXlzLFxuICAgIHZhbHVlczogdmFsdWVzLFxuICAgIHVwOiB1cCxcbiAgICBkb3duOiBkb3duLFxuICAgIGJldHdlZW46IGJldHdlZW4sXG4gICAgb25seTogb25seSxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgb3RoZXIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1peGlucztcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zKSB7XG4gIHZhciBfdG9vbGJhcjtcblxuICByZXR1cm4gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgZ3V0dGVyczogZnVuY3Rpb24gZ3V0dGVycygpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZy51bml0ICogMixcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nLnVuaXQgKiAyXG4gICAgICB9LCBzdHlsZXMsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBicmVha3BvaW50cy51cCgnc20nKSwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nLnVuaXQgKiAzLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcudW5pdCAqIDNcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVQYWxldHRlO1xuZXhwb3J0cy5kYXJrID0gZXhwb3J0cy5saWdodCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2RlZXBtZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXBtZXJnZVwiKSk7XG5cbnZhciBfaW5kaWdvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2luZGlnb1wiKSk7XG5cbnZhciBfcGluayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9waW5rXCIpKTtcblxudmFyIF9ncmV5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2dyZXlcIikpO1xuXG52YXIgX3JlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9yZWRcIikpO1xuXG52YXIgX2NvbW1vbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9jb21tb25cIikpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKFwiLi9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxudmFyIGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJyxcbiAgICAvLyBUZXh0IGhpbnRzLlxuICAgIGhpbnQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IF9jb21tb24uZGVmYXVsdC53aGl0ZSxcbiAgICBkZWZhdWx0OiBfZ3JleS5kZWZhdWx0WzUwXVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjE0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKSdcbiAgfVxufTtcbmV4cG9ydHMubGlnaHQgPSBsaWdodDtcbnZhciBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGhpbnQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBfZ3JleS5kZWZhdWx0WzgwMF0sXG4gICAgZGVmYXVsdDogJyMzMDMwMzAnXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMSxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknXG4gIH1cbn07XG5leHBvcnRzLmRhcmsgPSBkYXJrO1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSAoMCwgX2NvbG9yTWFuaXB1bGF0b3IubGlnaHRlbikoaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9ICgwLCBfY29sb3JNYW5pcHVsYXRvci5kYXJrZW4pKGludGVudC5tYWluLCB0b25hbE9mZnNldCAqIDEuNSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IF9pbmRpZ28uZGVmYXVsdFszMDBdLFxuICAgIG1haW46IF9pbmRpZ28uZGVmYXVsdFs1MDBdLFxuICAgIGRhcms6IF9pbmRpZ28uZGVmYXVsdFs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogX3BpbmsuZGVmYXVsdC5BMjAwLFxuICAgIG1haW46IF9waW5rLmRlZmF1bHQuQTQwMCxcbiAgICBkYXJrOiBfcGluay5kZWZhdWx0LkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogX3JlZC5kZWZhdWx0WzMwMF0sXG4gICAgbWFpbjogX3JlZC5kZWZhdWx0WzUwMF0sXG4gICAgZGFyazogX3JlZC5kZWZhdWx0WzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwYWxldHRlLCBbXCJwcmltYXJ5XCIsIFwic2Vjb25kYXJ5XCIsIFwiZXJyb3JcIiwgXCJ0eXBlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXSk7XG5cbiAgZnVuY3Rpb24gZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmQpIHtcbiAgICAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gICAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuICAgIHZhciBjb250cmFzdFRleHQgPSAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZ2V0Q29udHJhc3RSYXRpbykoYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyYXN0ID0gKDAsIF9jb2xvck1hbmlwdWxhdG9yLmdldENvbnRyYXN0UmF0aW8pKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoY29udHJhc3QgPj0gMywgW1wiTWF0ZXJpYWwtVUk6IHRoZSBjb250cmFzdCByYXRpbyBvZiBcIi5jb25jYXQoY29udHJhc3QsIFwiOjEgZm9yIFwiKS5jb25jYXQoY29udHJhc3RUZXh0LCBcIiBvbiBcIikuY29uY2F0KGJhY2tncm91bmQpLCAnZmFsbHMgYmVsb3cgdGhlIFdBQ0cgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gYXVnbWVudENvbG9yKGNvbG9yKSB7XG4gICAgdmFyIG1haW5TaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTAwO1xuICAgIHZhciBsaWdodFNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAzMDA7XG4gICAgdmFyIGRhcmtTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogNzAwO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb2xvci5tYWluKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogdGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC4nLCBcIlRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIGBtYWluYCBwcm9wZXJ0eSBvciBhIGBcIi5jb25jYXQobWFpblNoYWRlLCBcImAgcHJvcGVydHkuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgYXVnbWVudENvbG9yKHByaW1hcnkpO1xuICBhdWdtZW50Q29sb3Ioc2Vjb25kYXJ5LCAnQTQwMCcsICdBMjAwJywgJ0E3MDAnKTtcbiAgYXVnbWVudENvbG9yKGVycm9yKTtcbiAgdmFyIHR5cGVzID0ge1xuICAgIGRhcms6IGRhcmssXG4gICAgbGlnaHQ6IGxpZ2h0XG4gIH07XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh0eXBlc1t0eXBlXSwgXCJNYXRlcmlhbC1VSTogdGhlIHBhbGV0dGUgdHlwZSBgXCIuY29uY2F0KHR5cGUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLlwiKSkgOiB2b2lkIDA7XG4gIHZhciBwYWxldHRlT3V0cHV0ID0gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBfY29tbW9uLmRlZmF1bHQsXG4gICAgLy8gVGhlIHBhbGV0dGUgdHlwZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgdHlwZTogdHlwZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogcHJpbWFyeSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IHNlY29uZGFyeSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBlcnJvcixcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleTogX2dyZXkuZGVmYXVsdCxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW4gdGhlIGJhY2tncm91bmQgYW5kXG4gICAgLy8gdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQ6IGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2UgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm4gdGhlIGNvbG9yIG9mIHRoZSB0ZXh0IHRvIG1heGltaXplIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQ6IGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcjogYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldDogdG9uYWxPZmZzZXRcbiAgfSwgdHlwZXNbdHlwZV0pLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG52YXIgX2RlZmF1bHQgPSBpbmRpZ287XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBwaW5rID0ge1xuICA1MDogJyNmY2U0ZWMnLFxuICAxMDA6ICcjZjhiYmQwJyxcbiAgMjAwOiAnI2Y0OGZiMScsXG4gIDMwMDogJyNmMDYyOTInLFxuICA0MDA6ICcjZWM0MDdhJyxcbiAgNTAwOiAnI2U5MWU2MycsXG4gIDYwMDogJyNkODFiNjAnLFxuICA3MDA6ICcjYzIxODViJyxcbiAgODAwOiAnI2FkMTQ1NycsXG4gIDkwMDogJyM4ODBlNGYnLFxuICBBMTAwOiAnI2ZmODBhYicsXG4gIEEyMDA6ICcjZmY0MDgxJyxcbiAgQTQwMDogJyNmNTAwNTcnLFxuICBBNzAwOiAnI2M1MTE2Midcbn07XG52YXIgX2RlZmF1bHQgPSBwaW5rO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNkNWQ1ZDUnLFxuICBBMjAwOiAnI2FhYWFhYScsXG4gIEE0MDA6ICcjMzAzMDMwJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xudmFyIF9kZWZhdWx0ID0gZ3JleTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xudmFyIF9kZWZhdWx0ID0gcmVkO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xudmFyIF9kZWZhdWx0ID0gY29tbW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHlwb2dyYXBoeTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZGVlcG1lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVlcG1lcmdlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRodG1sRm9udFNpemUgPSBfcmVmLmh0bWxGb250U2l6ZSxcbiAgICAgIGh0bWxGb250U2l6ZSA9IF9yZWYkaHRtbEZvbnRTaXplID09PSB2b2lkIDAgPyAxNiA6IF9yZWYkaHRtbEZvbnRTaXplLFxuICAgICAgX3JlZiR1c2VOZXh0VmFyaWFudHMgPSBfcmVmLnVzZU5leHRWYXJpYW50cyxcbiAgICAgIHVzZU5leHRWYXJpYW50cyA9IF9yZWYkdXNlTmV4dFZhcmlhbnRzID09PSB2b2lkIDAgPyBCb29sZWFuKF91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9VU0VfTkVYVF9UWVBPR1JBUEhZX1ZBUklBTlRTX18pIDogX3JlZiR1c2VOZXh0VmFyaWFudHMsXG4gICAgICBfcmVmJHN1cHByZXNzV2FybmluZyA9IF9yZWYuc3VwcHJlc3NXYXJuaW5nLFxuICAgICAgc3VwcHJlc3NXYXJuaW5nID0gX3JlZiRzdXBwcmVzc1dhcm5pbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRzdXBwcmVzc1dhcm5pbmcsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9yZWYsIFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImh0bWxGb250U2l6ZVwiLCBcInVzZU5leHRWYXJpYW50c1wiLCBcInN1cHByZXNzV2FybmluZ1wiLCBcImFsbFZhcmlhbnRzXCJdKTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkodXNlTmV4dFZhcmlhbnRzIHx8IHN1cHByZXNzV2FybmluZywgJ01hdGVyaWFsLVVJOiB5b3UgYXJlIHVzaW5nIHRoZSBkZXByZWNhdGVkIHR5cG9ncmFwaHkgdmFyaWFudHMgJyArICd0aGF0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLicgKyAnXFxuUGxlYXNlIHJlYWQgdGhlIG1pZ3JhdGlvbiBndWlkZSB1bmRlciBodHRwczovL21hdGVyaWFsLXVpLmNvbS9zdHlsZS90eXBvZ3JhcGh5I21pZ3JhdGlvbi10by10eXBvZ3JhcGh5LXYyJykgOiB2b2lkIDA7XG4gIHZhciBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICB2YXIgcHhUb1JlbSA9IGZ1bmN0aW9uIHB4VG9SZW0oc2l6ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzaXplIC8gaHRtbEZvbnRTaXplICogY29lZiwgXCJyZW1cIik7XG4gIH07XG5cbiAgdmFyIGJ1aWxkVmFyaWFudCA9IGZ1bmN0aW9uIGJ1aWxkVmFyaWFudChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodCxcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIG5leHRWYXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMSwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMDQsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjE3LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMywgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxTmV4dDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5Mk5leHQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNSwgMC4xNSksXG4gICAgYnV0dG9uTmV4dDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb25OZXh0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTsgLy8gVG8gcmVtb3ZlIGluIHY0XG5cbiAgdmFyIG9sZFZhcmlhbnRzID0ge1xuICAgIGRpc3BsYXk0OiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDExMiksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGV0dGVyU3BhY2luZzogJy0uMDRlbScsXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgxMjggLyAxMTIpLCBcImVtXCIpLFxuICAgICAgbWFyZ2luTGVmdDogJy0uMDRlbScsXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBkaXNwbGF5MzogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSg1NiksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAnLS4wMmVtJyxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDczIC8gNTYpLCBcImVtXCIpLFxuICAgICAgbWFyZ2luTGVmdDogJy0uMDJlbScsXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBkaXNwbGF5MjogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSg0NSksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCg1MSAvIDQ1KSwgXCJlbVwiKSxcbiAgICAgIG1hcmdpbkxlZnQ6ICctLjAyZW0nLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCBhbGxWYXJpYW50cyksXG4gICAgZGlzcGxheTE6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMzQpLFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoNDEgLyAzNCksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBoZWFkbGluZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSgyNCksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgzMi41IC8gMjQpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSwgYWxsVmFyaWFudHMpLFxuICAgIHRpdGxlOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDIxKSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjQuNSAvIDIxKSwgXCJlbVwiKSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBzdWJoZWFkaW5nOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDE2KSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDI0IC8gMTYpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSwgYWxsVmFyaWFudHMpLFxuICAgIGJvZHkyOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDE0KSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjQgLyAxNCksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LCBhbGxWYXJpYW50cyksXG4gICAgYm9keTE6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMTQpLFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjAuNSAvIDE0KSwgXCJlbVwiKSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBjYXB0aW9uOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDEyKSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDE2LjUgLyAxMiksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBidXR0b246ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMTQpLFxuICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKVxuICB9O1xuICByZXR1cm4gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgcHhUb1JlbTogcHhUb1JlbSxcbiAgICByb3VuZDogcm91bmQsXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW1cbiAgfSwgb2xkVmFyaWFudHMsIG5leHRWYXJpYW50cywgdXNlTmV4dFZhcmlhbnRzID8ge1xuICAgIGJvZHkxOiBuZXh0VmFyaWFudHMuYm9keTFOZXh0LFxuICAgIGJvZHkyOiBuZXh0VmFyaWFudHMuYm9keTJOZXh0LFxuICAgIGJ1dHRvbjogbmV4dFZhcmlhbnRzLmJ1dHRvbk5leHQsXG4gICAgY2FwdGlvbjogbmV4dFZhcmlhbnRzLmNhcHRpb25OZXh0XG4gIH0gOiB7fSwge1xuICAgIHVzZU5leHRWYXJpYW50czogdXNlTmV4dFZhcmlhbnRzXG4gIH0pLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG52YXIgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbnZhciBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdygpIHtcbiAgcmV0dXJuIFtcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM10sIFwicHggcmdiYSgwLCAwLCAwLCBcIikuY29uY2F0KHNoYWRvd0tleVVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDUgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDYgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDcgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbN10sIFwicHggcmdiYSgwLCAwLCAwLCBcIikuY29uY2F0KHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDggPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzEwXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTFdLCBcInB4IHJnYmEoMCwgMCwgMCwgXCIpLmNvbmNhdChzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSwgXCIpXCIpXS5qb2luKCcsJyk7XG59XG5cbnZhciBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDEsIDMsIDAsIDAsIDEsIDEsIDAsIDAsIDIsIDEsIC0xKSwgY3JlYXRlU2hhZG93KDAsIDEsIDUsIDAsIDAsIDIsIDIsIDAsIDAsIDMsIDEsIC0yKSwgY3JlYXRlU2hhZG93KDAsIDEsIDgsIDAsIDAsIDMsIDQsIDAsIDAsIDMsIDMsIC0yKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG52YXIgX2RlZmF1bHQgPSBzaGFkb3dzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbnZhciBfZGVmYXVsdCA9IHNoYXBlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgc3BhY2luZyA9IHtcbiAgLy8gQWxsIGNvbXBvbmVudHMgYWxpZ24gdG8gYW4gOGRwIHNxdWFyZSBiYXNlbGluZSBncmlkIGZvciBtb2JpbGUsIHRhYmxldCwgYW5kIGRlc2t0b3AuXG4gIC8vIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sI3BpeGVsLWRlbnNpdHlcbiAgdW5pdDogOFxufTtcbnZhciBfZGVmYXVsdCA9IHNwYWNpbmc7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmlzTnVtYmVyID0gZXhwb3J0cy5pc1N0cmluZyA9IGV4cG9ydHMuZm9ybWF0TXMgPSBleHBvcnRzLmR1cmF0aW9uID0gZXhwb3J0cy5lYXNpbmcgPSB2b2lkIDA7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxudmFyIGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuXG5leHBvcnRzLmVhc2luZyA9IGVhc2luZztcbnZhciBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmV4cG9ydHMuZHVyYXRpb24gPSBkdXJhdGlvbjtcblxudmFyIGZvcm1hdE1zID0gZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyksIFwibXNcIik7XG59O1xuXG5leHBvcnRzLmZvcm1hdE1zID0gZm9ybWF0TXM7XG5cbnZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG52YXIgaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0ucHJvcFxuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmR1cmF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0uZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZGVsYXlcbiAqL1xuXG5cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcbnZhciBfZGVmYXVsdCA9IHtcbiAgZWFzaW5nOiBlYXNpbmcsXG4gIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbJ2FsbCddO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgICBkdXJhdGlvbk9wdGlvbiA9IF9vcHRpb25zJGR1cmF0aW9uID09PSB2b2lkIDAgPyBkdXJhdGlvbi5zdGFuZGFyZCA6IF9vcHRpb25zJGR1cmF0aW9uLFxuICAgICAgICBfb3B0aW9ucyRlYXNpbmcgPSBvcHRpb25zLmVhc2luZyxcbiAgICAgICAgZWFzaW5nT3B0aW9uID0gX29wdGlvbnMkZWFzaW5nID09PSB2b2lkIDAgPyBlYXNpbmcuZWFzZUluT3V0IDogX29wdGlvbnMkZWFzaW5nLFxuICAgICAgICBfb3B0aW9ucyRkZWxheSA9IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGRlbGF5ID0gX29wdGlvbnMkZGVsYXkgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRkZWxheSxcbiAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShvcHRpb25zLCBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaXNTdHJpbmcocHJvcHMpIHx8IEFycmF5LmlzQXJyYXkocHJvcHMpLCAnTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpc051bWJlcihkdXJhdGlvbk9wdGlvbikgfHwgaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pLCBcIk1hdGVyaWFsLVVJOiBhcmd1bWVudCBcXFwiZHVyYXRpb25cXFwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kIFwiLmNvbmNhdChkdXJhdGlvbk9wdGlvbiwgXCIuXCIpKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSwgJ01hdGVyaWFsLVVJOiBhcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGlzTnVtYmVyKGRlbGF5KSB8fCBpc1N0cmluZyhkZWxheSksICdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggPT09IDAsIFwiTWF0ZXJpYWwtVUk6IHVucmVjb2duaXplZCBhcmd1bWVudChzKSBbXCIuY29uY2F0KE9iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyksIFwiXVwiKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGZ1bmN0aW9uIChhbmltYXRlZFByb3ApIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChhbmltYXRlZFByb3AsIFwiIFwiKS5jb25jYXQodHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pLCBcIiBcIikuY29uY2F0KGVhc2luZ09wdGlvbiwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSkpO1xuICAgIH0pLmpvaW4oJywnKTtcbiAgfSxcbiAgZ2V0QXV0b0hlaWdodER1cmF0aW9uOiBmdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gICAgaWYgKCFoZWlnaHQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBjb25zdGFudCA9IGhlaWdodCAvIDM2OyAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcblxuICAgIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBNYXRoLnBvdyhjb25zdGFudCwgMC4yNSkgKyBjb25zdGFudCAvIDUpICogMTApO1xuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbnZhciB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG52YXIgX2RlZmF1bHQgPSB6SW5kZXg7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkNIQU5ORUwgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbi8vIFNhbWUgdmFsdWUgdXNlZCBieSByZWFjdC1qc3NcbnZhciBDSEFOTkVMID0gJ19fVEhFTUlOR19fJztcbmV4cG9ydHMuQ0hBTk5FTCA9IENIQU5ORUw7XG52YXIgdGhlbWVMaXN0ZW5lciA9IHtcbiAgY29udGV4dFR5cGVzOiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgQ0hBTk5FTCwgZnVuY3Rpb24gKCkge30pLFxuICBpbml0aWFsOiBmdW5jdGlvbiBpbml0aWFsKGNvbnRleHQpIHtcbiAgICBpZiAoIWNvbnRleHRbQ0hBTk5FTF0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZXh0W0NIQU5ORUxdLmdldFN0YXRlKCk7XG4gIH0sXG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGNvbnRleHQsIGNiKSB7XG4gICAgaWYgKCFjb250ZXh0W0NIQU5ORUxdKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGV4dFtDSEFOTkVMXS5zdWJzY3JpYmUoY2IpO1xuICB9LFxuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoY29udGV4dCwgc3Vic2NyaXB0aW9uSWQpIHtcbiAgICBpZiAoY29udGV4dFtDSEFOTkVMXSkge1xuICAgICAgY29udGV4dFtDSEFOTkVMXS51bnN1YnNjcmliZShzdWJzY3JpcHRpb25JZCk7XG4gICAgfVxuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gdGhlbWVMaXN0ZW5lcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbnZhciBlc2NhcGVSZWdleCA9IC8oW1tcXF0uIyokPjwrfj18XjooKSxcIidgXFxzXSkvZztcblxuZnVuY3Rpb24gc2FmZVByZWZpeChjbGFzc05hbWVQcmVmaXgpIHtcbiAgdmFyIHByZWZpeCA9IFN0cmluZyhjbGFzc05hbWVQcmVmaXgpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkocHJlZml4Lmxlbmd0aCA8IDI1NiwgXCJNYXRlcmlhbC1VSTogdGhlIGNsYXNzIG5hbWUgcHJlZml4IGlzIHRvbyBsb25nOiBcIi5jb25jYXQocHJlZml4LCBcIi5cIikpIDogdm9pZCAwOyAvLyBTYW5pdGl6ZSB0aGUgc3RyaW5nIGFzIHdpbGwgYmUgdXNlZCB0byBwcmVmaXggdGhlIGdlbmVyYXRlZCBjbGFzcyBuYW1lLlxuXG4gIHJldHVybiBwcmVmaXgucmVwbGFjZShlc2NhcGVSZWdleCwgJy0nKTtcbn0gLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4vLyBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0LlxuLy8gV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbi8vXG4vLyBJdCdzIGluc3BpcmVkIGJ5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvYmxvYi80ZTZhMDVkZDNmN2I2NTcyZmRkM2FiMjE2ODYxZDllNDQ2YzIwMzMxL3NyYy91dGlscy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qc1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBfb3B0aW9ucyRkYW5nZXJvdXNseVUgPSBvcHRpb25zLmRhbmdlcm91c2x5VXNlR2xvYmFsQ1NTLFxuICAgICAgZGFuZ2Vyb3VzbHlVc2VHbG9iYWxDU1MgPSBfb3B0aW9ucyRkYW5nZXJvdXNseVUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZGFuZ2Vyb3VzbHlVLFxuICAgICAgX29wdGlvbnMkcHJvZHVjdGlvblByID0gb3B0aW9ucy5wcm9kdWN0aW9uUHJlZml4LFxuICAgICAgcHJvZHVjdGlvblByZWZpeCA9IF9vcHRpb25zJHByb2R1Y3Rpb25QciA9PT0gdm9pZCAwID8gJ2pzcycgOiBfb3B0aW9ucyRwcm9kdWN0aW9uUHIsXG4gICAgICBfb3B0aW9ucyRzZWVkID0gb3B0aW9ucy5zZWVkLFxuICAgICAgc2VlZCA9IF9vcHRpb25zJHNlZWQgPT09IHZvaWQgMCA/ICcnIDogX29wdGlvbnMkc2VlZDtcbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkocnVsZUNvdW50ZXIgPCAxZTEwLCBbJ01hdGVyaWFsLVVJOiB5b3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgcnVsZUNvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJycpKSA6IHZvaWQgMDtcblxuICAgIGlmIChkYW5nZXJvdXNseVVzZUdsb2JhbENTUyAmJiBzdHlsZVNoZWV0ICYmIHN0eWxlU2hlZXQub3B0aW9ucy5uYW1lKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoc2FmZVByZWZpeChzdHlsZVNoZWV0Lm9wdGlvbnMubmFtZSksIFwiLVwiKS5jb25jYXQocnVsZS5rZXkpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJvZHVjdGlvblByZWZpeCkuY29uY2F0KHNlZWQpLmNvbmNhdChydWxlQ291bnRlcik7XG4gICAgfSAvLyBIZWxwIHdpdGggZGVidWdnYWJpbGl0eS5cblxuXG4gICAgaWYgKHN0eWxlU2hlZXQgJiYgc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNhZmVQcmVmaXgoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCksIFwiLVwiKS5jb25jYXQocnVsZS5rZXksIFwiLVwiKS5jb25jYXQoc2VlZCkuY29uY2F0KHJ1bGVDb3VudGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIi5jb25jYXQocnVsZS5rZXksIFwiLVwiKS5jb25jYXQoc2VlZCkuY29uY2F0KHJ1bGVDb3VudGVyKTtcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3R5cGVvZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2RlZXBtZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXBtZXJnZVwiKSk7XG5cbi8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG4vLyBTdXBwb3J0IGZvciB0aGUganNzLWV4cGFuZCBwbHVnaW4uXG5mdW5jdGlvbiBhcnJheU1lcmdlKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgcmV0dXJuIHNvdXJjZTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIHRoZW1pbmdFbmFibGVkID0gdHlwZW9mIHN0eWxlc09yQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJztcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKCgwLCBfdHlwZW9mMi5kZWZhdWx0KShzdHlsZXNPckNyZWF0b3IpID09PSAnb2JqZWN0JyB8fCB0aGVtaW5nRW5hYmxlZCwgWydNYXRlcmlhbC1VSTogdGhlIGZpcnN0IGFyZ3VtZW50IHByb3ZpZGVkIHRvIHdpdGhTdHlsZXMoKSBpcyBpbnZhbGlkLicsICdZb3UgbmVlZCB0byBwcm92aWRlIGEgZnVuY3Rpb24gZ2VuZXJhdGluZyB0aGUgc3R5bGVzIG9yIGEgc3R5bGVzIG9iamVjdC4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlKHRoZW1lLCBuYW1lKSB7XG4gICAgdmFyIHN0eWxlcyA9IHRoZW1pbmdFbmFibGVkID8gc3R5bGVzT3JDcmVhdG9yKHRoZW1lKSA6IHN0eWxlc09yQ3JlYXRvcjtcblxuICAgIGlmICghbmFtZSB8fCAhdGhlbWUub3ZlcnJpZGVzIHx8ICF0aGVtZS5vdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfVxuXG4gICAgdmFyIG92ZXJyaWRlcyA9IHRoZW1lLm92ZXJyaWRlc1tuYW1lXTtcbiAgICB2YXIgc3R5bGVzV2l0aE92ZXJyaWRlcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHN0eWxlcyk7XG4gICAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0sIFsnTWF0ZXJpYWwtVUk6IHlvdSBhcmUgdHJ5aW5nIHRvIG92ZXJyaWRlIGEgc3R5bGUgdGhhdCBkb2VzIG5vdCBleGlzdC4nLCBcIkZpeCB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBrZXkgb2YgYHRoZW1lLm92ZXJyaWRlcy5cIikuY29uY2F0KG5hbWUsIFwiYC5cIildLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgIHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSA9ICgwLCBfZGVlcG1lcmdlLmRlZmF1bHQpKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgb3ZlcnJpZGVzW2tleV0sIHtcbiAgICAgICAgYXJyYXlNZXJnZTogYXJyYXlNZXJnZVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0eWxlc1dpdGhPdmVycmlkZXM7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNyZWF0ZTogY3JlYXRlLFxuICAgIG9wdGlvbnM6IHt9LFxuICAgIHRoZW1pbmdFbmFibGVkOiB0aGVtaW5nRW5hYmxlZFxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBnZXRTdHlsZXNDcmVhdG9yO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5mdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICB2YXIgdGhlbWUgPSBwYXJhbXMudGhlbWUsXG4gICAgICBuYW1lID0gcGFyYW1zLm5hbWUsXG4gICAgICBwcm9wcyA9IHBhcmFtcy5wcm9wcztcblxuICBpZiAoIXRoZW1lLnByb3BzIHx8ICFuYW1lIHx8ICF0aGVtZS5wcm9wc1tuYW1lXSkge1xuICAgIHJldHVybiBwcm9wcztcbiAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMsIGNvZGUgYm9ycm93IGZyb20gUmVhY3Qgc291cmNlLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8xNWE4ZjAzMTgzOGE1NTNlNDFjMGI2NmViMWJjZjFkYTg0NDgxMDRkL3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdEVsZW1lbnQuanMjTDIyMVxuXG5cbiAgdmFyIGRlZmF1bHRQcm9wcyA9IHRoZW1lLnByb3BzW25hbWVdO1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufVxuXG52YXIgX2RlZmF1bHQgPSBnZXRUaGVtZVByb3BzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgZWxldmF0aW9ucyA9IHt9O1xuICB0aGVtZS5zaGFkb3dzLmZvckVhY2goZnVuY3Rpb24gKHNoYWRvdywgaW5kZXgpIHtcbiAgICBlbGV2YXRpb25zW1wiZWxldmF0aW9uXCIuY29uY2F0KGluZGV4KV0gPSB7XG4gICAgICBib3hTaGFkb3c6IHNoYWRvd1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzcXVhcmU9e2ZhbHNlfWAuICovXG4gICAgcm91bmRlZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9XG4gIH0sIGVsZXZhdGlvbnMpO1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFBhcGVyKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBzcXVhcmUgPSBwcm9wcy5zcXVhcmUsXG4gICAgICBlbGV2YXRpb24gPSBwcm9wcy5lbGV2YXRpb24sXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwic3F1YXJlXCIsIFwiZWxldmF0aW9uXCJdKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGVsZXZhdGlvbiA+PSAwICYmIGVsZXZhdGlvbiA8IDI1LCBcIk1hdGVyaWFsLVVJOiB0aGlzIGVsZXZhdGlvbiBgXCIuY29uY2F0KGVsZXZhdGlvbiwgXCJgIGlzIG5vdCBpbXBsZW1lbnRlZC5cIikpIDogdm9pZCAwO1xuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcImVsZXZhdGlvblwiLmNvbmNhdChlbGV2YXRpb24pXSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMucm91bmRlZCwgIXNxdWFyZSksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSk7XG59XG5cblBhcGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCdzIGFjY2VwdGluZyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqL1xuICBlbGV2YXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICovXG4gIHNxdWFyZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcblBhcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgZWxldmF0aW9uOiAyLFxuICBzcXVhcmU6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQYXBlcidcbn0pKFBhcGVyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF9jaGFpblByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2NoYWluUHJvcFR5cGVzXCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZGlzcGxheTRcImAuICovXG4gICAgZGlzcGxheTQ6IHRoZW1lLnR5cG9ncmFwaHkuZGlzcGxheTQsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZGlzcGxheTNcImAuICovXG4gICAgZGlzcGxheTM6IHRoZW1lLnR5cG9ncmFwaHkuZGlzcGxheTMsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZGlzcGxheTJcImAuICovXG4gICAgZGlzcGxheTI6IHRoZW1lLnR5cG9ncmFwaHkuZGlzcGxheTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZGlzcGxheTFcImAuICovXG4gICAgZGlzcGxheTE6IHRoZW1lLnR5cG9ncmFwaHkuZGlzcGxheTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaGVhZGxpbmVcImAuICovXG4gICAgaGVhZGxpbmU6IHRoZW1lLnR5cG9ncmFwaHkuaGVhZGxpbmUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGl0bGVcImAuICovXG4gICAgdGl0bGU6IHRoZW1lLnR5cG9ncmFwaHkudGl0bGUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3ViaGVhZGluZ1wiYC4gKi9cbiAgICBzdWJoZWFkaW5nOiB0aGVtZS50eXBvZ3JhcGh5LnN1YmhlYWRpbmcsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTJcImAuICovXG4gICAgYm9keTI6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTFcImAuICovXG4gICAgYm9keTE6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY2FwdGlvblwiYC4gKi9cbiAgICBjYXB0aW9uOiB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYnV0dG9uXCJgLiAqL1xuICAgIGJ1dHRvbjogdGhlbWUudHlwb2dyYXBoeS5idXR0b24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDFcImAuICovXG4gICAgaDE6IHRoZW1lLnR5cG9ncmFwaHkuaDEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDJcImAuICovXG4gICAgaDI6IHRoZW1lLnR5cG9ncmFwaHkuaDIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDNcImAuICovXG4gICAgaDM6IHRoZW1lLnR5cG9ncmFwaHkuaDMsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDRcImAuICovXG4gICAgaDQ6IHRoZW1lLnR5cG9ncmFwaHkuaDQsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDVcImAuICovXG4gICAgaDU6IHRoZW1lLnR5cG9ncmFwaHkuaDUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDZcImAuICovXG4gICAgaDY6IHRoZW1lLnR5cG9ncmFwaHkuaDYsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUxXCJgLiAqL1xuICAgIHN1YnRpdGxlMTogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUyXCJgLiAqL1xuICAgIHN1YnRpdGxlMjogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3ZlcmxpbmVcImAuICovXG4gICAgb3ZlcmxpbmU6IHRoZW1lLnR5cG9ncmFwaHkub3ZlcmxpbmUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3JPbmx5XCJgLiBPbmx5IGFjY2Vzc2libGUgdG8gc2NyZWVuIHJlYWRlcnMuICovXG4gICAgc3JPbmx5OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIHdpZHRoOiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibGVmdFwiYC4gKi9cbiAgICBhbGlnbkxlZnQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwiY2VudGVyXCJgLiAqL1xuICAgIGFsaWduQ2VudGVyOiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwicmlnaHRcImAuICovXG4gICAgYWxpZ25SaWdodDoge1xuICAgICAgdGV4dEFsaWduOiAncmlnaHQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwianVzdGlmeVwiYC4gKi9cbiAgICBhbGlnbkp1c3RpZnk6IHtcbiAgICAgIHRleHRBbGlnbjogJ2p1c3RpZnknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibm93cmFwXCJgLiAqL1xuICAgIG5vV3JhcDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZ3V0dGVyQm90dG9tPXt0cnVlfWAuICovXG4gICAgZ3V0dGVyQm90dG9tOiB7XG4gICAgICBtYXJnaW5Cb3R0b206ICcwLjM1ZW0nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhcmFncmFwaD17dHJ1ZX1gLiAqL1xuICAgIHBhcmFncmFwaDoge1xuICAgICAgbWFyZ2luQm90dG9tOiAxNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG52YXIgbmV4dFZhcmlhbnRzID0ge1xuICBkaXNwbGF5NDogJ2gxJyxcbiAgZGlzcGxheTM6ICdoMicsXG4gIGRpc3BsYXkyOiAnaDMnLFxuICBkaXNwbGF5MTogJ2g0JyxcbiAgaGVhZGxpbmU6ICdoNScsXG4gIHRpdGxlOiAnaDYnLFxuICBzdWJoZWFkaW5nOiAnc3VidGl0bGUxJ1xufTtcblxuZnVuY3Rpb24gZ2V0VmFyaWFudCh0aGVtZSwgdmFyaWFudFByb3ApIHtcbiAgdmFyIHR5cG9ncmFwaHkgPSB0aGVtZS50eXBvZ3JhcGh5O1xuICB2YXIgdmFyaWFudCA9IHZhcmlhbnRQcm9wO1xuXG4gIGlmICghdmFyaWFudCkge1xuICAgIHZhcmlhbnQgPSB0eXBvZ3JhcGh5LnVzZU5leHRWYXJpYW50cyA/ICdib2R5MicgOiAnYm9keTEnO1xuICB9IC8vIGNvbXBsZXRlIHYyIHN3aXRjaFxuXG5cbiAgaWYgKHR5cG9ncmFwaHkudXNlTmV4dFZhcmlhbnRzKSB7XG4gICAgdmFyaWFudCA9IG5leHRWYXJpYW50c1t2YXJpYW50XSB8fCB2YXJpYW50O1xuICB9XG5cbiAgcmV0dXJuIHZhcmlhbnQ7XG59XG5cbnZhciBkZWZhdWx0SGVhZGxpbmVNYXBwaW5nID0ge1xuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBzdWJ0aXRsZTE6ICdoNicsXG4gIHN1YnRpdGxlMjogJ2g2JyxcbiAgYm9keTE6ICdwJyxcbiAgYm9keTI6ICdwJyxcbiAgLy8gZGVwcmVjYXRlZFxuICBkaXNwbGF5NDogJ2gxJyxcbiAgZGlzcGxheTM6ICdoMScsXG4gIGRpc3BsYXkyOiAnaDEnLFxuICBkaXNwbGF5MTogJ2gxJyxcbiAgaGVhZGxpbmU6ICdoMScsXG4gIHRpdGxlOiAnaDInLFxuICBzdWJoZWFkaW5nOiAnaDMnXG59O1xuXG5mdW5jdGlvbiBUeXBvZ3JhcGh5KHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgYWxpZ24gPSBwcm9wcy5hbGlnbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb21wb25lbnRQcm9wID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgZ3V0dGVyQm90dG9tID0gcHJvcHMuZ3V0dGVyQm90dG9tLFxuICAgICAgaGVhZGxpbmVNYXBwaW5nID0gcHJvcHMuaGVhZGxpbmVNYXBwaW5nLFxuICAgICAgaW50ZXJuYWxEZXByZWNhdGVkVmFyaWFudCA9IHByb3BzLmludGVybmFsRGVwcmVjYXRlZFZhcmlhbnQsXG4gICAgICBub1dyYXAgPSBwcm9wcy5ub1dyYXAsXG4gICAgICBwYXJhZ3JhcGggPSBwcm9wcy5wYXJhZ3JhcGgsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgdmFyaWFudFByb3AgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiYWxpZ25cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJoZWFkbGluZU1hcHBpbmdcIiwgXCJpbnRlcm5hbERlcHJlY2F0ZWRWYXJpYW50XCIsIFwibm9XcmFwXCIsIFwicGFyYWdyYXBoXCIsIFwidGhlbWVcIiwgXCJ2YXJpYW50XCJdKTtcbiAgdmFyIHZhcmlhbnQgPSBnZXRWYXJpYW50KHRoZW1lLCB2YXJpYW50UHJvcCk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbdmFyaWFudF0sIHZhcmlhbnQgIT09ICdpbmhlcml0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGNvbG9yKSldLCBjb2xvciAhPT0gJ2RlZmF1bHQnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMubm9XcmFwLCBub1dyYXApLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5ndXR0ZXJCb3R0b20sIGd1dHRlckJvdHRvbSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnBhcmFncmFwaCwgcGFyYWdyYXBoKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJhbGlnblwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoYWxpZ24pKV0sIGFsaWduICE9PSAnaW5oZXJpdCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICB2YXIgQ29tcG9uZW50ID0gY29tcG9uZW50UHJvcCB8fCAocGFyYWdyYXBoID8gJ3AnIDogaGVhZGxpbmVNYXBwaW5nW3ZhcmlhbnRdIHx8IGRlZmF1bHRIZWFkbGluZU1hcHBpbmdbdmFyaWFudF0pIHx8ICdzcGFuJztcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICB9LCBvdGhlcikpO1xufVxuXG5UeXBvZ3JhcGh5LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dC1hbGlnbiBvbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgYWxpZ246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2luaGVyaXQnLCAnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydkZWZhdWx0JywgJ2Vycm9yJywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAndGV4dFByaW1hcnknLCAndGV4dFNlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIGl0IG1hcHMgdGhlIHZhcmlhbnQgdG8gYSBnb29kIGRlZmF1bHQgaGVhZGxpbmUgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBndXR0ZXJCb3R0b206IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXZSBhcmUgZW1waXJpY2FsbHkgbWFwcGluZyB0aGUgdmFyaWFudCBwcm9wZXJ0eSB0byBhIHJhbmdlIG9mIGRpZmZlcmVudCBET00gZWxlbWVudCB0eXBlcy5cbiAgICogRm9yIGluc3RhbmNlLCBzdWJ0aXRsZTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wZXJ0eS5cbiAgICogVGhlIGRlZmF1bHQgbWFwcGluZyBpcyB0aGUgZm9sbG93aW5nOlxuICAgKi9cbiAgaGVhZGxpbmVNYXBwaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBBIGRlcHJlY2F0ZWQgdmFyaWFudCBpcyB1c2VkIGZyb20gYW4gaW50ZXJuYWwgY29tcG9uZW50LiBVc2VycyBkb24ndCBuZWVkXG4gICAqIGEgZGVwcmVjYXRpb24gd2FybmluZyBoZXJlIGlmIHRoZXkgc3dpdGNoZWQgdG8gdGhlIHYyIHRoZW1lLiBUaGV5IGFscmVhZHlcbiAgICogZ2V0IHRoZSBtYXBwaW5nIHRoYXQgd2lsbCBiZSBhcHBsaWVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgaW50ZXJuYWxEZXByZWNhdGVkVmFyaWFudDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBub3Qgd3JhcCwgYnV0IGluc3RlYWQgd2lsbCB0cnVuY2F0ZSB3aXRoIGFuIGVsbGlwc2lzLlxuICAgKi9cbiAgbm9XcmFwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgcGFyYWdyYXBoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgdGhlbWUgdHlwb2dyYXBoeSBzdHlsZXMuXG4gICAqIFVzZSBgYm9keTFgIGFzIHRoZSBkZWZhdWx0IHZhbHVlIHdpdGggdGhlIGxlZ2FjeSBpbXBsZW1lbnRhdGlvbiBhbmQgYGJvZHkyYCB3aXRoIHRoZSBuZXcgb25lLlxuICAgKi9cbiAgdmFyaWFudDogKDAsIF9jaGFpblByb3BUeXBlcy5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2NhcHRpb24nLCAnYnV0dG9uJywgJ292ZXJsaW5lJywgJ3NyT25seScsICdpbmhlcml0JywgLy8gZGVwcmVjYXRlZFxuICAnZGlzcGxheTQnLCAnZGlzcGxheTMnLCAnZGlzcGxheTInLCAnZGlzcGxheTEnLCAnaGVhZGxpbmUnLCAndGl0bGUnLCAnc3ViaGVhZGluZyddKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGRlcHJlY2F0ZWRWYXJpYW50cyA9IFsnZGlzcGxheTQnLCAnZGlzcGxheTMnLCAnZGlzcGxheTInLCAnZGlzcGxheTEnLCAnaGVhZGxpbmUnLCAndGl0bGUnLCAnc3ViaGVhZGluZyddO1xuXG4gICAgaWYgKHByb3BzLnRoZW1lLnR5cG9ncmFwaHkudXNlTmV4dFZhcmlhbnRzICYmICFwcm9wcy5pbnRlcm5hbERlcHJlY2F0ZWRWYXJpYW50ICYmIGRlcHJlY2F0ZWRWYXJpYW50cy5pbmRleE9mKHByb3BzLnZhcmlhbnQpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignWW91IGFyZSB1c2luZyBhIGRlcHJlY2F0ZWQgdHlwb2dyYXBoeSB2YXJpYW50OiAnICsgXCJgXCIuY29uY2F0KHByb3BzLnZhcmlhbnQsIFwiYCB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlwiKSArICdcXG5QbGVhc2UgcmVhZCB0aGUgbWlncmF0aW9uIGd1aWRlIHVuZGVyIGh0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3N0eWxlL3R5cG9ncmFwaHkjbWlncmF0aW9uLXRvLXR5cG9ncmFwaHktdjInKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSlcbn0gOiB7fTtcblR5cG9ncmFwaHkuZGVmYXVsdFByb3BzID0ge1xuICBhbGlnbjogJ2luaGVyaXQnLFxuICBjb2xvcjogJ2RlZmF1bHQnLFxuICBndXR0ZXJCb3R0b206IGZhbHNlLFxuICBoZWFkbGluZU1hcHBpbmc6IGRlZmF1bHRIZWFkbGluZU1hcHBpbmcsXG4gIG5vV3JhcDogZmFsc2UsXG4gIHBhcmFncmFwaDogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVR5cG9ncmFwaHknLFxuICB3aXRoVGhlbWU6IHRydWVcbn0pKFR5cG9ncmFwaHkpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfY29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoXCIuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvclwiKTtcblxudmFyIF9CdXR0b25CYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQnV0dG9uQmFzZVwiKSk7XG5cbnZhciBfY2hhaW5Qcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9jaGFpblByb3BUeXBlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IEJ1dHRvbkJhc2VcbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1pbldpZHRoOiA2NCxcbiAgICAgIG1pbkhlaWdodDogMzYsXG4gICAgICBwYWRkaW5nOiAnOHB4IDE2cHgnLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnLCAnYm9yZGVyJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzcGFuIGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgY2hpbGRyZW4uICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBhc3N1cmUgdGhlIGNvcnJlY3Qgd2lkdGggZm9yIGlPUyBTYWZhcmlcbiAgICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAuICovXG4gICAgdGV4dDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGV4dFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICB0ZXh0UHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICB0ZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBsZWdhY3kgdmFyaWFudCBuYW1pbmcuICovXG4gICAgZmxhdDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGxlZ2FjeSB2YXJpYW50IG5hbWluZy4gKi9cbiAgICBmbGF0UHJpbWFyeToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGxlZ2FjeSB2YXJpYW50IG5hbWluZy4gKi9cbiAgICBmbGF0U2Vjb25kYXJ5OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgb3V0bGluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCgoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuNSkpLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluKSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgb3V0bGluZWRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNSkpLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4pLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJbY29udGFpbmVkIHwgZmFiXVwiYC4gKi9cbiAgICBjb250YWluZWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzJdLFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s4XVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1swXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgIH0sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXkuQTEwMCxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF1cbiAgICAgICAgfSxcbiAgICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiW2NvbnRhaW5lZCB8IGZhYl1cImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29udGFpbmVkUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIltjb250YWluZWQgfCBmYWJdXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29udGFpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggbGVnYWN5IHZhcmlhbnQgbmFtaW5nLiAqL1xuICAgIHJhaXNlZDoge30sXG4gICAgLy8gbGVnYWN5XG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGxlZ2FjeSB2YXJpYW50IG5hbWluZy4gKi9cbiAgICByYWlzZWRQcmltYXJ5OiB7fSxcbiAgICAvLyBsZWdhY3lcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggbGVnYWN5IHZhcmlhbnQgbmFtaW5nLiAqL1xuICAgIHJhaXNlZFNlY29uZGFyeToge30sXG4gICAgLy8gbGVnYWN5XG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiW2ZhYiB8IGV4dGVuZGVkRmFiXVwiYC4gKi9cbiAgICBmYWI6IHtcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbWluV2lkdGg6IDAsXG4gICAgICB3aWR0aDogNTYsXG4gICAgICBoZWlnaHQ6IDU2LFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzZdLFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMTJdXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJleHRlbmRlZEZhYlwiYC4gKi9cbiAgICBleHRlbmRlZEZhYjoge1xuICAgICAgYm9yZGVyUmFkaXVzOiA0OCAvIDIsXG4gICAgICBwYWRkaW5nOiAnMCAxNnB4JyxcbiAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICBtaW5XaWR0aDogNDgsXG4gICAgICBoZWlnaHQ6IDQ4XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYnV0dG9uIGlzIGtleWJvYXJkIGZvY3VzZWQuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtaW5pPXt0cnVlfWAgJiBgdmFyaWFudD1cIltmYWIgfCBleHRlbmRlZEZhYl1cImAuICovXG4gICAgbWluaToge1xuICAgICAgd2lkdGg6IDQwLFxuICAgICAgaGVpZ2h0OiA0MFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAuICovXG4gICAgc2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnN3B4IDhweCcsXG4gICAgICBtaW5XaWR0aDogNjQsXG4gICAgICBtaW5IZWlnaHQ6IDMyLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIHNpemVMYXJnZToge1xuICAgICAgcGFkZGluZzogJzhweCAyNHB4JyxcbiAgICAgIG1pbldpZHRoOiAxMTIsXG4gICAgICBtaW5IZWlnaHQ6IDQwLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAuICovXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEJ1dHRvbihwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IHByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIG1pbmkgPSBwcm9wcy5taW5pLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJmdWxsV2lkdGhcIiwgXCJtaW5pXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIl0pO1xuICB2YXIgZmFiID0gdmFyaWFudCA9PT0gJ2ZhYicgfHwgdmFyaWFudCA9PT0gJ2V4dGVuZGVkRmFiJztcbiAgdmFyIGNvbnRhaW5lZCA9IHZhcmlhbnQgPT09ICdjb250YWluZWQnIHx8IHZhcmlhbnQgPT09ICdyYWlzZWQnO1xuICB2YXIgdGV4dCA9IHZhcmlhbnQgPT09ICd0ZXh0JyB8fCB2YXJpYW50ID09PSAnZmxhdCc7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZmFiLCBmYWIpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5taW5pLCBmYWIgJiYgbWluaSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmV4dGVuZGVkRmFiLCB2YXJpYW50ID09PSAnZXh0ZW5kZWRGYWInKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMudGV4dCwgdGV4dCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnRleHRQcmltYXJ5LCB0ZXh0ICYmIGNvbG9yID09PSAncHJpbWFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy50ZXh0U2Vjb25kYXJ5LCB0ZXh0ICYmIGNvbG9yID09PSAnc2Vjb25kYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZsYXQsIHZhcmlhbnQgPT09ICd0ZXh0JyB8fCB2YXJpYW50ID09PSAnZmxhdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mbGF0UHJpbWFyeSwgKHZhcmlhbnQgPT09ICd0ZXh0JyB8fCB2YXJpYW50ID09PSAnZmxhdCcpICYmIGNvbG9yID09PSAncHJpbWFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mbGF0U2Vjb25kYXJ5LCAodmFyaWFudCA9PT0gJ3RleHQnIHx8IHZhcmlhbnQgPT09ICdmbGF0JykgJiYgY29sb3IgPT09ICdzZWNvbmRhcnknKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuY29udGFpbmVkLCBjb250YWluZWQgfHwgZmFiKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuY29udGFpbmVkUHJpbWFyeSwgKGNvbnRhaW5lZCB8fCBmYWIpICYmIGNvbG9yID09PSAncHJpbWFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5jb250YWluZWRTZWNvbmRhcnksIChjb250YWluZWQgfHwgZmFiKSAmJiBjb2xvciA9PT0gJ3NlY29uZGFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yYWlzZWQsIGNvbnRhaW5lZCB8fCBmYWIpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yYWlzZWRQcmltYXJ5LCAoY29udGFpbmVkIHx8IGZhYikgJiYgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnJhaXNlZFNlY29uZGFyeSwgKGNvbnRhaW5lZCB8fCBmYWIpICYmIGNvbG9yID09PSAnc2Vjb25kYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLm91dGxpbmVkLCB2YXJpYW50ID09PSAnb3V0bGluZWQnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMub3V0bGluZWRQcmltYXJ5LCB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIGNvbG9yID09PSAncHJpbWFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5vdXRsaW5lZFNlY29uZGFyeSwgdmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBjb2xvciA9PT0gJ3NlY29uZGFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcInNpemVcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKHNpemUpKV0sIHNpemUgIT09ICdtZWRpdW0nKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZnVsbFdpZHRoLCBmdWxsV2lkdGgpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5jb2xvckluaGVyaXQsIGNvbG9yID09PSAnaW5oZXJpdCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uQmFzZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZm9jdXNSaXBwbGU6ICFkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gIH0sIGNoaWxkcmVuKSk7XG59XG5cbkJ1dHRvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICogYGRpc2FibGVSaXBwbGVgIG11c3QgYWxzbyBiZSB0cnVlLlxuICAgKi9cbiAgZGlzYWJsZUZvY3VzUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIFVSTCB0byBsaW5rIHRvIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKiBJZiBkZWZpbmVkLCBhbiBgYWAgZWxlbWVudCB3aWxsIGJlIHVzZWQgYXMgdGhlIHJvb3Qgbm9kZS5cbiAgICovXG4gIGhyZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYW5kIGB2YXJpYW50YCBpcyBgJ2ZhYidgLCB3aWxsIHVzZSBtaW5pIGZsb2F0aW5nIGFjdGlvbiBidXR0b24gc3R5bGluZy5cbiAgICovXG4gIG1pbmk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIF9fV0FSTklOR19fOiBgZmxhdGAgYW5kIGByYWlzZWRgIGFyZSBkZXByZWNhdGVkLlxuICAgKiBJbnN0ZWFkIHVzZSBgdGV4dGAgYW5kIGBjb250YWluZWRgIHJlc3BlY3RpdmVseS5cbiAgICogYGZhYmAgYW5kIGBleHRlbmRlZEZhYmAgYXJlIGRlcHJlY2F0ZWQuXG4gICAqIEluc3RlYWQgdXNlIGA8RmFiPmAgYW5kIGA8RmFiIHZhcmlhbnQ9XCJleHRlbmRlZFwiPmBcbiAgICovXG4gIHZhcmlhbnQ6ICgwLCBfY2hhaW5Qcm9wVHlwZXMuZGVmYXVsdCkoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsndGV4dCcsICdvdXRsaW5lZCcsICdjb250YWluZWQnLCAnZmFiJywgJ2V4dGVuZGVkRmFiJywgJ2ZsYXQnLCAncmFpc2VkJ10pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBpZiAocHJvcHMudmFyaWFudCA9PT0gJ2ZsYXQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdUaGUgYGZsYXRgIHZhcmlhbnQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuICcgKyAnYHRleHRgIGlzIGVxdWl2YWxlbnQgYW5kIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLnZhcmlhbnQgPT09ICdyYWlzZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdUaGUgYHJhaXNlZGAgdmFyaWFudCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gJyArICdgY29udGFpbmVkYCBpcyBlcXVpdmFsZW50IGFuZCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy52YXJpYW50ID09PSAnZmFiJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignVGhlIGBmYWJgIHZhcmlhbnQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuICcgKyAnVGhlIGA8RmFiPmAgY29tcG9uZW50IGlzIGVxdWl2YWxlbnQgYW5kIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLnZhcmlhbnQgPT09ICdleHRlbmRlZEZhYicpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1RoZSBgZmFiYCB2YXJpYW50IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiAnICsgJ1RoZSBgPEZhYj5gIGNvbXBvbmVudCB3aXRoIGB2YXJpYW50PVwiZXh0ZW5kZWRcImAgaXMgZXF1aXZhbGVudCAnICsgJ2FuZCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KVxufSA6IHt9O1xuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3I6ICdkZWZhdWx0JyxcbiAgY29tcG9uZW50OiAnYnV0dG9uJyxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBkaXNhYmxlRm9jdXNSaXBwbGU6IGZhbHNlLFxuICBmdWxsV2lkdGg6IGZhbHNlLFxuICBtaW5pOiBmYWxzZSxcbiAgc2l6ZTogJ21lZGl1bScsXG4gIHR5cGU6ICdidXR0b24nLFxuICB2YXJpYW50OiAndGV4dCdcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJ1dHRvbidcbn0pKEJ1dHRvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0J1dHRvbkJhc2UuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQnV0dG9uQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQnV0dG9uQmFzZVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfa2V5Y29kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImtleWNvZGVcIikpO1xuXG52YXIgX293bmVyV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvb3duZXJXaW5kb3dcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfTm9Tc3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Ob1NzclwiKSk7XG5cbnZhciBfZm9jdXNWaXNpYmxlID0gcmVxdWlyZShcIi4vZm9jdXNWaXNpYmxlXCIpO1xuXG52YXIgX1RvdWNoUmlwcGxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ub3VjaFJpcHBsZVwiKSk7XG5cbnZhciBfY3JlYXRlUmlwcGxlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlUmlwcGxlSGFuZGxlclwiKSk7XG5cbnZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJvcmRlcjogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIC8vIFNvIHdlIHRha2UgcHJlY2VkZW50IG92ZXIgdGhlIHN0eWxlIG9mIGEgbmF0aXZlIDxhIC8+IGVsZW1lbnQuXG4gICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICAgIGJvcmRlclN0eWxlOiAnbm9uZScgLy8gUmVtb3ZlIEZpcmVmb3ggZG90dGVkIG91dGxpbmUuXG5cbiAgICB9LFxuICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICB9XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgZGlzYWJsZWQ6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgZm9jdXNWaXNpYmxlOiB7fVxufTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIV9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogcmVhY3RAMTYuMy4wIG9yIGdyZWF0ZXIgaXMgcmVxdWlyZWQuJyk7XG59XG4vKipcbiAqIGBCdXR0b25CYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYSBidXR0b24uXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgZm9jdXMvcmlwcGxlIGxvZ2ljLlxuICovXG5cblxudmFyIEJ1dHRvbkJhc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoQnV0dG9uQmFzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uQmFzZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIEJ1dHRvbkJhc2UpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9ICgwLCBfZ2V0UHJvdG90eXBlT2YzLmRlZmF1bHQpKEJ1dHRvbkJhc2UpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgIF90aGlzLmtleURvd24gPSBmYWxzZTtcbiAgICBfdGhpcy5mb2N1c1Zpc2libGVDaGVja1RpbWUgPSA1MDtcbiAgICBfdGhpcy5mb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzID0gNTtcbiAgICBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCAnTW91c2VEb3duJywgJ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmZvY3VzVmlzaWJsZVRpbWVvdXQpO1xuXG4gICAgICBpZiAoX3RoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBmb2N1c1Zpc2libGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLmhhbmRsZU1vdXNlVXAgPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCAnTW91c2VVcCcsICdzdG9wJyk7XG4gICAgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksICdNb3VzZUxlYXZlJywgJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gKDAsIF9jcmVhdGVSaXBwbGVIYW5kbGVyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgJ1RvdWNoU3RhcnQnLCAnc3RhcnQnKTtcbiAgICBfdGhpcy5oYW5kbGVUb3VjaEVuZCA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksICdUb3VjaEVuZCcsICdzdG9wJyk7XG4gICAgX3RoaXMuaGFuZGxlVG91Y2hNb3ZlID0gKDAsIF9jcmVhdGVSaXBwbGVIYW5kbGVyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgJ1RvdWNoTW92ZScsICdzdG9wJyk7XG4gICAgX3RoaXMuaGFuZGxlQmx1ciA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksICdCbHVyJywgJ3N0b3AnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuZm9jdXNWaXNpYmxlVGltZW91dCk7XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGZvY3VzVmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfdGhpcy5vblJpcHBsZVJlZiA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5yaXBwbGUgPSBub2RlO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkZvY3VzVmlzaWJsZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLmtleURvd24gPSBmYWxzZTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c1Zpc2libGU6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgZm9jdXNSaXBwbGUgPSBfdGhpcyRwcm9wcy5mb2N1c1JpcHBsZSxcbiAgICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wcy5vbktleURvd24sXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2s7XG4gICAgICB2YXIga2V5ID0gKDAsIF9rZXljb2RlLmRlZmF1bHQpKGV2ZW50KTsgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcblxuICAgICAgaWYgKGZvY3VzUmlwcGxlICYmICFfdGhpcy5rZXlEb3duICYmIF90aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSAmJiBfdGhpcy5yaXBwbGUgJiYga2V5ID09PSAnc3BhY2UnKSB7XG4gICAgICAgIF90aGlzLmtleURvd24gPSB0cnVlO1xuICAgICAgICBldmVudC5wZXJzaXN0KCk7XG5cbiAgICAgICAgX3RoaXMucmlwcGxlLnN0b3AoZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5yaXBwbGUuc3RhcnQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgICBvbktleURvd24oZXZlbnQpO1xuICAgICAgfSAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcblxuXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmIChrZXkgPT09ICdzcGFjZScgfHwga2V5ID09PSAnZW50ZXInKSAmJiAhKF90aGlzLmJ1dHRvbi50YWdOYW1lID09PSAnQScgJiYgX3RoaXMuYnV0dG9uLmhyZWYpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmZvY3VzUmlwcGxlICYmICgwLCBfa2V5Y29kZS5kZWZhdWx0KShldmVudCkgPT09ICdzcGFjZScgJiYgX3RoaXMucmlwcGxlICYmIF90aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSkge1xuICAgICAgICBfdGhpcy5rZXlEb3duID0gZmFsc2U7XG4gICAgICAgIGV2ZW50LnBlcnNpc3QoKTtcblxuICAgICAgICBfdGhpcy5yaXBwbGUuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnJpcHBsZS5wdWxzYXRlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbktleVVwKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uS2V5VXAoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcblxuXG4gICAgICBpZiAoIV90aGlzLmJ1dHRvbikge1xuICAgICAgICBfdGhpcy5idXR0b24gPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgfVxuXG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICAoMCwgX2ZvY3VzVmlzaWJsZS5kZXRlY3RGb2N1c1Zpc2libGUpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgX3RoaXMuYnV0dG9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLm9uRm9jdXNWaXNpYmxlSGFuZGxlcihldmVudCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKEJ1dHRvbkJhc2UsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuYnV0dG9uID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgICAoMCwgX2ZvY3VzVmlzaWJsZS5saXN0ZW5Gb3JGb2N1c0tleXMpKCgwLCBfb3duZXJXaW5kb3cuZGVmYXVsdCkodGhpcy5idXR0b24pKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMuYWN0aW9uKSB7XG4gICAgICAgIHRoaXMucHJvcHMuYWN0aW9uKHtcbiAgICAgICAgICBmb2N1c1Zpc2libGU6IGZ1bmN0aW9uIGZvY3VzVmlzaWJsZSgpIHtcbiAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGZvY3VzVmlzaWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF90aGlzMi5idXR0b24uZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5mb2N1c1JpcHBsZSAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlUmlwcGxlICYmICFwcmV2U3RhdGUuZm9jdXNWaXNpYmxlICYmIHRoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIHRoaXMucmlwcGxlLnB1bHNhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5mb2N1c1Zpc2libGVUaW1lb3V0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aW9uID0gX3RoaXMkcHJvcHMyLmFjdGlvbixcbiAgICAgICAgICBidXR0b25SZWYgPSBfdGhpcyRwcm9wczIuYnV0dG9uUmVmLFxuICAgICAgICAgIGNlbnRlclJpcHBsZSA9IF90aGlzJHByb3BzMi5jZW50ZXJSaXBwbGUsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzMi5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZVByb3AgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzMi5jb21wb25lbnQsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczIuZGlzYWJsZWQsXG4gICAgICAgICAgZGlzYWJsZVJpcHBsZSA9IF90aGlzJHByb3BzMi5kaXNhYmxlUmlwcGxlLFxuICAgICAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF90aGlzJHByb3BzMi5kaXNhYmxlVG91Y2hSaXBwbGUsXG4gICAgICAgICAgZm9jdXNSaXBwbGUgPSBfdGhpcyRwcm9wczIuZm9jdXNSaXBwbGUsXG4gICAgICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wczIub25CbHVyLFxuICAgICAgICAgIG9uRm9jdXMgPSBfdGhpcyRwcm9wczIub25Gb2N1cyxcbiAgICAgICAgICBvbkZvY3VzVmlzaWJsZSA9IF90aGlzJHByb3BzMi5vbkZvY3VzVmlzaWJsZSxcbiAgICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wczIub25LZXlEb3duLFxuICAgICAgICAgIG9uS2V5VXAgPSBfdGhpcyRwcm9wczIub25LZXlVcCxcbiAgICAgICAgICBvbk1vdXNlRG93biA9IF90aGlzJHByb3BzMi5vbk1vdXNlRG93bixcbiAgICAgICAgICBvbk1vdXNlTGVhdmUgPSBfdGhpcyRwcm9wczIub25Nb3VzZUxlYXZlLFxuICAgICAgICAgIG9uTW91c2VVcCA9IF90aGlzJHByb3BzMi5vbk1vdXNlVXAsXG4gICAgICAgICAgb25Ub3VjaEVuZCA9IF90aGlzJHByb3BzMi5vblRvdWNoRW5kLFxuICAgICAgICAgIG9uVG91Y2hNb3ZlID0gX3RoaXMkcHJvcHMyLm9uVG91Y2hNb3ZlLFxuICAgICAgICAgIG9uVG91Y2hTdGFydCA9IF90aGlzJHByb3BzMi5vblRvdWNoU3RhcnQsXG4gICAgICAgICAgdGFiSW5kZXggPSBfdGhpcyRwcm9wczIudGFiSW5kZXgsXG4gICAgICAgICAgVG91Y2hSaXBwbGVQcm9wcyA9IF90aGlzJHByb3BzMi5Ub3VjaFJpcHBsZVByb3BzLFxuICAgICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wczIudHlwZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzMiwgW1wiYWN0aW9uXCIsIFwiYnV0dG9uUmVmXCIsIFwiY2VudGVyUmlwcGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkZvY3VzXCIsIFwib25Gb2N1c1Zpc2libGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk1vdXNlVXBcIiwgXCJvblRvdWNoRW5kXCIsIFwib25Ub3VjaE1vdmVcIiwgXCJvblRvdWNoU3RhcnRcIiwgXCJ0YWJJbmRleFwiLCBcIlRvdWNoUmlwcGxlUHJvcHNcIiwgXCJ0eXBlXCJdKTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZm9jdXNWaXNpYmxlLCB0aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBmb2N1c1Zpc2libGVDbGFzc05hbWUsIHRoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHZhciBDb21wb25lbnRQcm9wID0gY29tcG9uZW50O1xuXG4gICAgICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicgJiYgb3RoZXIuaHJlZikge1xuICAgICAgICBDb21wb25lbnRQcm9wID0gJ2EnO1xuICAgICAgfVxuXG4gICAgICB2YXIgYnV0dG9uUHJvcHMgPSB7fTtcblxuICAgICAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nKSB7XG4gICAgICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlIHx8ICdidXR0b24nO1xuICAgICAgICBidXR0b25Qcm9wcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnRQcm9wLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgb25LZXlVcDogdGhpcy5oYW5kbGVLZXlVcCxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXAsXG4gICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG4gICAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSxcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgIHJlZjogYnV0dG9uUmVmLFxuICAgICAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAnLTEnIDogdGFiSW5kZXhcbiAgICAgIH0sIGJ1dHRvblByb3BzLCBvdGhlciksIGNoaWxkcmVuLCAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ob1Nzci5kZWZhdWx0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ub3VjaFJpcHBsZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMub25SaXBwbGVSZWYsXG4gICAgICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gICAgICB9LCBUb3VjaFJpcHBsZVByb3BzKSkpIDogbnVsbCk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmV2U3RhdGUuZm9jdXNWaXNpYmxlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZvY3VzVmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgbGFzdERpc2FibGVkOiBuZXh0UHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAgICAgLy8gV2UgbmVlZCB0byBib29rIGtlZXAgdGhlIGZvY3VzZWQgc3RhdGUgbWFudWFsbHkuXG5cblxuICAgICAgaWYgKCFwcmV2U3RhdGUucHJldlN0YXRlICYmIG5leHRQcm9wcy5kaXNhYmxlZCAmJiBwcmV2U3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZm9jdXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICBsYXN0RGlzYWJsZWQ6IG5leHRQcm9wcy5kaXNhYmxlZFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYXN0RGlzYWJsZWQ6IG5leHRQcm9wcy5kaXNhYmxlZFxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEJ1dHRvbkJhc2U7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkJ1dHRvbkJhc2UucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IG1vdW50cy5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB0cmlnZ2VyIGFuIGFjdGlvbiBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbnMgVGhpcyBvYmplY3QgY29udGFpbnMgYWxsIHBvc3NpYmxlIGFjdGlvbnNcbiAgICogdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBhY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgYnV0dG9uIGNvbXBvbmVudC5cbiAgICovXG4gIGJ1dHRvblJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyB3aWxsIGJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b3VjaCByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgYGZhbHNlYC5cbiAgICovXG4gIGZvY3VzUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gaGVscCBhIHBlcnNvbiBrbm93IHdoaWNoIGVsZW1lbnQgaGFzIHRoZSBrZXlib2FyZCBmb2N1cy5cbiAgICogVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIGVsZW1lbnQgZ2FpbiB0aGUgZm9jdXMgdGhyb3VnaCBhIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIGZlYXR1cmVdKGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMtNC8jdGhlLWZvY3VzLXZpc2libGUtcHNldWRvKS5cbiAgICogVGhlIHJhdGlvbmFsIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW4gaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL21hc3Rlci9leHBsYWluZXIubWQpLlxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkIHdpdGggYSBrZXlib2FyZC5cbiAgICogV2UgdHJpZ2dlciBhIGBvbkZvY3VzYCBjYWxsYmFjayB0b28uXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgVG91Y2hSaXBwbGVQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVXNlZCB0byBjb250cm9sIHRoZSBidXR0b24ncyBwdXJwb3NlLlxuICAgKiBUaGlzIHByb3BlcnR5IHBhc3NlcyB0aGUgdmFsdWUgdG8gdGhlIGB0eXBlYCBhdHRyaWJ1dGUgb2YgdGhlIG5hdGl2ZSBidXR0b24gY29tcG9uZW50LlxuICAgKiBWYWxpZCBwcm9wZXJ0eSB2YWx1ZXMgaW5jbHVkZSBgYnV0dG9uYCwgYHN1Ym1pdGAsIGFuZCBgcmVzZXRgLlxuICAgKi9cbiAgdHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSA6IHt9O1xuQnV0dG9uQmFzZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNlbnRlclJpcHBsZTogZmFsc2UsXG4gIGNvbXBvbmVudDogJ2J1dHRvbicsXG4gIGRpc2FibGVSaXBwbGU6IGZhbHNlLFxuICBkaXNhYmxlVG91Y2hSaXBwbGU6IGZhbHNlLFxuICBmb2N1c1JpcHBsZTogZmFsc2UsXG4gIHRhYkluZGV4OiAnMCcsXG4gIHR5cGU6ICdidXR0b24nXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xufSkoQnV0dG9uQmFzZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vd25lckRvY3VtZW50XCIpKTtcblxuZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICB2YXIgZmFsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHdpbmRvdztcbiAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50VmlldyB8fCBmYWxsYmFjaztcbn1cblxudmFyIF9kZWZhdWx0ID0gb3duZXJXaW5kb3c7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Ob1Nzci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Ob1NzciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTm9Tc3JcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG4vKipcbiAqIE5vU3NyIHB1cnBvc2VseSByZW1vdmVzIGNvbXBvbmVudHMgZnJvbSB0aGUgc3ViamVjdCBvZiBTZXJ2ZXIgU2lkZSBSZW5kZXJpbmcgKFNTUikuXG4gKlxuICogVGhpcyBjb21wb25lbnQgY2FuIGJlIHVzZWZ1bCBpbiBhIHZhcmlldHkgb2Ygc2l0dWF0aW9uczpcbiAqIC0gRXNjYXBlIGhhdGNoIGZvciBicm9rZW4gZGVwZW5kZW5jaWVzIG5vdCBzdXBwb3J0aW5nIFNTUi5cbiAqIC0gSW1wcm92ZSB0aGUgdGltZS10by1maXJzdCBwYWludCBvbiB0aGUgY2xpZW50IGJ5IG9ubHkgcmVuZGVyaW5nIGFib3ZlIHRoZSBmb2xkLlxuICogLSBSZWR1Y2UgdGhlIHJlbmRlcmluZyB0aW1lIG9uIHRoZSBzZXJ2ZXIuXG4gKiAtIFVuZGVyIHRvbyBoZWF2eSBzZXJ2ZXIgbG9hZCwgeW91IGNhbiB0dXJuIG9uIHNlcnZpY2UgZGVncmFkYXRpb24uXG4gKi9cbnZhciBOb1NzciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShOb1NzciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTm9Tc3IoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBOb1Nzcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gKDAsIF9nZXRQcm90b3R5cGVPZjMuZGVmYXVsdCkoTm9Tc3IpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcbiAgICBfdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtb3VudGVkOiBmYWxzZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTm9Tc3IsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmRlZmVyKSB7XG4gICAgICAgIC8vIFdvbmRlcmluZyB3aHkgd2UgdXNlIHR3byBSQUZzPyBDaGVjayB0aGlzIHZpZGVvIG91dDpcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jQ09MN01DNFBsMFxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIFRoZSBicm93c2VyIHNob3VsZCBiZSBhYm91dCB0byByZW5kZXIgdGhlIERPTSB0aGF0IFJlYWN0IGNvbW1pdGVkIGF0IHRoaXMgcG9pbnQuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBpbnRlcnJ1cHQuIExldCdzIHdhaXQgdGhlIG5leHQgcmFmLlxuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMyLm1vdW50ZWQpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBtb3VudGVkOiB0cnVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG1vdW50ZWQ6IHRydWVcbiAgICAgICAgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tZGlkLW1vdW50LXNldC1zdGF0ZVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGZhbGxiYWNrID0gX3RoaXMkcHJvcHMuZmFsbGJhY2s7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5tb3VudGVkID8gY2hpbGRyZW4gOiBmYWxsYmFjaztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE5vU3NyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Ob1Nzci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBub3Qgb25seSBwcmV2ZW50IHNlcnZlciBzaWRlIHJlbmRlcmluZy5cbiAgICogSXQgd2lsbCBhbHNvIGRlZmVyIHRoZSByZW5kZXJpbmcgb2YgdGhlIGNoaWxkcmVuIGludG8gYSBkaWZmZXJlbnQgc2NyZWVuIGZyYW1lLlxuICAgKi9cbiAgZGVmZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZmFsbGJhY2sgY29udGVudCB0byBkaXNwbGF5LlxuICAgKi9cbiAgZmFsbGJhY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlXG59IDoge307XG5Ob1Nzci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3V0aWxzLmV4YWN0UHJvcCkoTm9Tc3IucHJvcFR5cGVzKSA6IHt9O1xuTm9Tc3IuZGVmYXVsdFByb3BzID0ge1xuICBkZWZlcjogZmFsc2UsXG4gIGZhbGxiYWNrOiBudWxsXG59O1xudmFyIF9kZWZhdWx0ID0gTm9Tc3I7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRldGVjdEZvY3VzVmlzaWJsZSA9IGRldGVjdEZvY3VzVmlzaWJsZTtcbmV4cG9ydHMubGlzdGVuRm9yRm9jdXNLZXlzID0gbGlzdGVuRm9yRm9jdXNLZXlzO1xuXG52YXIgX2tleWNvZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJrZXljb2RlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgaW50ZXJuYWwgPSB7XG4gIGZvY3VzS2V5UHJlc3NlZDogZmFsc2UsXG4gIGtleVVwRXZlbnRUaW1lb3V0OiAtMVxufTtcblxuZnVuY3Rpb24gZmluZEFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gIHZhciBhY3RpdmVFbGVtZW50ID0gZG9jLmFjdGl2ZUVsZW1lbnQ7XG5cbiAgd2hpbGUgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5zaGFkb3dSb290ICYmIGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdC5hY3RpdmVFbGVtZW50KSB7XG4gICAgYWN0aXZlRWxlbWVudCA9IGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdC5hY3RpdmVFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGRldGVjdEZvY3VzVmlzaWJsZShpbnN0YW5jZSwgZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgdmFyIGF0dGVtcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDE7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpbnN0YW5jZS5mb2N1c1Zpc2libGVDaGVja1RpbWUsICdNYXRlcmlhbC1VSTogbWlzc2luZyBpbnN0YW5jZS5mb2N1c1Zpc2libGVDaGVja1RpbWUuJykgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpbnN0YW5jZS5mb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzLCAnTWF0ZXJpYWwtVUk6IG1pc3NpbmcgaW5zdGFuY2UuZm9jdXNWaXNpYmxlTWF4Q2hlY2tUaW1lcy4nKSA6IHZvaWQgMDtcbiAgaW5zdGFuY2UuZm9jdXNWaXNpYmxlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoZWxlbWVudCk7XG4gICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBmaW5kQWN0aXZlRWxlbWVudChkb2MpO1xuXG4gICAgaWYgKGludGVybmFsLmZvY3VzS2V5UHJlc3NlZCAmJiAoYWN0aXZlRWxlbWVudCA9PT0gZWxlbWVudCB8fCBlbGVtZW50LmNvbnRhaW5zKGFjdGl2ZUVsZW1lbnQpKSkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2UgaWYgKGF0dGVtcHQgPCBpbnN0YW5jZS5mb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzKSB7XG4gICAgICBkZXRlY3RGb2N1c1Zpc2libGUoaW5zdGFuY2UsIGVsZW1lbnQsIGNhbGxiYWNrLCBhdHRlbXB0ICsgMSk7XG4gICAgfVxuICB9LCBpbnN0YW5jZS5mb2N1c1Zpc2libGVDaGVja1RpbWUpO1xufVxuXG52YXIgRk9DVVNfS0VZUyA9IFsndGFiJywgJ2VudGVyJywgJ3NwYWNlJywgJ2VzYycsICd1cCcsICdkb3duJywgJ2xlZnQnLCAncmlnaHQnXTtcblxuZnVuY3Rpb24gaXNGb2N1c0tleShldmVudCkge1xuICByZXR1cm4gRk9DVVNfS0VZUy5pbmRleE9mKCgwLCBfa2V5Y29kZS5kZWZhdWx0KShldmVudCkpID4gLTE7XG59XG5cbnZhciBoYW5kbGVLZXlVcEV2ZW50ID0gZnVuY3Rpb24gaGFuZGxlS2V5VXBFdmVudChldmVudCkge1xuICBpZiAoaXNGb2N1c0tleShldmVudCkpIHtcbiAgICBpbnRlcm5hbC5mb2N1c0tleVByZXNzZWQgPSB0cnVlOyAvLyBMZXQncyBjb25zaWRlciB0aGF0IHRoZSB1c2VyIGlzIHVzaW5nIGEga2V5Ym9hcmQgZHVyaW5nIGEgd2luZG93IGZyYW1lIG9mIDFzLlxuXG4gICAgY2xlYXJUaW1lb3V0KGludGVybmFsLmtleVVwRXZlbnRUaW1lb3V0KTtcbiAgICBpbnRlcm5hbC5rZXlVcEV2ZW50VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaW50ZXJuYWwuZm9jdXNLZXlQcmVzc2VkID0gZmFsc2U7XG4gICAgfSwgMWUzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbGlzdGVuRm9yRm9jdXNLZXlzKHdpbikge1xuICAvLyBUaGUgZXZlbnQgbGlzdGVuZXIgd2lsbCBvbmx5IGJlIGFkZGVkIG9uY2UgcGVyIHdpbmRvdy5cbiAgLy8gRHVwbGljYXRlIGV2ZW50IGxpc3RlbmVycyB3aWxsIGJlIGlnbm9yZWQgYnkgYWRkRXZlbnRMaXN0ZW5lci5cbiAgLy8gQWxzbywgdGhpcyBsb2dpYyBpcyBjbGllbnQgc2lkZSBvbmx5LCB3ZSBkb24ndCBuZWVkIGEgdGVhcmRvd24uXG4gIHdpbi5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGhhbmRsZUtleVVwRXZlbnQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gZXhwb3J0cy5ERUxBWV9SSVBQTEUgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXlcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25Hcm91cFwiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfUmlwcGxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SaXBwbGVcIikpO1xuXG52YXIgRFVSQVRJT04gPSA1NTA7XG52YXIgREVMQVlfUklQUExFID0gODA7XG5leHBvcnRzLkRFTEFZX1JJUFBMRSA9IERFTEFZX1JJUFBMRTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgekluZGV4OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZToge1xuICAgICAgd2lkdGg6IDUwLFxuICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZVZpc2libGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZVZpc2libGU6IHtcbiAgICAgIG9wYWNpdHk6IDAuMyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgIGFuaW1hdGlvbjogXCJtdWktcmlwcGxlLWVudGVyIFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICByaXBwbGVQdWxzYXRlOiB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogXCJcIi5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlciwgXCJtc1wiKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRgIGNsYXNzLiAqL1xuICAgIGNoaWxkOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZExlYXZpbmdgIGNsYXNzLiAqL1xuICAgIGNoaWxkTGVhdmluZzoge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGFuaW1hdGlvbjogXCJtdWktcmlwcGxlLWV4aXQgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgY2hpbGRQdWxzYXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBhbmltYXRpb246IFwibXVpLXJpcHBsZS1wdWxzYXRlIDI1MDBtcyBcIi5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgXCIgMjAwbXMgaW5maW5pdGVcIilcbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXInOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktcmlwcGxlLWV4aXQnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjkyKSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBUb3VjaFJpcHBsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoVG91Y2hSaXBwbGUsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb3VjaFJpcHBsZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFRvdWNoUmlwcGxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSAoMCwgX2dldFByb3RvdHlwZU9mMy5kZWZhdWx0KShUb3VjaFJpcHBsZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1zdGF0ZVxuICAgICAgbmV4dEtleTogMCxcbiAgICAgIHJpcHBsZXM6IFtdXG4gICAgfTtcblxuICAgIF90aGlzLnB1bHNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zdGFydCh7fSwge1xuICAgICAgICBwdWxzYXRlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGNiID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgX29wdGlvbnMkcHVsc2F0ZSA9IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgICAgICBwdWxzYXRlID0gX29wdGlvbnMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRwdWxzYXRlLFxuICAgICAgICAgIF9vcHRpb25zJGNlbnRlciA9IG9wdGlvbnMuY2VudGVyLFxuICAgICAgICAgIGNlbnRlciA9IF9vcHRpb25zJGNlbnRlciA9PT0gdm9pZCAwID8gX3RoaXMucHJvcHMuY2VudGVyIHx8IG9wdGlvbnMucHVsc2F0ZSA6IF9vcHRpb25zJGNlbnRlcixcbiAgICAgICAgICBfb3B0aW9ucyRmYWtlRWxlbWVudCA9IG9wdGlvbnMuZmFrZUVsZW1lbnQsXG4gICAgICAgICAgZmFrZUVsZW1lbnQgPSBfb3B0aW9ucyRmYWtlRWxlbWVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRmYWtlRWxlbWVudDtcblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIF90aGlzLmlnbm9yaW5nTW91c2VEb3duKSB7XG4gICAgICAgIF90aGlzLmlnbm9yaW5nTW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICBfdGhpcy5pZ25vcmluZ01vdXNlRG93biA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50ID0gZmFrZUVsZW1lbnQgPyBudWxsIDogX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpKTtcbiAgICAgIHZhciByZWN0ID0gZWxlbWVudCA/IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiB7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogMFxuICAgICAgfTsgLy8gR2V0IHRoZSBzaXplIG9mIHRoZSByaXBwbGVcblxuICAgICAgdmFyIHJpcHBsZVg7XG4gICAgICB2YXIgcmlwcGxlWTtcbiAgICAgIHZhciByaXBwbGVTaXplO1xuXG4gICAgICBpZiAoY2VudGVyIHx8IGV2ZW50LmNsaWVudFggPT09IDAgJiYgZXZlbnQuY2xpZW50WSA9PT0gMCB8fCAhZXZlbnQuY2xpZW50WCAmJiAhZXZlbnQudG91Y2hlcykge1xuICAgICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChyZWN0LndpZHRoIC8gMik7XG4gICAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2xpZW50WCA9IGV2ZW50LmNsaWVudFggPyBldmVudC5jbGllbnRYIDogZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgICB2YXIgY2xpZW50WSA9IGV2ZW50LmNsaWVudFkgPyBldmVudC5jbGllbnRZIDogZXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChjbGllbnRYIC0gcmVjdC5sZWZ0KTtcbiAgICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQoY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNlbnRlcikge1xuICAgICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogTWF0aC5wb3cocmVjdC53aWR0aCwgMikgKyBNYXRoLnBvdyhyZWN0LmhlaWdodCwgMikpIC8gMyk7IC8vIEZvciBzb21lIHJlYXNvbiB0aGUgYW5pbWF0aW9uIGlzIGJyb2tlbiBvbiBNb2JpbGUgQ2hyb21lIGlmIHRoZSBzaXplIGlmIGV2ZW4uXG5cbiAgICAgICAgaWYgKHJpcHBsZVNpemUgJSAyID09PSAwKSB7XG4gICAgICAgICAgcmlwcGxlU2l6ZSArPSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc2l6ZVggPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50V2lkdGggOiAwKSAtIHJpcHBsZVgpLCByaXBwbGVYKSAqIDIgKyAyO1xuICAgICAgICB2YXIgc2l6ZVkgPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMCkgLSByaXBwbGVZKSwgcmlwcGxlWSkgKiAyICsgMjtcbiAgICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydChNYXRoLnBvdyhzaXplWCwgMikgKyBNYXRoLnBvdyhzaXplWSwgMikpO1xuICAgICAgfSAvLyBUb3VjaGUgZGV2aWNlc1xuXG5cbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc3RhcnRDb21taXQoe1xuICAgICAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZSxcbiAgICAgICAgICAgIGNiOiBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9OyAvLyBEZXBsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuc3RhcnRUaW1lckNvbW1pdCkge1xuICAgICAgICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCgpO1xuXG4gICAgICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgIGNiOiBjYlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhcnRDb21taXQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICB2YXIgcHVsc2F0ZSA9IHBhcmFtcy5wdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgICByaXBwbGVZID0gcGFyYW1zLnJpcHBsZVksXG4gICAgICAgICAgcmlwcGxlU2l6ZSA9IHBhcmFtcy5yaXBwbGVTaXplLFxuICAgICAgICAgIGNiID0gcGFyYW1zLmNiO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuZXh0S2V5OiBzdGF0ZS5uZXh0S2V5ICsgMSxcbiAgICAgICAgICByaXBwbGVzOiAoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShzdGF0ZS5yaXBwbGVzKS5jb25jYXQoW19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1JpcHBsZS5kZWZhdWx0LCB7XG4gICAgICAgICAgICBrZXk6IHN0YXRlLm5leHRLZXksXG4gICAgICAgICAgICBjbGFzc2VzOiBfdGhpcy5wcm9wcy5jbGFzc2VzLFxuICAgICAgICAgICAgdGltZW91dDoge1xuICAgICAgICAgICAgICBleGl0OiBEVVJBVElPTixcbiAgICAgICAgICAgICAgZW50ZXI6IERVUkFUSU9OXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZVxuICAgICAgICAgIH0pXSlcbiAgICAgICAgfTtcbiAgICAgIH0sIGNiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RvcCA9IGZ1bmN0aW9uIChldmVudCwgY2IpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5zdGFydFRpbWVyKTtcbiAgICAgIHZhciByaXBwbGVzID0gX3RoaXMuc3RhdGUucmlwcGxlczsgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2hvdyByaXBwbGUgZWZmZWN0LlxuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBfdGhpcy5zdGFydFRpbWVyQ29tbWl0KSB7XG4gICAgICAgIGV2ZW50LnBlcnNpc3QoKTtcblxuICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0KCk7XG5cbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCA9IG51bGw7XG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zdG9wKGV2ZW50LCBjYik7XG4gICAgICAgIH0sIDApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQgPSBudWxsO1xuXG4gICAgICBpZiAocmlwcGxlcyAmJiByaXBwbGVzLmxlbmd0aCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcmlwcGxlczogcmlwcGxlcy5zbGljZSgxKVxuICAgICAgICB9LCBjYik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFRvdWNoUmlwcGxlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXJ0VGltZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjZW50ZXIgPSBfdGhpcyRwcm9wcy5jZW50ZXIsXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNlbnRlclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb25Hcm91cC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgICAgZW50ZXI6IHRydWUsXG4gICAgICAgIGV4aXQ6IHRydWUsXG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgICAgfSwgb3RoZXIpLCB0aGlzLnN0YXRlLnJpcHBsZXMpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVG91Y2hSaXBwbGU7XG59KF9yZWFjdC5kZWZhdWx0LlB1cmVDb21wb25lbnQpO1xuXG5Ub3VjaFJpcHBsZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSA6IHt9O1xuVG91Y2hSaXBwbGUuZGVmYXVsdFByb3BzID0ge1xuICBjZW50ZXI6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIGZsaXA6IGZhbHNlLFxuICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnXG59KShUb3VjaFJpcHBsZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiLCJmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyMltpXSA9IGFycltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhvdXRIb2xlczsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5OyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVNwcmVhZDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdExpZmVjeWNsZXNDb21wYXQgPSByZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIik7XG5cbnZhciBfQ2hpbGRNYXBwaW5nID0gcmVxdWlyZShcIi4vdXRpbHMvQ2hpbGRNYXBwaW5nXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55LFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgZXhpdGluZy5cbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgZG9uZSBieSB1c2luZyBgY2xvbmVFbGVtZW50YCBob3dldmVyIGluIHRoZSBjYXNlIG9mIGFuIGV4aXRpbmdcbiAgICogY2hpbGQgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGFuZCBub3QgYWNjZXNzaWJsZSB0byB0aGUgY29uc3VtZXIuXG4gICAqXG4gICAqIElmIHlvdSBkbyBuZWVkIHRvIHVwZGF0ZSBhIGNoaWxkIGFzIGl0IGxlYXZlcyB5b3UgY2FuIHByb3ZpZGUgYSBgY2hpbGRGYWN0b3J5YFxuICAgKiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlIGxlYXZpbmcuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKGNoaWxkOiBSZWFjdEVsZW1lbnQpIC0+IFJlYWN0RWxlbWVudFxuICAgKi9cbiAgY2hpbGRGYWN0b3J5OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufSA6IHt9OztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAgICogKGA8VHJhbnNpdGlvbj5gIGFuZCBgPENTU1RyYW5zaXRpb24+YCkgaW4gYSBsaXN0LiBMaWtlIHdpdGggdGhlIHRyYW5zaXRpb25cbiAgICogY29tcG9uZW50cywgYDxUcmFuc2l0aW9uR3JvdXA+YCBpcyBhIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZ1xuICAgKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAgICpcbiAgICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cuIEFzIGl0ZW1zIGFyZSByZW1vdmVkIG9yIGFkZGVkIHRvIHRoZSBUb2RvTGlzdCB0aGVcbiAgICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICAgKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAgICogY29tcG9uZW50LiBUaGlzIG1lYW5zIHlvdSBjYW4gbWl4IGFuZCBtYXRjaCBhbmltYXRpb25zIGFjcm9zcyBkaWZmZXJlbnQgbGlzdFxuICAgKiBpdGVtcy5cbiAgICovXG5cbn07XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25Hcm91cDoge1xuICAgICAgICBpc01vdW50aW5nOiAhdGhpcy5hcHBlYXJlZFxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5hcHBlYXJlZCA9IHRydWU7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgIGhhbmRsZUV4aXRlZCA9IF9yZWYuaGFuZGxlRXhpdGVkLFxuICAgICAgICBmaXJzdFJlbmRlciA9IF9yZWYuZmlyc3RSZW5kZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBmaXJzdFJlbmRlciA/ICgwLCBfQ2hpbGRNYXBwaW5nLmdldEluaXRpYWxDaGlsZE1hcHBpbmcpKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6ICgwLCBfQ2hpbGRNYXBwaW5nLmdldE5leHRDaGlsZE1hcHBpbmcpKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB2YWx1ZXModGhpcy5zdGF0ZS5jaGlsZHJlbikubWFwKGNoaWxkRmFjdG9yeSk7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmV4aXQ7XG5cbiAgICBpZiAoQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoVHJhbnNpdGlvbkdyb3VwKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5nZXRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmc7XG5leHBvcnRzLm1lcmdlQ2hpbGRNYXBwaW5ncyA9IG1lcmdlQ2hpbGRNYXBwaW5ncztcbmV4cG9ydHMuZ2V0SW5pdGlhbENoaWxkTWFwcGluZyA9IGdldEluaXRpYWxDaGlsZE1hcHBpbmc7XG5leHBvcnRzLmdldE5leHRDaGlsZE1hcHBpbmcgPSBnZXROZXh0Q2hpbGRNYXBwaW5nO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5mdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgX3JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cblxuZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSBrZXkgaW4gcHJldkNoaWxkTWFwcGluZztcbiAgICB2YXIgaGFzTmV4dCA9IGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9ICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfVHJhbnNpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvblwiKSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xudmFyIFJpcHBsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShSaXBwbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJpcHBsZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFJpcHBsZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gKDAsIF9nZXRQcm90b3R5cGVPZjMuZGVmYXVsdCkoUmlwcGxlKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgIGxlYXZpbmc6IGZhbHNlXG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbGVhdmluZzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFJpcHBsZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcywgX2NsYXNzTmFtZXMyO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wcy5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZVByb3AgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgcHVsc2F0ZSA9IF90aGlzJHByb3BzLnB1bHNhdGUsXG4gICAgICAgICAgcmlwcGxlWCA9IF90aGlzJHByb3BzLnJpcHBsZVgsXG4gICAgICAgICAgcmlwcGxlWSA9IF90aGlzJHByb3BzLnJpcHBsZVksXG4gICAgICAgICAgcmlwcGxlU2l6ZSA9IF90aGlzJHByb3BzLnJpcHBsZVNpemUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcInB1bHNhdGVcIiwgXCJyaXBwbGVYXCIsIFwicmlwcGxlWVwiLCBcInJpcHBsZVNpemVcIl0pO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICB2aXNpYmxlID0gX3RoaXMkc3RhdGUudmlzaWJsZSxcbiAgICAgICAgICBsZWF2aW5nID0gX3RoaXMkc3RhdGUubGVhdmluZztcbiAgICAgIHZhciByaXBwbGVDbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yaXBwbGUsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCB2aXNpYmxlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucmlwcGxlUHVsc2F0ZSwgcHVsc2F0ZSksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gICAgICB2YXIgcmlwcGxlU3R5bGVzID0ge1xuICAgICAgICB3aWR0aDogcmlwcGxlU2l6ZSxcbiAgICAgICAgaGVpZ2h0OiByaXBwbGVTaXplLFxuICAgICAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICAgICAgbGVmdDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVYXG4gICAgICB9O1xuICAgICAgdmFyIGNoaWxkQ2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuY2hpbGQsIChfY2xhc3NOYW1lczIgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmNoaWxkTGVhdmluZywgbGVhdmluZyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5jaGlsZFB1bHNhdGUsIHB1bHNhdGUpLCBfY2xhc3NOYW1lczIpKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBvbkVudGVyOiB0aGlzLmhhbmRsZUVudGVyLFxuICAgICAgICBvbkV4aXQ6IHRoaXMuaGFuZGxlRXhpdFxuICAgICAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogcmlwcGxlQ2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogcmlwcGxlU3R5bGVzXG4gICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICAgIH0pKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBSaXBwbGU7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblJpcHBsZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxufSA6IHt9O1xuUmlwcGxlLmRlZmF1bHRQcm9wcyA9IHtcbiAgcHVsc2F0ZTogZmFsc2Vcbn07XG52YXIgX2RlZmF1bHQgPSBSaXBwbGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuRVhJVElORyA9IGV4cG9ydHMuRU5URVJFRCA9IGV4cG9ydHMuRU5URVJJTkcgPSBleHBvcnRzLkVYSVRFRCA9IGV4cG9ydHMuVU5NT1VOVEVEID0gdm9pZCAwO1xuXG52YXIgUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9yZWFjdExpZmVjeWNsZXNDb21wYXQgPSByZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIik7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZShcIi4vdXRpbHMvUHJvcFR5cGVzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydHMuVU5NT1VOVEVEID0gVU5NT1VOVEVEO1xudmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0cy5FWElURUQgPSBFWElURUQ7XG52YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0cy5FTlRFUklORyA9IEVOVEVSSU5HO1xudmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnRzLkVOVEVSRUQgPSBFTlRFUkVEO1xudmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGUgY29tcG9uZW50cy5cbiAqIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yIGV4YW1wbGUgd2UgY2FuXG4gKiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7KHN0YXRlKSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogQXMgbm90ZWQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lc24ndCBfZG9fIGFueXRoaW5nIGJ5IGl0c2VsZiB0byBpdHMgY2hpbGQgY29tcG9uZW50LlxuICogV2hhdCBpdCBkb2VzIGRvIGlzIHRyYWNrIHRyYW5zaXRpb24gc3RhdGVzIG92ZXIgdGltZSBzbyB5b3UgY2FuIHVwZGF0ZSB0aGVcbiAqIGNvbXBvbmVudCAoc3VjaCBhcyBieSBhZGRpbmcgc3R5bGVzIG9yIGNsYXNzZXMpIHdoZW4gaXQgY2hhbmdlcyBzdGF0ZXMuXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50IGJlZ2lucyB0aGVcbiAqIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsXG4gKiB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZVxuICogaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZSB0aGUgZm9sbG93aW5nIGV4YW1wbGU6XG4gKlxuICogYGBganN4XG4gKiBzdGF0ZSA9IHsgaW46IGZhbHNlIH07XG4gKlxuICogdG9nZ2xlRW50ZXJTdGF0ZSA9ICgpID0+IHtcbiAqICAgdGhpcy5zZXRTdGF0ZSh7IGluOiB0cnVlIH0pO1xuICogfVxuICpcbiAqIHJlbmRlcigpIHtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e3RoaXMuc3RhdGUuaW59IHRpbWVvdXQ9ezUwMH0gLz5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy50b2dnbGVFbnRlclN0YXRlfT5DbGljayB0byBFbnRlcjwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGUgYW5kXG4gKiBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXMgdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb20gYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqXG4gKiAjIyBUaW1pbmdcbiAqXG4gKiBUaW1pbmcgaXMgb2Z0ZW4gdGhlIHRyaWNraWVzdCBwYXJ0IG9mIGFuaW1hdGlvbiwgbWlzdGFrZXMgY2FuIHJlc3VsdCBpbiBzbGlnaHQgZGVsYXlzXG4gKiB0aGF0IGFyZSBoYXJkIHRvIHBpbiBkb3duLiBBIGNvbW1vbiBleGFtcGxlIGlzIHdoZW4geW91IHdhbnQgdG8gYWRkIGFuIGV4aXQgdHJhbnNpdGlvbixcbiAqIHlvdSBzaG91bGQgc2V0IHRoZSBkZXNpcmVkIGZpbmFsIHN0eWxlcyB3aGVuIHRoZSBzdGF0ZSBpcyBgJ2V4aXRpbmcnYC4gVGhhdCdzIHdoZW4gdGhlXG4gKiB0cmFuc2l0aW9uIHRvIHRob3NlIHN0eWxlcyB3aWxsIHN0YXJ0IGFuZCwgaWYgeW91IG1hdGNoZWQgdGhlIGB0aW1lb3V0YCBwcm9wIHdpdGggdGhlXG4gKiBDU1MgVHJhbnNpdGlvbiBkdXJhdGlvbiwgaXQgd2lsbCBlbmQgZXhhY3RseSB3aGVuIHRoZSBzdGF0ZSBjaGFuZ2VzIHRvIGAnZXhpdGVkJ2AuXG4gKlxuICogPiAqKk5vdGUqKjogRm9yIHNpbXBsZXIgdHJhbnNpdGlvbnMgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgbWlnaHQgYmUgZW5vdWdoLCBidXRcbiAqID4gdGFrZSBpbnRvIGFjY291bnQgdGhhdCBpdCdzIHBsYXRmb3JtLWFnbm9zdGljLCB3aGlsZSB0aGUgYENTU1RyYW5zaXRpb25gIGNvbXBvbmVudFxuICogPiBbZm9yY2VzIHJlZmxvd3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvYmxvYi81MDA3MzAzZTcyOWE3NGJlNjZhMjFjM2UyMjA1ZTQ5MTY4MjE1MjRiL3NyYy9DU1NUcmFuc2l0aW9uLmpzI0wyMDgtTDIxNSlcbiAqID4gaW4gb3JkZXIgdG8gbWFrZSBtb3JlIGNvbXBsZXggdHJhbnNpdGlvbnMgbW9yZSBwcmVkaWN0YWJsZS4gRm9yIGV4YW1wbGUsIGV2ZW4gdGhvdWdoXG4gKiA+IGNsYXNzZXMgYGV4YW1wbGUtZW50ZXJgIGFuZCBgZXhhbXBsZS1lbnRlci1hY3RpdmVgIGFyZSBhcHBsaWVkIGltbWVkaWF0ZWx5IG9uZSBhZnRlclxuICogPiBhbm90aGVyLCB5b3UgY2FuIHN0aWxsIHRyYW5zaXRpb24gZnJvbSBvbmUgdG8gdGhlIG90aGVyIGJlY2F1c2Ugb2YgdGhlIGZvcmNlZCByZWZsb3dcbiAqID4gKHJlYWQgW3RoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvaXNzdWVzLzE1OSNpc3N1ZWNvbW1lbnQtMzIyNzYxMTcxKVxuICogPiBmb3IgbW9yZSBpbmZvKS4gVGFrZSB0aGlzIGludG8gYWNjb3VudCB3aGVuIGNob29zaW5nIGJldHdlZW4gYFRyYW5zaXRpb25gIGFuZFxuICogPiBgQ1NTVHJhbnNpdGlvbmAuXG4gKi9cblxuZXhwb3J0cy5FWElUSU5HID0gRVhJVElORztcblxudmFyIFRyYW5zaXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQudHJhbnNpdGlvbkdyb3VwOyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25Hcm91cDogbnVsbCAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuXG4gICAgfTtcbiAgfTtcblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTsgLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG5cblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlLCB0aGlzLmFwcGVhclN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhmYWxzZSwgbmV4dFN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGltZW91dHMgPSBmdW5jdGlvbiBnZXRUaW1lb3V0cygpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDtcbiAgICB2YXIgZXhpdCwgZW50ZXIsIGFwcGVhcjtcbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7XG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGVudGVyOiBlbnRlcixcbiAgICAgIGFwcGVhcjogYXBwZWFyXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU3RhdHVzKG1vdW50aW5nLCBuZXh0U3RhdHVzKSB7XG4gICAgaWYgKG1vdW50aW5nID09PSB2b2lkIDApIHtcbiAgICAgIG1vdW50aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG5cbiAgICAgIHZhciBub2RlID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICB0aGlzLnBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAgPyB0aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwLmlzTW91bnRpbmcgOiBtb3VudGluZztcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGVudGVyIGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVOVEVSRURcbiAgICAvLyBpZiB3ZSBhcmUgbW91bnRpbmcgYW5kIHJ1bm5pbmcgdGhpcyBpdCBtZWFucyBhcHBlYXIgX211c3RfIGJlIHNldFxuXG4gICAgaWYgKCFtb3VudGluZyAmJiAhZW50ZXIpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRW50ZXIobm9kZSwgYXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobm9kZSwgYXBwZWFyaW5nKTsgLy8gRklYTUU6IGFwcGVhciB0aW1lb3V0P1xuXG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZW50ZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FeGl0ID0gZnVuY3Rpb24gcGVyZm9ybUV4aXQobm9kZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpOyAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRFxuXG4gICAgaWYgKCFleGl0KSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxOZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKTtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNhZmVTZXRTdGF0ZSA9IGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5LCBidXQgdGhlcmUgYXJlIHdlaXJkIHJhY2UgY29uZGl0aW9ucyB3aXRoXG4gICAgLy8gc2V0U3RhdGUgY2FsbGJhY2tzIGFuZCB1bm1vdW50aW5nIGluIHRlc3RpbmcsIHNvIGFsd2F5cyBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIHdlIGNhbiBjYW5jZWwgYW55IHBlbmRpbmcgc2V0U3RhdGUgY2FsbGJhY2tzIGFmdGVyIHdlIHVubW91bnQuXG4gICAgY2FsbGJhY2sgPSB0aGlzLnNldE5leHRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0TmV4dENhbGxiYWNrID0gZnVuY3Rpb24gc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgYWN0aXZlID0gdHJ1ZTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpczQubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMubmV4dENhbGxiYWNrO1xuICB9O1xuXG4gIF9wcm90by5vblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dCwgaGFuZGxlcikge1xuICAgIHRoaXMuc2V0TmV4dENhbGxiYWNrKGhhbmRsZXIpO1xuXG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCAwKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIl0pOyAvLyBmaWx0ZXIgcHJvcHMgZm9yIFRyYW5zdGl0aW9uXG5cblxuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmluO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm1vdW50T25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy51bm1vdW50T25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5leGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnRpbWVvdXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYWRkRW5kTGlzdGVuZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyaW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0aW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGVkO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHN0YXR1cywgY2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogUHJvcFR5cGVzLm9iamVjdFxufTtcblRyYW5zaXRpb24uY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogZnVuY3Rpb24gdHJhbnNpdGlvbkdyb3VwKCkge31cbn07XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgYGZ1bmN0aW9uYCBjaGlsZCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGEgUmVhY3QgZWxlbWVudC5cbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHN0YXR1c1xuICAgKiAoJ2VudGVyaW5nJywgJ2VudGVyZWQnLCAnZXhpdGluZycsICdleGl0ZWQnLCAndW5tb3VudGVkJyksIHdoaWNoIGNhbiBiZSB1c2VkXG4gICAqIHRvIGFwcGx5IGNvbnRleHQgc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHsoc3RhdHVzKSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdHVzfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy5cbiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZVxuICAgKiBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb24gYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgXCJhcHBlYXJcIiBzdGF0ZXMuIGBhcHBlYXJgIG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGBlbnRlcmAgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZFxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zIGxpa2U6IGB0aW1lb3V0PXs1MDB9YCxcbiAgICogb3IgaW5kaXZpZHVhbGx5IGxpa2U6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBfUHJvcFR5cGVzLnRpbWVvdXRzU2hhcGUgOiB7fTs7XG4gICAgaWYgKCFwcm9wcy5hZGRFbmRMaXN0ZW5lcikgcHQgPSBwdC5pc1JlcXVpcmVkO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHB0LmFwcGx5KHZvaWQgMCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmdcbiAgICogRE9NIG5vZGUgYW5kIGEgYGRvbmVgIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiAqKk5vdGU6KiogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbn0gOiB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IDA7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IDE7XG5UcmFuc2l0aW9uLkVOVEVSSU5HID0gMjtcblRyYW5zaXRpb24uRU5URVJFRCA9IDM7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSA0O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoVHJhbnNpdGlvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy50cmFuc2l0aW9uVGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBleHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25UaW1lb3V0KHRyYW5zaXRpb25UeXBlKSB7XG4gIHZhciB0aW1lb3V0UHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZSArICdUaW1lb3V0JztcbiAgdmFyIGVuYWJsZWRQcm9wTmFtZSA9ICd0cmFuc2l0aW9uJyArIHRyYW5zaXRpb25UeXBlO1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgLy8gSWYgdGhlIHRyYW5zaXRpb24gaXMgZW5hYmxlZFxuICAgIGlmIChwcm9wc1tlbmFibGVkUHJvcE5hbWVdKSB7XG4gICAgICAvLyBJZiBubyB0aW1lb3V0IGR1cmF0aW9uIGlzIHByb3ZpZGVkXG4gICAgICBpZiAocHJvcHNbdGltZW91dFByb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyB3YXNuXFwndCBzdXBwbGllZCB0byBDU1NUcmFuc2l0aW9uR3JvdXA6ICcgKyAndGhpcyBjYW4gY2F1c2UgdW5yZWxpYWJsZSBhbmltYXRpb25zIGFuZCB3b25cXCd0IGJlIHN1cHBvcnRlZCBpbiAnICsgJ2EgZnV0dXJlIHZlcnNpb24gb2YgUmVhY3QuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYW5pbWF0aW9uLXRyYW5zaXRpb24tZ3JvdXAtdGltZW91dCBmb3IgbW9yZSAnICsgJ2luZm9ybWF0aW9uLicpOyAvLyBJZiB0aGUgZHVyYXRpb24gaXNuJ3QgYSBudW1iZXJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzW3RpbWVvdXRQcm9wTmFtZV0gIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyBtdXN0IGJlIGEgbnVtYmVyIChpbiBtaWxsaXNlY29uZHMpJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbnZhciB0aW1lb3V0c1NoYXBlID0gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbn0pLmlzUmVxdWlyZWRdKTtcblxuZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gdGltZW91dHNTaGFwZTtcblxudmFyIGNsYXNzTmFtZXNTaGFwZSA9IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJEb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdERvbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXRBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pXSk7XG5cbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gY2xhc3NOYW1lc1NoYXBlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tbXV0YWJsZS1leHBvcnRzICovXG52YXIgY3JlYXRlUmlwcGxlSGFuZGxlciA9IGZ1bmN0aW9uIGNyZWF0ZVJpcHBsZUhhbmRsZXIoaW5zdGFuY2UsIGV2ZW50TmFtZSwgYWN0aW9uLCBjYikge1xuICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYi5jYWxsKGluc3RhbmNlLCBldmVudCk7XG4gICAgfVxuXG4gICAgdmFyIGlnbm9yZSA9IGZhbHNlOyAvLyBJZ25vcmUgZXZlbnRzIHRoYXQgaGF2ZSBiZWVuIGBldmVudC5wcmV2ZW50RGVmYXVsdCgpYCBtYXJrZWQuXG5cbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaWdub3JlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuZGlzYWJsZVRvdWNoUmlwcGxlICYmIGV2ZW50TmFtZSAhPT0gJ0JsdXInKSB7XG4gICAgICBpZ25vcmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICghaWdub3JlICYmIGluc3RhbmNlLnJpcHBsZSkge1xuICAgICAgaW5zdGFuY2UucmlwcGxlW2FjdGlvbl0oZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UucHJvcHNbXCJvblwiLmNvbmNhdChldmVudE5hbWUpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5zdGFuY2UucHJvcHNbXCJvblwiLmNvbmNhdChldmVudE5hbWUpXShldmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cblxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIGNyZWF0ZVJpcHBsZUhhbmRsZXIgPSBmdW5jdGlvbiBjcmVhdGVSaXBwbGVIYW5kbGVyKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gY3JlYXRlUmlwcGxlSGFuZGxlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0NhcmQuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9DYXJkLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0NhcmQuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkNhcmQge1xcbiAgd2lkdGg6IDEyMHB4O1xcbiAgbWFyZ2luOiAyMHB4OyB9XFxuICAuQ2FyZCBkaXYge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICBmb250LXNpemU6IDIwcHg7IH1cXG4gIC5DYXJkIC5oZWFydCxcXG4gIC5DYXJkIC5kaWFtb25kIHtcXG4gICAgY29sb3I6IHJlZDsgfVxcblwiLCBcIlwiXSk7XG5cbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0NhcmRDb250YWluZXIuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9DYXJkQ29udGFpbmVyLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL0NhcmRDb250YWluZXIuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkNhcmRDb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgfVxcbiAgLkNhcmRDb250YWluZXIgLm9uZWNhcmRkaXNwbGF5IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuICAgIG1hcmdpbi10b3A6IDMwOyB9XFxuXCIsIFwiXCJdKTtcblxuIiwiY29uc3QgZ2V0UmFuZG9tSW5kZXggPSB2ID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1hdGguZmxvb3IodikpXG5cbmV4cG9ydCBjb25zdCBzaHVmZmxlID0gYXJyYXkgPT4ge1xuICAgIGNvbnN0IGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gYXJyTGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBsZXQgcmFuZG9tSW5kZXggPSBnZXRSYW5kb21JbmRleChpICsgMSk7XG4gICAgICAgIGxldCB0bXAgPSBhcnJheVtpXTtcbiAgICAgICAgYXJyYXlbaV0gPSBhcnJheVtyYW5kb21JbmRleF07XG4gICAgICAgIGFycmF5W3JhbmRvbUluZGV4XSA9IHRtcDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVDYXJkcyA9ICgpID0+IHtcbiAgICBjb25zdCBjYXJkcyA9IFtdO1xuICAgIGNvbnN0IGdyb3VwcyA9IFsnaGVhcnQnLCAnc3BhZGUnLCAnY2x1YicsICdkaWFtb25kJ107XG4gICAgY29uc3QgY2FyZFZhbHVlcyA9IFsnQWNlJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsICcxMCcsICdKYWNrJywgJ1F1ZWVuJywgJ0tpbmcnXTtcbiAgICBncm91cHMuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICAgIGNhcmRWYWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICBjYXJkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiBjYXJkcztcbn1cblxuZXhwb3J0IGNvbnN0IGRlYWxPbmVDYXJkID0gY2FyZHMgPT4ge1xuICAgIGlmIChjYXJkcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZ2V0UmFuZG9tSW5kZXgoY2FyZHMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgY2FyZCA9IGNhcmRzW2luZGV4XTtcbiAgICAgICAgY2FyZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuIHsgY2FyZHMsIGNhcmQgfTtcbiAgICB9IGVsc2UgaWYgKGNhcmRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4geyBjYXJkczogW10sIGNhcmQ6IGNhcmRzWzBdIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY2FyZHM6IFtdLCBjYXJkOiB7fSB9O1xufVxuXG5cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEFwcEJhciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9BcHBCYXInO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5pbXBvcnQgJy4vSGVhZGVyLnNjc3MnO1xuXG5jb25zdCBIZWFkZXIgPSAocHJvcHMpID0+IHtcblxuICAgIGNvbnN0IHNodWZmbGVIYW5kbGVyID0gKCkgPT4gcHJvcHMuaGFuZGxlU2h1ZmZsZSgpO1xuICAgIGNvbnN0IGRlYWxPbmVDYXJkSGFuZGxlciA9ICgpID0+IHByb3BzLmhhbmRsZURlYWxPbmVDYXJkKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkhlYWRlclwiPlxuICAgICAgICAgICAgPEFwcEJhciBwb3NpdGlvbj1cInN0YXRpY1wiPlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoNlwiIGNvbG9yPVwiaW5oZXJpdFwiID5cbiAgICAgICAgICAgICAgICAgICAgRGVjayBPZiBDYXJkc1xuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIGNvbG9yPVwiaW5oZXJpdFwiIG9uQ2xpY2s9e3NodWZmbGVIYW5kbGVyfT5TaHVmZmxlPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBjb2xvcj1cImluaGVyaXRcIiBvbkNsaWNrPXtkZWFsT25lQ2FyZEhhbmRsZXJ9PkRlYWwgT25lIENhcmQ8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvQXBwQmFyPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbkhlYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgaGFuZGxlU2h1ZmZsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBoYW5kbGVEZWFsT25lQ2FyZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7IiwiY29uc3Qgc3VpdHMgPSB7XG4gICAgaGVhcnQ6ICfimaXvuI8nLFxuICAgIHNwYWRlOiAn4pmg77iPJywgXG4gICAgY2x1YjogJ+KZo++4jycsXG4gICAgZGlhbW9uZDogJ+KZpu+4jydcbn1cbmV4cG9ydCBkZWZhdWx0IHN1aXRzOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1BhcGVyJztcbmltcG9ydCBzdWl0cyBmcm9tICcuLi8uLi9jb25zdGFudC9pbmRleCc7XG5pbXBvcnQgJy4vQ2FyZC5zY3NzJztcblxuY29uc3QgQ2FyZCA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgY2FyZCB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJDYXJkXCI+XG4gICAgICAgICAgICA8UGFwZXI+XG4gICAgICAgICAgICAgICAgPGRpdj57c3VpdHNbY2FyZC5ncm91cF19PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NhcmQuZ3JvdXB9PntjYXJkLnZhbHVlfTwvZGl2PlxuICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG5DYXJkLnByb3BUeXBlcyA9IHtcbiAgICBjYXJkOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBncm91cDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBDYXJkOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2FyZCBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NhcmQvQ2FyZCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICcuL0NhcmRDb250YWluZXIuc2Nzcyc7XG5cbmNvbnN0IENhcmRDb250YWluZXIgPSAocHJvcHMpID0+IHtcblxuICAgIGNvbnN0IGRpc3BsYXlBbGxDYXJkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gcHJvcHMuY2FyZHMubWFwKChjYXJkLCBpbmRleCkgPT4gPENhcmQga2V5PXtpbmRleH0gY2FyZD17Y2FyZH0gLz4pXG4gICAgfVxuXG4gICAgY29uc3QgZGlzcGxheU9uZUNhcmQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9uZWNhcmRkaXNwbGF5XCI+XG4gICAgICAgICAgICAgICAgPGRpdj5SZXN0IGNhcmRzIDoge3Byb3BzLmNhcmRzLmxlbmd0aH08L2Rpdj5cbiAgICAgICAgICAgICAgICB7cHJvcHMuY2FyZHMubGVuZ3RoICE9PSAwID9cbiAgICAgICAgICAgICAgICAgICAgPENhcmQgY2FyZD17cHJvcHMuY2FyZH0gLz4gOlxuICAgICAgICAgICAgICAgICAgICA8ZGl2Pk5vIG1vcmUgY2FyZCwgY2xpY2sgc2h1ZmZsZSB0byByZXN0YXJ0PC9kaXY+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkNhcmRDb250YWluZXJcIj5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwcm9wcy5kZWFsT25lQ2FyZCA/IGRpc3BsYXlPbmVDYXJkKCkgOlxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5QWxsQ2FyZCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuQ2FyZENvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG4gICAgY2FyZHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLmlzUmVxdWlyZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FyZENvbnRhaW5lcjsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHNodWZmbGUsIGdlbmVyYXRlQ2FyZHMsIGRlYWxPbmVDYXJkIH0gZnJvbSAnLi9oZWxwZXJzL2luZGV4JztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL0hlYWRlcic7XG5pbXBvcnQgQ2FyZENvbnRhaW5lciBmcm9tICcuLi9zcmMvY29tcG9uZW50cy9DYXJkQ29udGFpbmVyL0NhcmRDb250YWluZXInO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjYXJkOiB7fSxcbiAgICAgICAgICAgIGNhcmRzOiBnZW5lcmF0ZUNhcmRzKCksXG4gICAgICAgICAgICBkZWFsT25lQ2FyZDogZmFsc2UsXG4gICAgICAgICAgICBzaHVmZmxlRm9yRGVhbE9uZUNhcmQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kbGVTaHVmZmxlID0gdGhpcy5oYW5kbGVTaHVmZmxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlRGVhbE9uZUNhcmQgPSB0aGlzLmhhbmRsZURlYWxPbmVDYXJkLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgaGFuZGxlU2h1ZmZsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY2FyZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjYXJkczogc2h1ZmZsZShnZW5lcmF0ZUNhcmRzKCkpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2FyZHM6IHNodWZmbGUodGhpcy5zdGF0ZS5jYXJkcylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjYXJkOiB7fSxcbiAgICAgICAgICAgIGRlYWxPbmVDYXJkOiBmYWxzZSxcbiAgICAgICAgICAgIHNodWZmbGVGb3JEZWFsT25lQ2FyZDogZmFsc2VcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBoYW5kbGVEZWFsT25lQ2FyZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnNodWZmbGVGb3JEZWFsT25lQ2FyZCkge1xuICAgICAgICAgICAgc2h1ZmZsZSh0aGlzLnN0YXRlLmNhcmRzKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNodWZmbGVGb3JEZWFsT25lQ2FyZDogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGNhcmQsIGNhcmRzIH0gPSBkZWFsT25lQ2FyZCh0aGlzLnN0YXRlLmNhcmRzKTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNhcmQsXG4gICAgICAgICAgICBjYXJkcyxcbiAgICAgICAgICAgIGRlYWxPbmVDYXJkOiB0cnVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgICAgIDxIZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2h1ZmZsZT17dGhpcy5oYW5kbGVTaHVmZmxlfVxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVEZWFsT25lQ2FyZD17dGhpcy5oYW5kbGVEZWFsT25lQ2FyZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxDYXJkQ29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIGNhcmQ9e3RoaXMuc3RhdGUuY2FyZH1cbiAgICAgICAgICAgICAgICAgICAgY2FyZHM9e3RoaXMuc3RhdGUuY2FyZHN9XG4gICAgICAgICAgICAgICAgICAgIGRlYWxPbmVDYXJkPXt0aGlzLnN0YXRlLmRlYWxPbmVDYXJkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=